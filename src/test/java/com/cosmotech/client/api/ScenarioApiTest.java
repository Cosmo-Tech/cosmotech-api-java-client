/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiException;
import com.cosmotech.client.model.Scenario;
import com.cosmotech.client.model.ScenarioBase;
import com.cosmotech.client.model.ScenarioComparisonResult;
import com.cosmotech.client.model.ScenarioDataWarehouseQuery;
import com.cosmotech.client.model.ScenarioDataWarehouseQueryResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScenarioApi
 */
@Ignore
public class ScenarioApiTest {

    private final ScenarioApi api = new ScenarioApi();

    
    /**
     * Compare the Scenario with another one and returns the difference for parameters values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compareScenariosTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        String comparedScenarioId = null;
        ScenarioComparisonResult response = api.compareScenarios(organizationId, workspaceId, scenarioId, comparedScenarioId);

        // TODO: test validations
    }
    
    /**
     * Create a new scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createScenarioTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        Scenario scenario = null;
        Scenario response = api.createScenario(organizationId, workspaceId, scenario);

        // TODO: test validations
    }
    
    /**
     * Delete a scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScenarioTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        Scenario response = api.deleteScenario(organizationId, workspaceId, scenarioId);

        // TODO: test validations
    }
    
    /**
     * List all Scenarios
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAllScenariosTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        List<Scenario> response = api.findAllScenarios(organizationId, workspaceId);

        // TODO: test validations
    }
    
    /**
     * Get the details of an scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findScenarioByIdTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        Scenario response = api.findScenarioById(organizationId, workspaceId, scenarioId);

        // TODO: test validations
    }
    
    /**
     * Get the Scenarios Tree
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScenariosTreeTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        List<ScenarioBase> response = api.getScenariosTree(organizationId, workspaceId);

        // TODO: test validations
    }
    
    /**
     * Get the result of a query on the DatawareHouse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryDataWarehouseTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        ScenarioDataWarehouseQuery scenarioDataWarehouseQuery = null;
        ScenarioDataWarehouseQueryResult response = api.queryDataWarehouse(organizationId, workspaceId, scenarioId, scenarioDataWarehouseQuery);

        // TODO: test validations
    }
    
    /**
     * Update a scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScenarioTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        Scenario scenario = null;
        Scenario response = api.updateScenario(organizationId, workspaceId, scenarioId, scenario);

        // TODO: test validations
    }
    
}
