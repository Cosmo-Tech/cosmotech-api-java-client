/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiException;
import com.cosmotech.client.model.Simulation;
import com.cosmotech.client.model.SimulationBase;
import com.cosmotech.client.model.SimulationLogs;
import com.cosmotech.client.model.SimulationLogsOptions;
import com.cosmotech.client.model.SimulationSearch;
import com.cosmotech.client.model.SimulationStartContainers;
import com.cosmotech.client.model.SimulationStartScenario;
import com.cosmotech.client.model.SimulationStartSolution;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SimulationApi
 */
@Ignore
public class SimulationApiTest {

    private final SimulationApi api = new SimulationApi();

    
    /**
     * Delete a simulation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSimulationTest() throws ApiException {
        String organizationId = null;
        String simulationId = null;
        Simulation response = api.deleteSimulation(organizationId, simulationId);

        // TODO: test validations
    }
    
    /**
     * Get the details of a simulation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSimulationByIdTest() throws ApiException {
        String organizationId = null;
        String simulationId = null;
        Simulation response = api.findSimulationById(organizationId, simulationId);

        // TODO: test validations
    }
    
    /**
     * get the Simulation for the Scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScenarioSimulationTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        String simulationId = null;
        Simulation response = api.getScenarioSimulation(organizationId, workspaceId, scenarioId, simulationId);

        // TODO: test validations
    }
    
    /**
     * get the logs for the Simulation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScenarioSimulationLogsTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        String simulationId = null;
        SimulationLogs response = api.getScenarioSimulationLogs(organizationId, workspaceId, scenarioId, simulationId);

        // TODO: test validations
    }
    
    /**
     * get the list of Simulations for the Scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScenarioSimulationsTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        List<SimulationBase> response = api.getScenarioSimulations(organizationId, workspaceId, scenarioId);

        // TODO: test validations
    }
    
    /**
     * get the list of Simulations for the Workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkspaceSimulationsTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        List<SimulationBase> response = api.getWorkspaceSimulations(organizationId, workspaceId);

        // TODO: test validations
    }
    
    /**
     * run a Simulation for the Scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runScenarioTest() throws ApiException {
        String organizationId = null;
        String workspaceId = null;
        String scenarioId = null;
        SimulationBase response = api.runScenario(organizationId, workspaceId, scenarioId);

        // TODO: test validations
    }
    
    /**
     * Search the logs of a simulation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSimulationLogsTest() throws ApiException {
        String organizationId = null;
        String simulationId = null;
        SimulationLogsOptions simulationLogsOptions = null;
        SimulationLogs response = api.searchSimulationLogs(organizationId, simulationId, simulationLogsOptions);

        // TODO: test validations
    }
    
    /**
     * Search Simulations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSimulationsTest() throws ApiException {
        String organizationId = null;
        SimulationSearch simulationSearch = null;
        List<SimulationBase> response = api.searchSimulations(organizationId, simulationSearch);

        // TODO: test validations
    }
    
    /**
     * Start a new simulation with raw containers definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSimulationContainersTest() throws ApiException {
        String organizationId = null;
        SimulationStartContainers simulationStartContainers = null;
        Simulation response = api.startSimulationContainers(organizationId, simulationStartContainers);

        // TODO: test validations
    }
    
    /**
     * Start a new simulation for a Scenario
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSimulationScenarioTest() throws ApiException {
        String organizationId = null;
        SimulationStartScenario simulationStartScenario = null;
        Simulation response = api.startSimulationScenario(organizationId, simulationStartScenario);

        // TODO: test validations
    }
    
    /**
     * Start a new simulation for a Solution Run Template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSimulationSolutionTest() throws ApiException {
        String organizationId = null;
        SimulationStartSolution simulationStartSolution = null;
        Simulation response = api.startSimulationSolution(organizationId, simulationStartSolution);

        // TODO: test validations
    }
    
}
