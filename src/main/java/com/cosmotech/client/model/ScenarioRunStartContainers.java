/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.cosmotech.client.model.ScenarioRunContainer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * the parameters to run directly containers
 */
@ApiModel(description = "the parameters to run directly containers")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-22T12:34:21.716581+02:00[Europe/Paris]")
public class ScenarioRunStartContainers {
  public static final String SERIALIZED_NAME_NODE_LABEL = "nodeLabel";
  @SerializedName(SERIALIZED_NAME_NODE_LABEL)
  private String nodeLabel;

  public static final String SERIALIZED_NAME_FETCH_DATASET_CONTAINERS = "fetchDatasetContainers";
  @SerializedName(SERIALIZED_NAME_FETCH_DATASET_CONTAINERS)
  private List<ScenarioRunContainer> fetchDatasetContainers = null;

  public static final String SERIALIZED_NAME_FETCH_SCENARIO_PARAMETERS_CONTAINER = "fetchScenarioParametersContainer";
  @SerializedName(SERIALIZED_NAME_FETCH_SCENARIO_PARAMETERS_CONTAINER)
  private ScenarioRunContainer fetchScenarioParametersContainer;

  public static final String SERIALIZED_NAME_APPLY_PARAMETERS_CONTAINER = "applyParametersContainer";
  @SerializedName(SERIALIZED_NAME_APPLY_PARAMETERS_CONTAINER)
  private ScenarioRunContainer applyParametersContainer;

  public static final String SERIALIZED_NAME_VALIDATE_DATA_CONTAINER = "validateDataContainer";
  @SerializedName(SERIALIZED_NAME_VALIDATE_DATA_CONTAINER)
  private ScenarioRunContainer validateDataContainer;

  public static final String SERIALIZED_NAME_SEND_DATA_WAREHOUSE_CONTAINER = "sendDataWarehouseContainer";
  @SerializedName(SERIALIZED_NAME_SEND_DATA_WAREHOUSE_CONTAINER)
  private ScenarioRunContainer sendDataWarehouseContainer;

  public static final String SERIALIZED_NAME_PRE_RUN_CONTAINER = "preRunContainer";
  @SerializedName(SERIALIZED_NAME_PRE_RUN_CONTAINER)
  private ScenarioRunContainer preRunContainer;

  public static final String SERIALIZED_NAME_RUN_CONTAINER = "runContainer";
  @SerializedName(SERIALIZED_NAME_RUN_CONTAINER)
  private ScenarioRunContainer runContainer;

  public static final String SERIALIZED_NAME_POST_RUN_CONTAINER = "postRunContainer";
  @SerializedName(SERIALIZED_NAME_POST_RUN_CONTAINER)
  private ScenarioRunContainer postRunContainer;


  public ScenarioRunStartContainers nodeLabel(String nodeLabel) {
    
    this.nodeLabel = nodeLabel;
    return this;
  }

   /**
   * the node label request
   * @return nodeLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the node label request")

  public String getNodeLabel() {
    return nodeLabel;
  }


  public void setNodeLabel(String nodeLabel) {
    this.nodeLabel = nodeLabel;
  }


   /**
   * the containers which fetch the Scenario Datasets
   * @return fetchDatasetContainers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the containers which fetch the Scenario Datasets")

  public List<ScenarioRunContainer> getFetchDatasetContainers() {
    return fetchDatasetContainers;
  }




  public ScenarioRunStartContainers fetchScenarioParametersContainer(ScenarioRunContainer fetchScenarioParametersContainer) {
    
    this.fetchScenarioParametersContainer = fetchScenarioParametersContainer;
    return this;
  }

   /**
   * Get fetchScenarioParametersContainer
   * @return fetchScenarioParametersContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getFetchScenarioParametersContainer() {
    return fetchScenarioParametersContainer;
  }


  public void setFetchScenarioParametersContainer(ScenarioRunContainer fetchScenarioParametersContainer) {
    this.fetchScenarioParametersContainer = fetchScenarioParametersContainer;
  }


  public ScenarioRunStartContainers applyParametersContainer(ScenarioRunContainer applyParametersContainer) {
    
    this.applyParametersContainer = applyParametersContainer;
    return this;
  }

   /**
   * Get applyParametersContainer
   * @return applyParametersContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getApplyParametersContainer() {
    return applyParametersContainer;
  }


  public void setApplyParametersContainer(ScenarioRunContainer applyParametersContainer) {
    this.applyParametersContainer = applyParametersContainer;
  }


  public ScenarioRunStartContainers validateDataContainer(ScenarioRunContainer validateDataContainer) {
    
    this.validateDataContainer = validateDataContainer;
    return this;
  }

   /**
   * Get validateDataContainer
   * @return validateDataContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getValidateDataContainer() {
    return validateDataContainer;
  }


  public void setValidateDataContainer(ScenarioRunContainer validateDataContainer) {
    this.validateDataContainer = validateDataContainer;
  }


  public ScenarioRunStartContainers sendDataWarehouseContainer(ScenarioRunContainer sendDataWarehouseContainer) {
    
    this.sendDataWarehouseContainer = sendDataWarehouseContainer;
    return this;
  }

   /**
   * Get sendDataWarehouseContainer
   * @return sendDataWarehouseContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getSendDataWarehouseContainer() {
    return sendDataWarehouseContainer;
  }


  public void setSendDataWarehouseContainer(ScenarioRunContainer sendDataWarehouseContainer) {
    this.sendDataWarehouseContainer = sendDataWarehouseContainer;
  }


  public ScenarioRunStartContainers preRunContainer(ScenarioRunContainer preRunContainer) {
    
    this.preRunContainer = preRunContainer;
    return this;
  }

   /**
   * Get preRunContainer
   * @return preRunContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getPreRunContainer() {
    return preRunContainer;
  }


  public void setPreRunContainer(ScenarioRunContainer preRunContainer) {
    this.preRunContainer = preRunContainer;
  }


  public ScenarioRunStartContainers runContainer(ScenarioRunContainer runContainer) {
    
    this.runContainer = runContainer;
    return this;
  }

   /**
   * Get runContainer
   * @return runContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getRunContainer() {
    return runContainer;
  }


  public void setRunContainer(ScenarioRunContainer runContainer) {
    this.runContainer = runContainer;
  }


  public ScenarioRunStartContainers postRunContainer(ScenarioRunContainer postRunContainer) {
    
    this.postRunContainer = postRunContainer;
    return this;
  }

   /**
   * Get postRunContainer
   * @return postRunContainer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScenarioRunContainer getPostRunContainer() {
    return postRunContainer;
  }


  public void setPostRunContainer(ScenarioRunContainer postRunContainer) {
    this.postRunContainer = postRunContainer;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScenarioRunStartContainers scenarioRunStartContainers = (ScenarioRunStartContainers) o;
    return Objects.equals(this.nodeLabel, scenarioRunStartContainers.nodeLabel) &&
        Objects.equals(this.fetchDatasetContainers, scenarioRunStartContainers.fetchDatasetContainers) &&
        Objects.equals(this.fetchScenarioParametersContainer, scenarioRunStartContainers.fetchScenarioParametersContainer) &&
        Objects.equals(this.applyParametersContainer, scenarioRunStartContainers.applyParametersContainer) &&
        Objects.equals(this.validateDataContainer, scenarioRunStartContainers.validateDataContainer) &&
        Objects.equals(this.sendDataWarehouseContainer, scenarioRunStartContainers.sendDataWarehouseContainer) &&
        Objects.equals(this.preRunContainer, scenarioRunStartContainers.preRunContainer) &&
        Objects.equals(this.runContainer, scenarioRunStartContainers.runContainer) &&
        Objects.equals(this.postRunContainer, scenarioRunStartContainers.postRunContainer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeLabel, fetchDatasetContainers, fetchScenarioParametersContainer, applyParametersContainer, validateDataContainer, sendDataWarehouseContainer, preRunContainer, runContainer, postRunContainer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScenarioRunStartContainers {\n");
    sb.append("    nodeLabel: ").append(toIndentedString(nodeLabel)).append("\n");
    sb.append("    fetchDatasetContainers: ").append(toIndentedString(fetchDatasetContainers)).append("\n");
    sb.append("    fetchScenarioParametersContainer: ").append(toIndentedString(fetchScenarioParametersContainer)).append("\n");
    sb.append("    applyParametersContainer: ").append(toIndentedString(applyParametersContainer)).append("\n");
    sb.append("    validateDataContainer: ").append(toIndentedString(validateDataContainer)).append("\n");
    sb.append("    sendDataWarehouseContainer: ").append(toIndentedString(sendDataWarehouseContainer)).append("\n");
    sb.append("    preRunContainer: ").append(toIndentedString(preRunContainer)).append("\n");
    sb.append("    runContainer: ").append(toIndentedString(runContainer)).append("\n");
    sb.append("    postRunContainer: ").append(toIndentedString(postRunContainer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

