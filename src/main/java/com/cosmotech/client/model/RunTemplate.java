/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.cosmotech.client.model.RunTemplateParameterGroup;
import com.cosmotech.client.model.RunTemplateResourceStorage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * a Solution Run Template
 */
@ApiModel(description = "a Solution Run Template")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-04-19T18:57:39.320413+02:00[Europe/Paris]")
public class RunTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_STANDARD_SIMULATOR = "isStandardSimulator";
  @SerializedName(SERIALIZED_NAME_IS_STANDARD_SIMULATOR)
  private Boolean isStandardSimulator;

  public static final String SERIALIZED_NAME_SIMULATION = "simulation";
  @SerializedName(SERIALIZED_NAME_SIMULATION)
  private String simulation;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_COMPUTE_SIZE = "computeSize";
  @SerializedName(SERIALIZED_NAME_COMPUTE_SIZE)
  private String computeSize;

  public static final String SERIALIZED_NAME_PARAMETERS_HANDLER_RESOURCE = "parametersHandlerResource";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_HANDLER_RESOURCE)
  private RunTemplateResourceStorage parametersHandlerResource;

  public static final String SERIALIZED_NAME_DATASET_VALIDATOR_RESOURCE = "datasetValidatorResource";
  @SerializedName(SERIALIZED_NAME_DATASET_VALIDATOR_RESOURCE)
  private RunTemplateResourceStorage datasetValidatorResource;

  public static final String SERIALIZED_NAME_CUSTOM_SIMULATOR_RESOURCE = "customSimulatorResource";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SIMULATOR_RESOURCE)
  private RunTemplateResourceStorage customSimulatorResource;

  public static final String SERIALIZED_NAME_DATASET_SCHEMA_RESOURCE = "datasetSchemaResource";
  @SerializedName(SERIALIZED_NAME_DATASET_SCHEMA_RESOURCE)
  private RunTemplateResourceStorage datasetSchemaResource;

  public static final String SERIALIZED_NAME_PARAMETER_GROUPS = "parameterGroups";
  @SerializedName(SERIALIZED_NAME_PARAMETER_GROUPS)
  private List<RunTemplateParameterGroup> parameterGroups = null;


  public RunTemplate id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * the Solution Run Template id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "the Solution Run Template id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RunTemplate name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * the Run Template name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "the Run Template name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RunTemplate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * the Run Template description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the Run Template description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * whether or not the Run Template use the main standard Simulator directly. False if there is a Custom Simulator set
   * @return isStandardSimulator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether or not the Run Template use the main standard Simulator directly. False if there is a Custom Simulator set")

  public Boolean getIsStandardSimulator() {
    return isStandardSimulator;
  }




  public RunTemplate simulation(String simulation) {
    
    this.simulation = simulation;
    return this;
  }

   /**
   * the simulation name. This information is send to the Simulator
   * @return simulation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the simulation name. This information is send to the Simulator")

  public String getSimulation() {
    return simulation;
  }


  public void setSimulation(String simulation) {
    this.simulation = simulation;
  }


  public RunTemplate tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public RunTemplate addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * the list of Run Template tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the list of Run Template tags")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public RunTemplate computeSize(String computeSize) {
    
    this.computeSize = computeSize;
    return this;
  }

   /**
   * the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic
   * @return computeSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic")

  public String getComputeSize() {
    return computeSize;
  }


  public void setComputeSize(String computeSize) {
    this.computeSize = computeSize;
  }


  public RunTemplate parametersHandlerResource(RunTemplateResourceStorage parametersHandlerResource) {
    
    this.parametersHandlerResource = parametersHandlerResource;
    return this;
  }

   /**
   * Get parametersHandlerResource
   * @return parametersHandlerResource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RunTemplateResourceStorage getParametersHandlerResource() {
    return parametersHandlerResource;
  }


  public void setParametersHandlerResource(RunTemplateResourceStorage parametersHandlerResource) {
    this.parametersHandlerResource = parametersHandlerResource;
  }


  public RunTemplate datasetValidatorResource(RunTemplateResourceStorage datasetValidatorResource) {
    
    this.datasetValidatorResource = datasetValidatorResource;
    return this;
  }

   /**
   * Get datasetValidatorResource
   * @return datasetValidatorResource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RunTemplateResourceStorage getDatasetValidatorResource() {
    return datasetValidatorResource;
  }


  public void setDatasetValidatorResource(RunTemplateResourceStorage datasetValidatorResource) {
    this.datasetValidatorResource = datasetValidatorResource;
  }


  public RunTemplate customSimulatorResource(RunTemplateResourceStorage customSimulatorResource) {
    
    this.customSimulatorResource = customSimulatorResource;
    return this;
  }

   /**
   * Get customSimulatorResource
   * @return customSimulatorResource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RunTemplateResourceStorage getCustomSimulatorResource() {
    return customSimulatorResource;
  }


  public void setCustomSimulatorResource(RunTemplateResourceStorage customSimulatorResource) {
    this.customSimulatorResource = customSimulatorResource;
  }


  public RunTemplate datasetSchemaResource(RunTemplateResourceStorage datasetSchemaResource) {
    
    this.datasetSchemaResource = datasetSchemaResource;
    return this;
  }

   /**
   * Get datasetSchemaResource
   * @return datasetSchemaResource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RunTemplateResourceStorage getDatasetSchemaResource() {
    return datasetSchemaResource;
  }


  public void setDatasetSchemaResource(RunTemplateResourceStorage datasetSchemaResource) {
    this.datasetSchemaResource = datasetSchemaResource;
  }


  public RunTemplate parameterGroups(List<RunTemplateParameterGroup> parameterGroups) {
    
    this.parameterGroups = parameterGroups;
    return this;
  }

  public RunTemplate addParameterGroupsItem(RunTemplateParameterGroup parameterGroupsItem) {
    if (this.parameterGroups == null) {
      this.parameterGroups = new ArrayList<RunTemplateParameterGroup>();
    }
    this.parameterGroups.add(parameterGroupsItem);
    return this;
  }

   /**
   * the list of parameters groups for the Run Template
   * @return parameterGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the list of parameters groups for the Run Template")

  public List<RunTemplateParameterGroup> getParameterGroups() {
    return parameterGroups;
  }


  public void setParameterGroups(List<RunTemplateParameterGroup> parameterGroups) {
    this.parameterGroups = parameterGroups;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunTemplate runTemplate = (RunTemplate) o;
    return Objects.equals(this.id, runTemplate.id) &&
        Objects.equals(this.name, runTemplate.name) &&
        Objects.equals(this.description, runTemplate.description) &&
        Objects.equals(this.isStandardSimulator, runTemplate.isStandardSimulator) &&
        Objects.equals(this.simulation, runTemplate.simulation) &&
        Objects.equals(this.tags, runTemplate.tags) &&
        Objects.equals(this.computeSize, runTemplate.computeSize) &&
        Objects.equals(this.parametersHandlerResource, runTemplate.parametersHandlerResource) &&
        Objects.equals(this.datasetValidatorResource, runTemplate.datasetValidatorResource) &&
        Objects.equals(this.customSimulatorResource, runTemplate.customSimulatorResource) &&
        Objects.equals(this.datasetSchemaResource, runTemplate.datasetSchemaResource) &&
        Objects.equals(this.parameterGroups, runTemplate.parameterGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, isStandardSimulator, simulation, tags, computeSize, parametersHandlerResource, datasetValidatorResource, customSimulatorResource, datasetSchemaResource, parameterGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isStandardSimulator: ").append(toIndentedString(isStandardSimulator)).append("\n");
    sb.append("    simulation: ").append(toIndentedString(simulation)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    computeSize: ").append(toIndentedString(computeSize)).append("\n");
    sb.append("    parametersHandlerResource: ").append(toIndentedString(parametersHandlerResource)).append("\n");
    sb.append("    datasetValidatorResource: ").append(toIndentedString(datasetValidatorResource)).append("\n");
    sb.append("    customSimulatorResource: ").append(toIndentedString(customSimulatorResource)).append("\n");
    sb.append("    datasetSchemaResource: ").append(toIndentedString(datasetSchemaResource)).append("\n");
    sb.append("    parameterGroups: ").append(toIndentedString(parameterGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

