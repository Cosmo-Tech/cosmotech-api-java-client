/*
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.2.2-SNAPSHOT
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.model;

import java.util.Objects;
import com.cosmotech.client.model.DeleteHistoricalData;
import com.cosmotech.client.model.RunTemplateOrchestrator;
import com.cosmotech.client.model.RunTemplateResourceSizing;
import com.cosmotech.client.model.RunTemplateStepSource;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cosmotech.client.JSON;

/**
 * a Solution Run Template
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-31T13:55:35.129487759Z[Etc/UTC]")
public class RunTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CSM_SIMULATION = "csmSimulation";
  @SerializedName(SERIALIZED_NAME_CSM_SIMULATION)
  private String csmSimulation;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public static final String SERIALIZED_NAME_COMPUTE_SIZE = "computeSize";
  @SerializedName(SERIALIZED_NAME_COMPUTE_SIZE)
  private String computeSize;

  public static final String SERIALIZED_NAME_RUN_SIZING = "runSizing";
  @SerializedName(SERIALIZED_NAME_RUN_SIZING)
  private RunTemplateResourceSizing runSizing;

  public static final String SERIALIZED_NAME_NO_DATA_INGESTION_STATE = "noDataIngestionState";
  @SerializedName(SERIALIZED_NAME_NO_DATA_INGESTION_STATE)
  private Boolean noDataIngestionState;

  public static final String SERIALIZED_NAME_FETCH_DATASETS = "fetchDatasets";
  @SerializedName(SERIALIZED_NAME_FETCH_DATASETS)
  private Boolean fetchDatasets;

  public static final String SERIALIZED_NAME_SCENARIO_DATA_DOWNLOAD_TRANSFORM = "scenarioDataDownloadTransform";
  @SerializedName(SERIALIZED_NAME_SCENARIO_DATA_DOWNLOAD_TRANSFORM)
  private Boolean scenarioDataDownloadTransform;

  public static final String SERIALIZED_NAME_FETCH_SCENARIO_PARAMETERS = "fetchScenarioParameters";
  @SerializedName(SERIALIZED_NAME_FETCH_SCENARIO_PARAMETERS)
  private Boolean fetchScenarioParameters;

  public static final String SERIALIZED_NAME_APPLY_PARAMETERS = "applyParameters";
  @SerializedName(SERIALIZED_NAME_APPLY_PARAMETERS)
  private Boolean applyParameters;

  public static final String SERIALIZED_NAME_VALIDATE_DATA = "validateData";
  @SerializedName(SERIALIZED_NAME_VALIDATE_DATA)
  private Boolean validateData;

  public static final String SERIALIZED_NAME_SEND_DATASETS_TO_DATA_WAREHOUSE = "sendDatasetsToDataWarehouse";
  @SerializedName(SERIALIZED_NAME_SEND_DATASETS_TO_DATA_WAREHOUSE)
  private Boolean sendDatasetsToDataWarehouse;

  public static final String SERIALIZED_NAME_SEND_INPUT_PARAMETERS_TO_DATA_WAREHOUSE = "sendInputParametersToDataWarehouse";
  @SerializedName(SERIALIZED_NAME_SEND_INPUT_PARAMETERS_TO_DATA_WAREHOUSE)
  private Boolean sendInputParametersToDataWarehouse;

  public static final String SERIALIZED_NAME_PRE_RUN = "preRun";
  @SerializedName(SERIALIZED_NAME_PRE_RUN)
  private Boolean preRun;

  public static final String SERIALIZED_NAME_RUN = "run";
  @SerializedName(SERIALIZED_NAME_RUN)
  private Boolean run;

  public static final String SERIALIZED_NAME_POST_RUN = "postRun";
  @SerializedName(SERIALIZED_NAME_POST_RUN)
  private Boolean postRun;

  public static final String SERIALIZED_NAME_PARAMETERS_JSON = "parametersJson";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_JSON)
  private Boolean parametersJson;

  public static final String SERIALIZED_NAME_PARAMETERS_HANDLER_SOURCE = "parametersHandlerSource";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_HANDLER_SOURCE)
  private RunTemplateStepSource parametersHandlerSource;

  public static final String SERIALIZED_NAME_DATASET_VALIDATOR_SOURCE = "datasetValidatorSource";
  @SerializedName(SERIALIZED_NAME_DATASET_VALIDATOR_SOURCE)
  private RunTemplateStepSource datasetValidatorSource;

  public static final String SERIALIZED_NAME_PRE_RUN_SOURCE = "preRunSource";
  @SerializedName(SERIALIZED_NAME_PRE_RUN_SOURCE)
  private RunTemplateStepSource preRunSource;

  public static final String SERIALIZED_NAME_RUN_SOURCE = "runSource";
  @SerializedName(SERIALIZED_NAME_RUN_SOURCE)
  private RunTemplateStepSource runSource;

  public static final String SERIALIZED_NAME_POST_RUN_SOURCE = "postRunSource";
  @SerializedName(SERIALIZED_NAME_POST_RUN_SOURCE)
  private RunTemplateStepSource postRunSource;

  public static final String SERIALIZED_NAME_SCENARIODATA_TRANSFORM_SOURCE = "scenariodataTransformSource";
  @SerializedName(SERIALIZED_NAME_SCENARIODATA_TRANSFORM_SOURCE)
  private RunTemplateStepSource scenariodataTransformSource;

  public static final String SERIALIZED_NAME_PARAMETER_GROUPS = "parameterGroups";
  @SerializedName(SERIALIZED_NAME_PARAMETER_GROUPS)
  private List<String> parameterGroups;

  public static final String SERIALIZED_NAME_STACK_STEPS = "stackSteps";
  @SerializedName(SERIALIZED_NAME_STACK_STEPS)
  private Boolean stackSteps;

  public static final String SERIALIZED_NAME_GIT_REPOSITORY_URL = "gitRepositoryUrl";
  @SerializedName(SERIALIZED_NAME_GIT_REPOSITORY_URL)
  private String gitRepositoryUrl;

  public static final String SERIALIZED_NAME_GIT_BRANCH_NAME = "gitBranchName";
  @SerializedName(SERIALIZED_NAME_GIT_BRANCH_NAME)
  private String gitBranchName;

  public static final String SERIALIZED_NAME_RUN_TEMPLATE_SOURCE_DIR = "runTemplateSourceDir";
  @SerializedName(SERIALIZED_NAME_RUN_TEMPLATE_SOURCE_DIR)
  private String runTemplateSourceDir;

  public static final String SERIALIZED_NAME_ORCHESTRATOR_TYPE = "orchestratorType";
  @SerializedName(SERIALIZED_NAME_ORCHESTRATOR_TYPE)
  private RunTemplateOrchestrator orchestratorType;

  public static final String SERIALIZED_NAME_EXECUTION_TIMEOUT = "executionTimeout";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIMEOUT)
  private Integer executionTimeout;

  public static final String SERIALIZED_NAME_DELETE_HISTORICAL_DATA = "deleteHistoricalData";
  @SerializedName(SERIALIZED_NAME_DELETE_HISTORICAL_DATA)
  private DeleteHistoricalData deleteHistoricalData;

  public RunTemplate() {
  }

  public RunTemplate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * the Solution Run Template id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Deprecated
  public RunTemplate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the Run Template name
   * @return name
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  @Deprecated
  public void setName(String name) {
    this.name = name;
  }


  public RunTemplate labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public RunTemplate putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * a translated label with key as ISO 639-1 code
   * @return labels
  **/
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public RunTemplate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * the Run Template description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RunTemplate csmSimulation(String csmSimulation) {
    this.csmSimulation = csmSimulation;
    return this;
  }

   /**
   * the Cosmo Tech simulation name. This information is send to the Engine. Mandatory information if no Engine is defined
   * @return csmSimulation
  **/
  @javax.annotation.Nullable
  public String getCsmSimulation() {
    return csmSimulation;
  }

  public void setCsmSimulation(String csmSimulation) {
    this.csmSimulation = csmSimulation;
  }


  public RunTemplate tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public RunTemplate addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * the list of Run Template tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public RunTemplate computeSize(String computeSize) {
    this.computeSize = computeSize;
    return this;
  }

   /**
   * the compute size needed for this Run Template. Standard sizes are basic and highcpu. Default is basic
   * @return computeSize
  **/
  @javax.annotation.Nullable
  public String getComputeSize() {
    return computeSize;
  }

  public void setComputeSize(String computeSize) {
    this.computeSize = computeSize;
  }


  public RunTemplate runSizing(RunTemplateResourceSizing runSizing) {
    this.runSizing = runSizing;
    return this;
  }

   /**
   * Get runSizing
   * @return runSizing
  **/
  @javax.annotation.Nullable
  public RunTemplateResourceSizing getRunSizing() {
    return runSizing;
  }

  public void setRunSizing(RunTemplateResourceSizing runSizing) {
    this.runSizing = runSizing;
  }


  public RunTemplate noDataIngestionState(Boolean noDataIngestionState) {
    this.noDataIngestionState = noDataIngestionState;
    return this;
  }

   /**
   * set to true if the run template does not want to check data ingestion state (no probes or not control plane)
   * @return noDataIngestionState
  **/
  @javax.annotation.Nullable
  public Boolean getNoDataIngestionState() {
    return noDataIngestionState;
  }

  public void setNoDataIngestionState(Boolean noDataIngestionState) {
    this.noDataIngestionState = noDataIngestionState;
  }


  public RunTemplate fetchDatasets(Boolean fetchDatasets) {
    this.fetchDatasets = fetchDatasets;
    return this;
  }

   /**
   * whether or not the fetch dataset step is done
   * @return fetchDatasets
  **/
  @javax.annotation.Nullable
  public Boolean getFetchDatasets() {
    return fetchDatasets;
  }

  public void setFetchDatasets(Boolean fetchDatasets) {
    this.fetchDatasets = fetchDatasets;
  }


  public RunTemplate scenarioDataDownloadTransform(Boolean scenarioDataDownloadTransform) {
    this.scenarioDataDownloadTransform = scenarioDataDownloadTransform;
    return this;
  }

   /**
   * whether or not the scenario data download transform step step is done
   * @return scenarioDataDownloadTransform
  **/
  @javax.annotation.Nullable
  public Boolean getScenarioDataDownloadTransform() {
    return scenarioDataDownloadTransform;
  }

  public void setScenarioDataDownloadTransform(Boolean scenarioDataDownloadTransform) {
    this.scenarioDataDownloadTransform = scenarioDataDownloadTransform;
  }


  public RunTemplate fetchScenarioParameters(Boolean fetchScenarioParameters) {
    this.fetchScenarioParameters = fetchScenarioParameters;
    return this;
  }

   /**
   * whether or not the fetch parameters step is done
   * @return fetchScenarioParameters
  **/
  @javax.annotation.Nullable
  public Boolean getFetchScenarioParameters() {
    return fetchScenarioParameters;
  }

  public void setFetchScenarioParameters(Boolean fetchScenarioParameters) {
    this.fetchScenarioParameters = fetchScenarioParameters;
  }


  public RunTemplate applyParameters(Boolean applyParameters) {
    this.applyParameters = applyParameters;
    return this;
  }

   /**
   * whether or not the apply parameter step is done
   * @return applyParameters
  **/
  @javax.annotation.Nullable
  public Boolean getApplyParameters() {
    return applyParameters;
  }

  public void setApplyParameters(Boolean applyParameters) {
    this.applyParameters = applyParameters;
  }


  public RunTemplate validateData(Boolean validateData) {
    this.validateData = validateData;
    return this;
  }

   /**
   * whether or not the validate step is done
   * @return validateData
  **/
  @javax.annotation.Nullable
  public Boolean getValidateData() {
    return validateData;
  }

  public void setValidateData(Boolean validateData) {
    this.validateData = validateData;
  }


  public RunTemplate sendDatasetsToDataWarehouse(Boolean sendDatasetsToDataWarehouse) {
    this.sendDatasetsToDataWarehouse = sendDatasetsToDataWarehouse;
    return this;
  }

   /**
   * whether or not the Datasets values are send to the DataWarehouse prior to Simulation Run. If not set follow the Workspace setting
   * @return sendDatasetsToDataWarehouse
  **/
  @javax.annotation.Nullable
  public Boolean getSendDatasetsToDataWarehouse() {
    return sendDatasetsToDataWarehouse;
  }

  public void setSendDatasetsToDataWarehouse(Boolean sendDatasetsToDataWarehouse) {
    this.sendDatasetsToDataWarehouse = sendDatasetsToDataWarehouse;
  }


  public RunTemplate sendInputParametersToDataWarehouse(Boolean sendInputParametersToDataWarehouse) {
    this.sendInputParametersToDataWarehouse = sendInputParametersToDataWarehouse;
    return this;
  }

   /**
   * whether or not the input parameters values are send to the DataWarehouse prior to Simulation Run. If not set follow the Workspace setting
   * @return sendInputParametersToDataWarehouse
  **/
  @javax.annotation.Nullable
  public Boolean getSendInputParametersToDataWarehouse() {
    return sendInputParametersToDataWarehouse;
  }

  public void setSendInputParametersToDataWarehouse(Boolean sendInputParametersToDataWarehouse) {
    this.sendInputParametersToDataWarehouse = sendInputParametersToDataWarehouse;
  }


  public RunTemplate preRun(Boolean preRun) {
    this.preRun = preRun;
    return this;
  }

   /**
   * whether or not the pre-run step is done
   * @return preRun
  **/
  @javax.annotation.Nullable
  public Boolean getPreRun() {
    return preRun;
  }

  public void setPreRun(Boolean preRun) {
    this.preRun = preRun;
  }


  public RunTemplate run(Boolean run) {
    this.run = run;
    return this;
  }

   /**
   * whether or not the run step is done
   * @return run
  **/
  @javax.annotation.Nullable
  public Boolean getRun() {
    return run;
  }

  public void setRun(Boolean run) {
    this.run = run;
  }


  public RunTemplate postRun(Boolean postRun) {
    this.postRun = postRun;
    return this;
  }

   /**
   * whether or not the post-run step is done
   * @return postRun
  **/
  @javax.annotation.Nullable
  public Boolean getPostRun() {
    return postRun;
  }

  public void setPostRun(Boolean postRun) {
    this.postRun = postRun;
  }


  public RunTemplate parametersJson(Boolean parametersJson) {
    this.parametersJson = parametersJson;
    return this;
  }

   /**
   * whether or not to store the scenario parameters in json instead of csv
   * @return parametersJson
  **/
  @javax.annotation.Nullable
  public Boolean getParametersJson() {
    return parametersJson;
  }

  public void setParametersJson(Boolean parametersJson) {
    this.parametersJson = parametersJson;
  }


  public RunTemplate parametersHandlerSource(RunTemplateStepSource parametersHandlerSource) {
    this.parametersHandlerSource = parametersHandlerSource;
    return this;
  }

   /**
   * Get parametersHandlerSource
   * @return parametersHandlerSource
  **/
  @javax.annotation.Nullable
  public RunTemplateStepSource getParametersHandlerSource() {
    return parametersHandlerSource;
  }

  public void setParametersHandlerSource(RunTemplateStepSource parametersHandlerSource) {
    this.parametersHandlerSource = parametersHandlerSource;
  }


  public RunTemplate datasetValidatorSource(RunTemplateStepSource datasetValidatorSource) {
    this.datasetValidatorSource = datasetValidatorSource;
    return this;
  }

   /**
   * Get datasetValidatorSource
   * @return datasetValidatorSource
  **/
  @javax.annotation.Nullable
  public RunTemplateStepSource getDatasetValidatorSource() {
    return datasetValidatorSource;
  }

  public void setDatasetValidatorSource(RunTemplateStepSource datasetValidatorSource) {
    this.datasetValidatorSource = datasetValidatorSource;
  }


  public RunTemplate preRunSource(RunTemplateStepSource preRunSource) {
    this.preRunSource = preRunSource;
    return this;
  }

   /**
   * Get preRunSource
   * @return preRunSource
  **/
  @javax.annotation.Nullable
  public RunTemplateStepSource getPreRunSource() {
    return preRunSource;
  }

  public void setPreRunSource(RunTemplateStepSource preRunSource) {
    this.preRunSource = preRunSource;
  }


  public RunTemplate runSource(RunTemplateStepSource runSource) {
    this.runSource = runSource;
    return this;
  }

   /**
   * Get runSource
   * @return runSource
  **/
  @javax.annotation.Nullable
  public RunTemplateStepSource getRunSource() {
    return runSource;
  }

  public void setRunSource(RunTemplateStepSource runSource) {
    this.runSource = runSource;
  }


  public RunTemplate postRunSource(RunTemplateStepSource postRunSource) {
    this.postRunSource = postRunSource;
    return this;
  }

   /**
   * Get postRunSource
   * @return postRunSource
  **/
  @javax.annotation.Nullable
  public RunTemplateStepSource getPostRunSource() {
    return postRunSource;
  }

  public void setPostRunSource(RunTemplateStepSource postRunSource) {
    this.postRunSource = postRunSource;
  }


  public RunTemplate scenariodataTransformSource(RunTemplateStepSource scenariodataTransformSource) {
    this.scenariodataTransformSource = scenariodataTransformSource;
    return this;
  }

   /**
   * Get scenariodataTransformSource
   * @return scenariodataTransformSource
  **/
  @javax.annotation.Nullable
  public RunTemplateStepSource getScenariodataTransformSource() {
    return scenariodataTransformSource;
  }

  public void setScenariodataTransformSource(RunTemplateStepSource scenariodataTransformSource) {
    this.scenariodataTransformSource = scenariodataTransformSource;
  }


  public RunTemplate parameterGroups(List<String> parameterGroups) {
    this.parameterGroups = parameterGroups;
    return this;
  }

  public RunTemplate addParameterGroupsItem(String parameterGroupsItem) {
    if (this.parameterGroups == null) {
      this.parameterGroups = new ArrayList<>();
    }
    this.parameterGroups.add(parameterGroupsItem);
    return this;
  }

   /**
   * the ordered list of parameters groups for the Run Template
   * @return parameterGroups
  **/
  @javax.annotation.Nullable
  public List<String> getParameterGroups() {
    return parameterGroups;
  }

  public void setParameterGroups(List<String> parameterGroups) {
    this.parameterGroups = parameterGroups;
  }


  public RunTemplate stackSteps(Boolean stackSteps) {
    this.stackSteps = stackSteps;
    return this;
  }

   /**
   * whether or not to stack adjacent scenario run steps in one container run which will chain steps
   * @return stackSteps
  **/
  @javax.annotation.Nullable
  public Boolean getStackSteps() {
    return stackSteps;
  }

  public void setStackSteps(Boolean stackSteps) {
    this.stackSteps = stackSteps;
  }


  public RunTemplate gitRepositoryUrl(String gitRepositoryUrl) {
    this.gitRepositoryUrl = gitRepositoryUrl;
    return this;
  }

   /**
   * an optional URL to the git repository
   * @return gitRepositoryUrl
  **/
  @javax.annotation.Nullable
  public String getGitRepositoryUrl() {
    return gitRepositoryUrl;
  }

  public void setGitRepositoryUrl(String gitRepositoryUrl) {
    this.gitRepositoryUrl = gitRepositoryUrl;
  }


  public RunTemplate gitBranchName(String gitBranchName) {
    this.gitBranchName = gitBranchName;
    return this;
  }

   /**
   * an optional git branch name
   * @return gitBranchName
  **/
  @javax.annotation.Nullable
  public String getGitBranchName() {
    return gitBranchName;
  }

  public void setGitBranchName(String gitBranchName) {
    this.gitBranchName = gitBranchName;
  }


  public RunTemplate runTemplateSourceDir(String runTemplateSourceDir) {
    this.runTemplateSourceDir = runTemplateSourceDir;
    return this;
  }

   /**
   * an optional directory where to find the run template source
   * @return runTemplateSourceDir
  **/
  @javax.annotation.Nullable
  public String getRunTemplateSourceDir() {
    return runTemplateSourceDir;
  }

  public void setRunTemplateSourceDir(String runTemplateSourceDir) {
    this.runTemplateSourceDir = runTemplateSourceDir;
  }


  public RunTemplate orchestratorType(RunTemplateOrchestrator orchestratorType) {
    this.orchestratorType = orchestratorType;
    return this;
  }

   /**
   * Get orchestratorType
   * @return orchestratorType
  **/
  @javax.annotation.Nullable
  public RunTemplateOrchestrator getOrchestratorType() {
    return orchestratorType;
  }

  public void setOrchestratorType(RunTemplateOrchestrator orchestratorType) {
    this.orchestratorType = orchestratorType;
  }


  public RunTemplate executionTimeout(Integer executionTimeout) {
    this.executionTimeout = executionTimeout;
    return this;
  }

   /**
   * an optional duration in seconds in which a workflow is allowed to run
   * @return executionTimeout
  **/
  @javax.annotation.Nullable
  public Integer getExecutionTimeout() {
    return executionTimeout;
  }

  public void setExecutionTimeout(Integer executionTimeout) {
    this.executionTimeout = executionTimeout;
  }


  public RunTemplate deleteHistoricalData(DeleteHistoricalData deleteHistoricalData) {
    this.deleteHistoricalData = deleteHistoricalData;
    return this;
  }

   /**
   * Get deleteHistoricalData
   * @return deleteHistoricalData
  **/
  @javax.annotation.Nullable
  public DeleteHistoricalData getDeleteHistoricalData() {
    return deleteHistoricalData;
  }

  public void setDeleteHistoricalData(DeleteHistoricalData deleteHistoricalData) {
    this.deleteHistoricalData = deleteHistoricalData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunTemplate runTemplate = (RunTemplate) o;
    return Objects.equals(this.id, runTemplate.id) &&
        Objects.equals(this.name, runTemplate.name) &&
        Objects.equals(this.labels, runTemplate.labels) &&
        Objects.equals(this.description, runTemplate.description) &&
        Objects.equals(this.csmSimulation, runTemplate.csmSimulation) &&
        Objects.equals(this.tags, runTemplate.tags) &&
        Objects.equals(this.computeSize, runTemplate.computeSize) &&
        Objects.equals(this.runSizing, runTemplate.runSizing) &&
        Objects.equals(this.noDataIngestionState, runTemplate.noDataIngestionState) &&
        Objects.equals(this.fetchDatasets, runTemplate.fetchDatasets) &&
        Objects.equals(this.scenarioDataDownloadTransform, runTemplate.scenarioDataDownloadTransform) &&
        Objects.equals(this.fetchScenarioParameters, runTemplate.fetchScenarioParameters) &&
        Objects.equals(this.applyParameters, runTemplate.applyParameters) &&
        Objects.equals(this.validateData, runTemplate.validateData) &&
        Objects.equals(this.sendDatasetsToDataWarehouse, runTemplate.sendDatasetsToDataWarehouse) &&
        Objects.equals(this.sendInputParametersToDataWarehouse, runTemplate.sendInputParametersToDataWarehouse) &&
        Objects.equals(this.preRun, runTemplate.preRun) &&
        Objects.equals(this.run, runTemplate.run) &&
        Objects.equals(this.postRun, runTemplate.postRun) &&
        Objects.equals(this.parametersJson, runTemplate.parametersJson) &&
        Objects.equals(this.parametersHandlerSource, runTemplate.parametersHandlerSource) &&
        Objects.equals(this.datasetValidatorSource, runTemplate.datasetValidatorSource) &&
        Objects.equals(this.preRunSource, runTemplate.preRunSource) &&
        Objects.equals(this.runSource, runTemplate.runSource) &&
        Objects.equals(this.postRunSource, runTemplate.postRunSource) &&
        Objects.equals(this.scenariodataTransformSource, runTemplate.scenariodataTransformSource) &&
        Objects.equals(this.parameterGroups, runTemplate.parameterGroups) &&
        Objects.equals(this.stackSteps, runTemplate.stackSteps) &&
        Objects.equals(this.gitRepositoryUrl, runTemplate.gitRepositoryUrl) &&
        Objects.equals(this.gitBranchName, runTemplate.gitBranchName) &&
        Objects.equals(this.runTemplateSourceDir, runTemplate.runTemplateSourceDir) &&
        Objects.equals(this.orchestratorType, runTemplate.orchestratorType) &&
        Objects.equals(this.executionTimeout, runTemplate.executionTimeout) &&
        Objects.equals(this.deleteHistoricalData, runTemplate.deleteHistoricalData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, labels, description, csmSimulation, tags, computeSize, runSizing, noDataIngestionState, fetchDatasets, scenarioDataDownloadTransform, fetchScenarioParameters, applyParameters, validateData, sendDatasetsToDataWarehouse, sendInputParametersToDataWarehouse, preRun, run, postRun, parametersJson, parametersHandlerSource, datasetValidatorSource, preRunSource, runSource, postRunSource, scenariodataTransformSource, parameterGroups, stackSteps, gitRepositoryUrl, gitBranchName, runTemplateSourceDir, orchestratorType, executionTimeout, deleteHistoricalData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    csmSimulation: ").append(toIndentedString(csmSimulation)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    computeSize: ").append(toIndentedString(computeSize)).append("\n");
    sb.append("    runSizing: ").append(toIndentedString(runSizing)).append("\n");
    sb.append("    noDataIngestionState: ").append(toIndentedString(noDataIngestionState)).append("\n");
    sb.append("    fetchDatasets: ").append(toIndentedString(fetchDatasets)).append("\n");
    sb.append("    scenarioDataDownloadTransform: ").append(toIndentedString(scenarioDataDownloadTransform)).append("\n");
    sb.append("    fetchScenarioParameters: ").append(toIndentedString(fetchScenarioParameters)).append("\n");
    sb.append("    applyParameters: ").append(toIndentedString(applyParameters)).append("\n");
    sb.append("    validateData: ").append(toIndentedString(validateData)).append("\n");
    sb.append("    sendDatasetsToDataWarehouse: ").append(toIndentedString(sendDatasetsToDataWarehouse)).append("\n");
    sb.append("    sendInputParametersToDataWarehouse: ").append(toIndentedString(sendInputParametersToDataWarehouse)).append("\n");
    sb.append("    preRun: ").append(toIndentedString(preRun)).append("\n");
    sb.append("    run: ").append(toIndentedString(run)).append("\n");
    sb.append("    postRun: ").append(toIndentedString(postRun)).append("\n");
    sb.append("    parametersJson: ").append(toIndentedString(parametersJson)).append("\n");
    sb.append("    parametersHandlerSource: ").append(toIndentedString(parametersHandlerSource)).append("\n");
    sb.append("    datasetValidatorSource: ").append(toIndentedString(datasetValidatorSource)).append("\n");
    sb.append("    preRunSource: ").append(toIndentedString(preRunSource)).append("\n");
    sb.append("    runSource: ").append(toIndentedString(runSource)).append("\n");
    sb.append("    postRunSource: ").append(toIndentedString(postRunSource)).append("\n");
    sb.append("    scenariodataTransformSource: ").append(toIndentedString(scenariodataTransformSource)).append("\n");
    sb.append("    parameterGroups: ").append(toIndentedString(parameterGroups)).append("\n");
    sb.append("    stackSteps: ").append(toIndentedString(stackSteps)).append("\n");
    sb.append("    gitRepositoryUrl: ").append(toIndentedString(gitRepositoryUrl)).append("\n");
    sb.append("    gitBranchName: ").append(toIndentedString(gitBranchName)).append("\n");
    sb.append("    runTemplateSourceDir: ").append(toIndentedString(runTemplateSourceDir)).append("\n");
    sb.append("    orchestratorType: ").append(toIndentedString(orchestratorType)).append("\n");
    sb.append("    executionTimeout: ").append(toIndentedString(executionTimeout)).append("\n");
    sb.append("    deleteHistoricalData: ").append(toIndentedString(deleteHistoricalData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("labels");
    openapiFields.add("description");
    openapiFields.add("csmSimulation");
    openapiFields.add("tags");
    openapiFields.add("computeSize");
    openapiFields.add("runSizing");
    openapiFields.add("noDataIngestionState");
    openapiFields.add("fetchDatasets");
    openapiFields.add("scenarioDataDownloadTransform");
    openapiFields.add("fetchScenarioParameters");
    openapiFields.add("applyParameters");
    openapiFields.add("validateData");
    openapiFields.add("sendDatasetsToDataWarehouse");
    openapiFields.add("sendInputParametersToDataWarehouse");
    openapiFields.add("preRun");
    openapiFields.add("run");
    openapiFields.add("postRun");
    openapiFields.add("parametersJson");
    openapiFields.add("parametersHandlerSource");
    openapiFields.add("datasetValidatorSource");
    openapiFields.add("preRunSource");
    openapiFields.add("runSource");
    openapiFields.add("postRunSource");
    openapiFields.add("scenariodataTransformSource");
    openapiFields.add("parameterGroups");
    openapiFields.add("stackSteps");
    openapiFields.add("gitRepositoryUrl");
    openapiFields.add("gitBranchName");
    openapiFields.add("runTemplateSourceDir");
    openapiFields.add("orchestratorType");
    openapiFields.add("executionTimeout");
    openapiFields.add("deleteHistoricalData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RunTemplate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunTemplate is not found in the empty JSON string", RunTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RunTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("csmSimulation") != null && !jsonObj.get("csmSimulation").isJsonNull()) && !jsonObj.get("csmSimulation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csmSimulation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csmSimulation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("computeSize") != null && !jsonObj.get("computeSize").isJsonNull()) && !jsonObj.get("computeSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeSize").toString()));
      }
      // validate the optional field `runSizing`
      if (jsonObj.get("runSizing") != null && !jsonObj.get("runSizing").isJsonNull()) {
        RunTemplateResourceSizing.validateJsonElement(jsonObj.get("runSizing"));
      }
      // validate the optional field `parametersHandlerSource`
      if (jsonObj.get("parametersHandlerSource") != null && !jsonObj.get("parametersHandlerSource").isJsonNull()) {
        RunTemplateStepSource.validateJsonElement(jsonObj.get("parametersHandlerSource"));
      }
      // validate the optional field `datasetValidatorSource`
      if (jsonObj.get("datasetValidatorSource") != null && !jsonObj.get("datasetValidatorSource").isJsonNull()) {
        RunTemplateStepSource.validateJsonElement(jsonObj.get("datasetValidatorSource"));
      }
      // validate the optional field `preRunSource`
      if (jsonObj.get("preRunSource") != null && !jsonObj.get("preRunSource").isJsonNull()) {
        RunTemplateStepSource.validateJsonElement(jsonObj.get("preRunSource"));
      }
      // validate the optional field `runSource`
      if (jsonObj.get("runSource") != null && !jsonObj.get("runSource").isJsonNull()) {
        RunTemplateStepSource.validateJsonElement(jsonObj.get("runSource"));
      }
      // validate the optional field `postRunSource`
      if (jsonObj.get("postRunSource") != null && !jsonObj.get("postRunSource").isJsonNull()) {
        RunTemplateStepSource.validateJsonElement(jsonObj.get("postRunSource"));
      }
      // validate the optional field `scenariodataTransformSource`
      if (jsonObj.get("scenariodataTransformSource") != null && !jsonObj.get("scenariodataTransformSource").isJsonNull()) {
        RunTemplateStepSource.validateJsonElement(jsonObj.get("scenariodataTransformSource"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parameterGroups") != null && !jsonObj.get("parameterGroups").isJsonNull() && !jsonObj.get("parameterGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterGroups` to be an array in the JSON string but got `%s`", jsonObj.get("parameterGroups").toString()));
      }
      if ((jsonObj.get("gitRepositoryUrl") != null && !jsonObj.get("gitRepositoryUrl").isJsonNull()) && !jsonObj.get("gitRepositoryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitRepositoryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitRepositoryUrl").toString()));
      }
      if ((jsonObj.get("gitBranchName") != null && !jsonObj.get("gitBranchName").isJsonNull()) && !jsonObj.get("gitBranchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitBranchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitBranchName").toString()));
      }
      if ((jsonObj.get("runTemplateSourceDir") != null && !jsonObj.get("runTemplateSourceDir").isJsonNull()) && !jsonObj.get("runTemplateSourceDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runTemplateSourceDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runTemplateSourceDir").toString()));
      }
      // validate the optional field `orchestratorType`
      if (jsonObj.get("orchestratorType") != null && !jsonObj.get("orchestratorType").isJsonNull()) {
        RunTemplateOrchestrator.validateJsonElement(jsonObj.get("orchestratorType"));
      }
      // validate the optional field `deleteHistoricalData`
      if (jsonObj.get("deleteHistoricalData") != null && !jsonObj.get("deleteHistoricalData").isJsonNull()) {
        DeleteHistoricalData.validateJsonElement(jsonObj.get("deleteHistoricalData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<RunTemplate>() {
           @Override
           public void write(JsonWriter out, RunTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunTemplate
  * @throws IOException if the JSON string is invalid with respect to RunTemplate
  */
  public static RunTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunTemplate.class);
  }

 /**
  * Convert an instance of RunTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

