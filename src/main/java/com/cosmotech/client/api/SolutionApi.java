/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cosmotech.client.model.Solution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SolutionApi {
    private ApiClient localVarApiClient;

    public SolutionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SolutionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createSolution
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSolutionCall(String organizationId, Solution solution, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = solution;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSolutionValidateBeforeCall(String organizationId, Solution solution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createSolution(Async)");
        }
        
        // verify the required parameter 'solution' is set
        if (solution == null) {
            throw new ApiException("Missing the required parameter 'solution' when calling createSolution(Async)");
        }
        

        okhttp3.Call localVarCall = createSolutionCall(organizationId, solution, _callback);
        return localVarCall;

    }

    /**
     * Register a new solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Solution createSolution(String organizationId, Solution solution) throws ApiException {
        ApiResponse<Solution> localVarResp = createSolutionWithHttpInfo(organizationId, solution);
        return localVarResp.getData();
    }

    /**
     * Register a new solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> createSolutionWithHttpInfo(String organizationId, Solution solution) throws ApiException {
        okhttp3.Call localVarCall = createSolutionValidateBeforeCall(organizationId, solution, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSolutionAsync(String organizationId, Solution solution, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSolutionValidateBeforeCall(organizationId, solution, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSolution
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSolutionCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSolutionValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteSolution(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling deleteSolution(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSolutionCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Solution deleteSolution(String organizationId, String solutionId) throws ApiException {
        ApiResponse<Solution> localVarResp = deleteSolutionWithHttpInfo(organizationId, solutionId);
        return localVarResp.getData();
    }

    /**
     * Delete a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> deleteSolutionWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = deleteSolutionValidateBeforeCall(organizationId, solutionId, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSolutionAsync(String organizationId, String solutionId, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSolutionValidateBeforeCall(organizationId, solutionId, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllSolutions
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllSolutionsCall(String organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllSolutionsValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllSolutions(Async)");
        }
        

        okhttp3.Call localVarCall = findAllSolutionsCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * List all Solutions
     * 
     * @param organizationId the Organization identifier (required)
     * @return List&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public List<Solution> findAllSolutions(String organizationId) throws ApiException {
        ApiResponse<List<Solution>> localVarResp = findAllSolutionsWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Solutions
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;Solution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Solution>> findAllSolutionsWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllSolutionsValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Solution>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Solutions (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllSolutionsAsync(String organizationId, final ApiCallback<List<Solution>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllSolutionsValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Solution>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSolutionById
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSolutionByIdCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSolutionByIdValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findSolutionById(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling findSolutionById(Async)");
        }
        

        okhttp3.Call localVarCall = findSolutionByIdCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Solution findSolutionById(String organizationId, String solutionId) throws ApiException {
        ApiResponse<Solution> localVarResp = findSolutionByIdWithHttpInfo(organizationId, solutionId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> findSolutionByIdWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = findSolutionByIdValidateBeforeCall(organizationId, solutionId, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSolutionByIdAsync(String organizationId, String solutionId, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSolutionByIdValidateBeforeCall(organizationId, solutionId, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSolution
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionCall(String organizationId, String solutionId, Solution solution, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = solution;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSolutionValidateBeforeCall(String organizationId, String solutionId, Solution solution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateSolution(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling updateSolution(Async)");
        }
        
        // verify the required parameter 'solution' is set
        if (solution == null) {
            throw new ApiException("Missing the required parameter 'solution' when calling updateSolution(Async)");
        }
        

        okhttp3.Call localVarCall = updateSolutionCall(organizationId, solutionId, solution, _callback);
        return localVarCall;

    }

    /**
     * Update a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Solution updateSolution(String organizationId, String solutionId, Solution solution) throws ApiException {
        ApiResponse<Solution> localVarResp = updateSolutionWithHttpInfo(organizationId, solutionId, solution);
        return localVarResp.getData();
    }

    /**
     * Update a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> updateSolutionWithHttpInfo(String organizationId, String solutionId, Solution solution) throws ApiException {
        okhttp3.Call localVarCall = updateSolutionValidateBeforeCall(organizationId, solutionId, solution, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionAsync(String organizationId, String solutionId, Solution solution, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSolutionValidateBeforeCall(organizationId, solutionId, solution, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upload
     * @param organizationId the Organization identifier (required)
     * @param body the Solution to upload and register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCall(String organizationId, File body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/upload"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadValidateBeforeCall(String organizationId, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling upload(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling upload(Async)");
        }
        

        okhttp3.Call localVarCall = uploadCall(organizationId, body, _callback);
        return localVarCall;

    }

    /**
     * Upload and register a new solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param body the Solution to upload and register (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Solution upload(String organizationId, File body) throws ApiException {
        ApiResponse<Solution> localVarResp = uploadWithHttpInfo(organizationId, body);
        return localVarResp.getData();
    }

    /**
     * Upload and register a new solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param body the Solution to upload and register (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> uploadWithHttpInfo(String organizationId, File body) throws ApiException {
        okhttp3.Call localVarCall = uploadValidateBeforeCall(organizationId, body, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload and register a new solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param body the Solution to upload and register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAsync(String organizationId, File body, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadValidateBeforeCall(organizationId, body, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
