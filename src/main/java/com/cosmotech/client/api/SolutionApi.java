/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 2.3.3-dev
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cosmotech.client.model.RunTemplate;
import com.cosmotech.client.model.RunTemplateHandlerId;
import com.cosmotech.client.model.RunTemplateParameter;
import com.cosmotech.client.model.RunTemplateParameterGroup;
import com.cosmotech.client.model.Solution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SolutionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SolutionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SolutionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addOrReplaceParameterGroups
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameterGroup the Parameter Groups (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameter Groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceParameterGroupsCall(String organizationId, String solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTemplateParameterGroup;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/parameterGroups"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceParameterGroupsValidateBeforeCall(String organizationId, String solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrReplaceParameterGroups(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling addOrReplaceParameterGroups(Async)");
        }
        
        // verify the required parameter 'runTemplateParameterGroup' is set
        if (runTemplateParameterGroup == null) {
            throw new ApiException("Missing the required parameter 'runTemplateParameterGroup' when calling addOrReplaceParameterGroups(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceParameterGroupsCall(organizationId, solutionId, runTemplateParameterGroup, _callback);
        return localVarCall;

    }

    /**
     * Add Parameter Groups. Any item with the same ID will be overwritten
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameterGroup the Parameter Groups (required)
     * @return List&lt;RunTemplateParameterGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameter Groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<RunTemplateParameterGroup> addOrReplaceParameterGroups(String organizationId, String solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup) throws ApiException {
        ApiResponse<List<RunTemplateParameterGroup>> localVarResp = addOrReplaceParameterGroupsWithHttpInfo(organizationId, solutionId, runTemplateParameterGroup);
        return localVarResp.getData();
    }

    /**
     * Add Parameter Groups. Any item with the same ID will be overwritten
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameterGroup the Parameter Groups (required)
     * @return ApiResponse&lt;List&lt;RunTemplateParameterGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameter Groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RunTemplateParameterGroup>> addOrReplaceParameterGroupsWithHttpInfo(String organizationId, String solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceParameterGroupsValidateBeforeCall(organizationId, solutionId, runTemplateParameterGroup, null);
        Type localVarReturnType = new TypeToken<List<RunTemplateParameterGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Parameter Groups. Any item with the same ID will be overwritten (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameterGroup the Parameter Groups (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameter Groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceParameterGroupsAsync(String organizationId, String solutionId, List<RunTemplateParameterGroup> runTemplateParameterGroup, final ApiCallback<List<RunTemplateParameterGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceParameterGroupsValidateBeforeCall(organizationId, solutionId, runTemplateParameterGroup, _callback);
        Type localVarReturnType = new TypeToken<List<RunTemplateParameterGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addOrReplaceParameters
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameter the Parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceParametersCall(String organizationId, String solutionId, List<RunTemplateParameter> runTemplateParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTemplateParameter;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/parameters"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceParametersValidateBeforeCall(String organizationId, String solutionId, List<RunTemplateParameter> runTemplateParameter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrReplaceParameters(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling addOrReplaceParameters(Async)");
        }
        
        // verify the required parameter 'runTemplateParameter' is set
        if (runTemplateParameter == null) {
            throw new ApiException("Missing the required parameter 'runTemplateParameter' when calling addOrReplaceParameters(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceParametersCall(organizationId, solutionId, runTemplateParameter, _callback);
        return localVarCall;

    }

    /**
     * Add Parameters. Any item with the same ID will be overwritten
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameter the Parameters (required)
     * @return List&lt;RunTemplateParameter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<RunTemplateParameter> addOrReplaceParameters(String organizationId, String solutionId, List<RunTemplateParameter> runTemplateParameter) throws ApiException {
        ApiResponse<List<RunTemplateParameter>> localVarResp = addOrReplaceParametersWithHttpInfo(organizationId, solutionId, runTemplateParameter);
        return localVarResp.getData();
    }

    /**
     * Add Parameters. Any item with the same ID will be overwritten
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameter the Parameters (required)
     * @return ApiResponse&lt;List&lt;RunTemplateParameter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RunTemplateParameter>> addOrReplaceParametersWithHttpInfo(String organizationId, String solutionId, List<RunTemplateParameter> runTemplateParameter) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceParametersValidateBeforeCall(organizationId, solutionId, runTemplateParameter, null);
        Type localVarReturnType = new TypeToken<List<RunTemplateParameter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Parameters. Any item with the same ID will be overwritten (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateParameter the Parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceParametersAsync(String organizationId, String solutionId, List<RunTemplateParameter> runTemplateParameter, final ApiCallback<List<RunTemplateParameter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceParametersValidateBeforeCall(organizationId, solutionId, runTemplateParameter, _callback);
        Type localVarReturnType = new TypeToken<List<RunTemplateParameter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addOrReplaceRunTemplates
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplate the Run Templates (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceRunTemplatesCall(String organizationId, String solutionId, List<RunTemplate> runTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTemplate;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/runTemplates"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceRunTemplatesValidateBeforeCall(String organizationId, String solutionId, List<RunTemplate> runTemplate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrReplaceRunTemplates(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling addOrReplaceRunTemplates(Async)");
        }
        
        // verify the required parameter 'runTemplate' is set
        if (runTemplate == null) {
            throw new ApiException("Missing the required parameter 'runTemplate' when calling addOrReplaceRunTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceRunTemplatesCall(organizationId, solutionId, runTemplate, _callback);
        return localVarCall;

    }

    /**
     * Add Run Templates. Any item with the same ID will be overwritten
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplate the Run Templates (required)
     * @return List&lt;RunTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<RunTemplate> addOrReplaceRunTemplates(String organizationId, String solutionId, List<RunTemplate> runTemplate) throws ApiException {
        ApiResponse<List<RunTemplate>> localVarResp = addOrReplaceRunTemplatesWithHttpInfo(organizationId, solutionId, runTemplate);
        return localVarResp.getData();
    }

    /**
     * Add Run Templates. Any item with the same ID will be overwritten
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplate the Run Templates (required)
     * @return ApiResponse&lt;List&lt;RunTemplate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RunTemplate>> addOrReplaceRunTemplatesWithHttpInfo(String organizationId, String solutionId, List<RunTemplate> runTemplate) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceRunTemplatesValidateBeforeCall(organizationId, solutionId, runTemplate, null);
        Type localVarReturnType = new TypeToken<List<RunTemplate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Run Templates. Any item with the same ID will be overwritten (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplate the Run Templates (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceRunTemplatesAsync(String organizationId, String solutionId, List<RunTemplate> runTemplate, final ApiCallback<List<RunTemplate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceRunTemplatesValidateBeforeCall(organizationId, solutionId, runTemplate, _callback);
        Type localVarReturnType = new TypeToken<List<RunTemplate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSolution
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSolutionCall(String organizationId, Solution solution, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = solution;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSolutionValidateBeforeCall(String organizationId, Solution solution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createSolution(Async)");
        }
        
        // verify the required parameter 'solution' is set
        if (solution == null) {
            throw new ApiException("Missing the required parameter 'solution' when calling createSolution(Async)");
        }
        

        okhttp3.Call localVarCall = createSolutionCall(organizationId, solution, _callback);
        return localVarCall;

    }

    /**
     * Register a new solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Solution createSolution(String organizationId, Solution solution) throws ApiException {
        ApiResponse<Solution> localVarResp = createSolutionWithHttpInfo(organizationId, solution);
        return localVarResp.getData();
    }

    /**
     * Register a new solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> createSolutionWithHttpInfo(String organizationId, Solution solution) throws ApiException {
        okhttp3.Call localVarCall = createSolutionValidateBeforeCall(organizationId, solution, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solution the Solution to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSolutionAsync(String organizationId, Solution solution, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSolutionValidateBeforeCall(organizationId, solution, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSolution
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSolutionCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSolutionValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteSolution(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling deleteSolution(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSolutionCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSolution(String organizationId, String solutionId) throws ApiException {
        deleteSolutionWithHttpInfo(organizationId, solutionId);
    }

    /**
     * Delete a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSolutionWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = deleteSolutionValidateBeforeCall(organizationId, solutionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSolutionAsync(String organizationId, String solutionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSolutionValidateBeforeCall(organizationId, solutionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSolutionRunTemplate
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSolutionRunTemplateCall(String organizationId, String solutionId, String runTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/runTemplates/{run_template_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()))
            .replaceAll("\\{" + "run_template_id" + "\\}", localVarApiClient.escapeString(runTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSolutionRunTemplateValidateBeforeCall(String organizationId, String solutionId, String runTemplateId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteSolutionRunTemplate(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling deleteSolutionRunTemplate(Async)");
        }
        
        // verify the required parameter 'runTemplateId' is set
        if (runTemplateId == null) {
            throw new ApiException("Missing the required parameter 'runTemplateId' when calling deleteSolutionRunTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSolutionRunTemplateCall(organizationId, solutionId, runTemplateId, _callback);
        return localVarCall;

    }

    /**
     * Remove the specified Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSolutionRunTemplate(String organizationId, String solutionId, String runTemplateId) throws ApiException {
        deleteSolutionRunTemplateWithHttpInfo(organizationId, solutionId, runTemplateId);
    }

    /**
     * Remove the specified Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSolutionRunTemplateWithHttpInfo(String organizationId, String solutionId, String runTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deleteSolutionRunTemplateValidateBeforeCall(organizationId, solutionId, runTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove the specified Solution Run Template (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSolutionRunTemplateAsync(String organizationId, String solutionId, String runTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSolutionRunTemplateValidateBeforeCall(organizationId, solutionId, runTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadRunTemplateHandler
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run template handle file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run Template Handler file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadRunTemplateHandlerCall(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/runtemplates/{run_template_id}/handlers/{handler_id}/download"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()))
            .replaceAll("\\{" + "run_template_id" + "\\}", localVarApiClient.escapeString(runTemplateId.toString()))
            .replaceAll("\\{" + "handler_id" + "\\}", localVarApiClient.escapeString(handlerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadRunTemplateHandlerValidateBeforeCall(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling downloadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling downloadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'runTemplateId' is set
        if (runTemplateId == null) {
            throw new ApiException("Missing the required parameter 'runTemplateId' when calling downloadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'handlerId' is set
        if (handlerId == null) {
            throw new ApiException("Missing the required parameter 'handlerId' when calling downloadRunTemplateHandler(Async)");
        }
        

        okhttp3.Call localVarCall = downloadRunTemplateHandlerCall(organizationId, solutionId, runTemplateId, handlerId, _callback);
        return localVarCall;

    }

    /**
     * Download a Run Template step handler zip file
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run template handle file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run Template Handler file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public File downloadRunTemplateHandler(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId) throws ApiException {
        ApiResponse<File> localVarResp = downloadRunTemplateHandlerWithHttpInfo(organizationId, solutionId, runTemplateId, handlerId);
        return localVarResp.getData();
    }

    /**
     * Download a Run Template step handler zip file
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run template handle file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run Template Handler file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadRunTemplateHandlerWithHttpInfo(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId) throws ApiException {
        okhttp3.Call localVarCall = downloadRunTemplateHandlerValidateBeforeCall(organizationId, solutionId, runTemplateId, handlerId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a Run Template step handler zip file (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run template handle file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run Template Handler file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadRunTemplateHandlerAsync(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadRunTemplateHandlerValidateBeforeCall(organizationId, solutionId, runTemplateId, handlerId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllSolutions
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllSolutionsCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllSolutionsValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllSolutions(Async)");
        }
        

        okhttp3.Call localVarCall = findAllSolutionsCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * List all Solutions
     * 
     * @param organizationId the Organization identifier (required)
     * @return List&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public List<Solution> findAllSolutions(String organizationId) throws ApiException {
        ApiResponse<List<Solution>> localVarResp = findAllSolutionsWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Solutions
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;Solution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Solution>> findAllSolutionsWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllSolutionsValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Solution>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Solutions (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllSolutionsAsync(String organizationId, final ApiCallback<List<Solution>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllSolutionsValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Solution>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSolutionById
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSolutionByIdCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSolutionByIdValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findSolutionById(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling findSolutionById(Async)");
        }
        

        okhttp3.Call localVarCall = findSolutionByIdCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Solution findSolutionById(String organizationId, String solutionId) throws ApiException {
        ApiResponse<Solution> localVarResp = findSolutionByIdWithHttpInfo(organizationId, solutionId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> findSolutionByIdWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = findSolutionByIdValidateBeforeCall(organizationId, solutionId, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Solution details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSolutionByIdAsync(String organizationId, String solutionId, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSolutionByIdValidateBeforeCall(organizationId, solutionId, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllRunTemplates
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllRunTemplatesCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/runTemplates"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllRunTemplatesValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeAllRunTemplates(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling removeAllRunTemplates(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllRunTemplatesCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Remove all Run Templates from the Solution specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void removeAllRunTemplates(String organizationId, String solutionId) throws ApiException {
        removeAllRunTemplatesWithHttpInfo(organizationId, solutionId);
    }

    /**
     * Remove all Run Templates from the Solution specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAllRunTemplatesWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = removeAllRunTemplatesValidateBeforeCall(organizationId, solutionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all Run Templates from the Solution specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllRunTemplatesAsync(String organizationId, String solutionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllRunTemplatesValidateBeforeCall(organizationId, solutionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllSolutionParameterGroups
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllSolutionParameterGroupsCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/parameterGroups"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllSolutionParameterGroupsValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeAllSolutionParameterGroups(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling removeAllSolutionParameterGroups(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllSolutionParameterGroupsCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Remove all Parameter Groups from the Solution specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void removeAllSolutionParameterGroups(String organizationId, String solutionId) throws ApiException {
        removeAllSolutionParameterGroupsWithHttpInfo(organizationId, solutionId);
    }

    /**
     * Remove all Parameter Groups from the Solution specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAllSolutionParameterGroupsWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = removeAllSolutionParameterGroupsValidateBeforeCall(organizationId, solutionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all Parameter Groups from the Solution specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllSolutionParameterGroupsAsync(String organizationId, String solutionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllSolutionParameterGroupsValidateBeforeCall(organizationId, solutionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllSolutionParameters
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllSolutionParametersCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/parameters"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllSolutionParametersValidateBeforeCall(String organizationId, String solutionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeAllSolutionParameters(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling removeAllSolutionParameters(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllSolutionParametersCall(organizationId, solutionId, _callback);
        return localVarCall;

    }

    /**
     * Remove all Parameters from the Solution specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void removeAllSolutionParameters(String organizationId, String solutionId) throws ApiException {
        removeAllSolutionParametersWithHttpInfo(organizationId, solutionId);
    }

    /**
     * Remove all Parameters from the Solution specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAllSolutionParametersWithHttpInfo(String organizationId, String solutionId) throws ApiException {
        okhttp3.Call localVarCall = removeAllSolutionParametersValidateBeforeCall(organizationId, solutionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all Parameters from the Solution specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllSolutionParametersAsync(String organizationId, String solutionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllSolutionParametersValidateBeforeCall(organizationId, solutionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSolution
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionCall(String organizationId, String solutionId, Solution solution, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = solution;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSolutionValidateBeforeCall(String organizationId, String solutionId, Solution solution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateSolution(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling updateSolution(Async)");
        }
        
        // verify the required parameter 'solution' is set
        if (solution == null) {
            throw new ApiException("Missing the required parameter 'solution' when calling updateSolution(Async)");
        }
        

        okhttp3.Call localVarCall = updateSolutionCall(organizationId, solutionId, solution, _callback);
        return localVarCall;

    }

    /**
     * Update a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Solution updateSolution(String organizationId, String solutionId, Solution solution) throws ApiException {
        ApiResponse<Solution> localVarResp = updateSolutionWithHttpInfo(organizationId, solutionId, solution);
        return localVarResp.getData();
    }

    /**
     * Update a solution
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> updateSolutionWithHttpInfo(String organizationId, String solutionId, Solution solution) throws ApiException {
        okhttp3.Call localVarCall = updateSolutionValidateBeforeCall(organizationId, solutionId, solution, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a solution (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param solution the new Solution details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the solution details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionAsync(String organizationId, String solutionId, Solution solution, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSolutionValidateBeforeCall(organizationId, solutionId, solution, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSolutionRunTemplate
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param runTemplate the Run Templates (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution or Run Template specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionRunTemplateCall(String organizationId, String solutionId, String runTemplateId, RunTemplate runTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTemplate;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/runTemplates/{run_template_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()))
            .replaceAll("\\{" + "run_template_id" + "\\}", localVarApiClient.escapeString(runTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSolutionRunTemplateValidateBeforeCall(String organizationId, String solutionId, String runTemplateId, RunTemplate runTemplate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateSolutionRunTemplate(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling updateSolutionRunTemplate(Async)");
        }
        
        // verify the required parameter 'runTemplateId' is set
        if (runTemplateId == null) {
            throw new ApiException("Missing the required parameter 'runTemplateId' when calling updateSolutionRunTemplate(Async)");
        }
        
        // verify the required parameter 'runTemplate' is set
        if (runTemplate == null) {
            throw new ApiException("Missing the required parameter 'runTemplate' when calling updateSolutionRunTemplate(Async)");
        }
        

        okhttp3.Call localVarCall = updateSolutionRunTemplateCall(organizationId, solutionId, runTemplateId, runTemplate, _callback);
        return localVarCall;

    }

    /**
     * Update the specified Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param runTemplate the Run Templates (required)
     * @return List&lt;RunTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution or Run Template specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<RunTemplate> updateSolutionRunTemplate(String organizationId, String solutionId, String runTemplateId, RunTemplate runTemplate) throws ApiException {
        ApiResponse<List<RunTemplate>> localVarResp = updateSolutionRunTemplateWithHttpInfo(organizationId, solutionId, runTemplateId, runTemplate);
        return localVarResp.getData();
    }

    /**
     * Update the specified Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param runTemplate the Run Templates (required)
     * @return ApiResponse&lt;List&lt;RunTemplate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution or Run Template specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RunTemplate>> updateSolutionRunTemplateWithHttpInfo(String organizationId, String solutionId, String runTemplateId, RunTemplate runTemplate) throws ApiException {
        okhttp3.Call localVarCall = updateSolutionRunTemplateValidateBeforeCall(organizationId, solutionId, runTemplateId, runTemplate, null);
        Type localVarReturnType = new TypeToken<List<RunTemplate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the specified Solution Run Template (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param runTemplate the Run Templates (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Solution or Run Template specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionRunTemplateAsync(String organizationId, String solutionId, String runTemplateId, RunTemplate runTemplate, final ApiCallback<List<RunTemplate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSolutionRunTemplateValidateBeforeCall(organizationId, solutionId, runTemplateId, runTemplate, _callback);
        Type localVarReturnType = new TypeToken<List<RunTemplate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadRunTemplateHandler
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @param body  (required)
     * @param overwrite whether to overwrite any existing handler resource (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> zip file uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRunTemplateHandlerCall(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, File body, Boolean overwrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/solutions/{solution_id}/runtemplates/{run_template_id}/handlers/{handler_id}/upload"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "solution_id" + "\\}", localVarApiClient.escapeString(solutionId.toString()))
            .replaceAll("\\{" + "run_template_id" + "\\}", localVarApiClient.escapeString(runTemplateId.toString()))
            .replaceAll("\\{" + "handler_id" + "\\}", localVarApiClient.escapeString(handlerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (overwrite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwrite", overwrite));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadRunTemplateHandlerValidateBeforeCall(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, File body, Boolean overwrite, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling uploadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'solutionId' is set
        if (solutionId == null) {
            throw new ApiException("Missing the required parameter 'solutionId' when calling uploadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'runTemplateId' is set
        if (runTemplateId == null) {
            throw new ApiException("Missing the required parameter 'runTemplateId' when calling uploadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'handlerId' is set
        if (handlerId == null) {
            throw new ApiException("Missing the required parameter 'handlerId' when calling uploadRunTemplateHandler(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadRunTemplateHandler(Async)");
        }
        

        okhttp3.Call localVarCall = uploadRunTemplateHandlerCall(organizationId, solutionId, runTemplateId, handlerId, body, overwrite, _callback);
        return localVarCall;

    }

    /**
     * Upload a Run Template step handler zip file
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @param body  (required)
     * @param overwrite whether to overwrite any existing handler resource (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> zip file uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public void uploadRunTemplateHandler(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, File body, Boolean overwrite) throws ApiException {
        uploadRunTemplateHandlerWithHttpInfo(organizationId, solutionId, runTemplateId, handlerId, body, overwrite);
    }

    /**
     * Upload a Run Template step handler zip file
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @param body  (required)
     * @param overwrite whether to overwrite any existing handler resource (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> zip file uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadRunTemplateHandlerWithHttpInfo(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, File body, Boolean overwrite) throws ApiException {
        okhttp3.Call localVarCall = uploadRunTemplateHandlerValidateBeforeCall(organizationId, solutionId, runTemplateId, handlerId, body, overwrite, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a Run Template step handler zip file (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param solutionId the Solution identifier (required)
     * @param runTemplateId the Run Template identifier (required)
     * @param handlerId the Handler identifier (required)
     * @param body  (required)
     * @param overwrite whether to overwrite any existing handler resource (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> zip file uploaded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRunTemplateHandlerAsync(String organizationId, String solutionId, String runTemplateId, RunTemplateHandlerId handlerId, File body, Boolean overwrite, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadRunTemplateHandlerValidateBeforeCall(organizationId, solutionId, runTemplateId, handlerId, body, overwrite, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
