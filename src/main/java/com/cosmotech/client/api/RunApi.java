/*
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 4.0.3-SNAPSHOT
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.QueryResult;
import com.cosmotech.client.model.Run;
import com.cosmotech.client.model.RunData;
import com.cosmotech.client.model.RunDataQuery;
import com.cosmotech.client.model.RunLogs;
import com.cosmotech.client.model.RunStatus;
import com.cosmotech.client.model.SendRunDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RunApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RunApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteRun
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRunCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRunValidateBeforeCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteRun(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteRun(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling deleteRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling deleteRun(Async)");
        }

        return deleteRunCall(organizationId, workspaceId, runnerId, runId, _callback);

    }

    /**
     * Delete a run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRun(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        deleteRunWithHttpInfo(organizationId, workspaceId, runnerId, runId);
    }

    /**
     * Delete a run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRunWithHttpInfo(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        okhttp3.Call localVarCall = deleteRunValidateBeforeCall(organizationId, workspaceId, runnerId, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRunAsync(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRunValidateBeforeCall(organizationId, workspaceId, runnerId, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRun
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRunCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunValidateBeforeCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getRun(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getRun(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling getRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getRun(Async)");
        }

        return getRunCall(organizationId, workspaceId, runnerId, runId, _callback);

    }

    /**
     * Get the details of a run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Run getRun(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        ApiResponse<Run> localVarResp = getRunWithHttpInfo(organizationId, workspaceId, runnerId, runId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return ApiResponse&lt;Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Run> getRunWithHttpInfo(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        okhttp3.Call localVarCall = getRunValidateBeforeCall(organizationId, workspaceId, runnerId, runId, null);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Run specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRunAsync(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback<Run> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunValidateBeforeCall(organizationId, workspaceId, runnerId, runId, _callback);
        Type localVarReturnType = new TypeToken<Run>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRunLogs
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run logs details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRunLogsCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/logs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunLogsValidateBeforeCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getRunLogs(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getRunLogs(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling getRunLogs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getRunLogs(Async)");
        }

        return getRunLogsCall(organizationId, workspaceId, runnerId, runId, _callback);

    }

    /**
     * get the logs for the Run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return RunLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run logs details </td><td>  -  </td></tr>
     </table>
     */
    public RunLogs getRunLogs(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        ApiResponse<RunLogs> localVarResp = getRunLogsWithHttpInfo(organizationId, workspaceId, runnerId, runId);
        return localVarResp.getData();
    }

    /**
     * get the logs for the Run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return ApiResponse&lt;RunLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run logs details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunLogs> getRunLogsWithHttpInfo(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        okhttp3.Call localVarCall = getRunLogsValidateBeforeCall(organizationId, workspaceId, runnerId, runId, null);
        Type localVarReturnType = new TypeToken<RunLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the logs for the Run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run logs details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRunLogsAsync(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback<RunLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunLogsValidateBeforeCall(organizationId, workspaceId, runnerId, runId, _callback);
        Type localVarReturnType = new TypeToken<RunLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRunStatus
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run status details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRunStatusCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/status"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunStatusValidateBeforeCall(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getRunStatus(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getRunStatus(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling getRunStatus(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getRunStatus(Async)");
        }

        return getRunStatusCall(organizationId, workspaceId, runnerId, runId, _callback);

    }

    /**
     * get the status for the Run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return RunStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run status details </td><td>  -  </td></tr>
     </table>
     */
    public RunStatus getRunStatus(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        ApiResponse<RunStatus> localVarResp = getRunStatusWithHttpInfo(organizationId, workspaceId, runnerId, runId);
        return localVarResp.getData();
    }

    /**
     * get the status for the Run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @return ApiResponse&lt;RunStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run status details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunStatus> getRunStatusWithHttpInfo(String organizationId, String workspaceId, String runnerId, String runId) throws ApiException {
        okhttp3.Call localVarCall = getRunStatusValidateBeforeCall(organizationId, workspaceId, runnerId, runId, null);
        Type localVarReturnType = new TypeToken<RunStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the status for the Run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run status details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRunStatusAsync(String organizationId, String workspaceId, String runnerId, String runId, final ApiCallback<RunStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunStatusValidateBeforeCall(organizationId, workspaceId, runnerId, runId, _callback);
        Type localVarReturnType = new TypeToken<RunStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRuns
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRunsCall(String organizationId, String workspaceId, String runnerId, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRunsValidateBeforeCall(String organizationId, String workspaceId, String runnerId, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listRuns(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling listRuns(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling listRuns(Async)");
        }

        return listRunsCall(organizationId, workspaceId, runnerId, page, size, _callback);

    }

    /**
     * get the list of Runs for the Runner
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return List&lt;Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run details list </td><td>  -  </td></tr>
     </table>
     */
    public List<Run> listRuns(String organizationId, String workspaceId, String runnerId, Integer page, Integer size) throws ApiException {
        ApiResponse<List<Run>> localVarResp = listRunsWithHttpInfo(organizationId, workspaceId, runnerId, page, size);
        return localVarResp.getData();
    }

    /**
     * get the list of Runs for the Runner
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return ApiResponse&lt;List&lt;Run&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run details list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Run>> listRunsWithHttpInfo(String organizationId, String workspaceId, String runnerId, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = listRunsValidateBeforeCall(organizationId, workspaceId, runnerId, page, size, null);
        Type localVarReturnType = new TypeToken<List<Run>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the list of Runs for the Runner (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the run details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRunsAsync(String organizationId, String workspaceId, String runnerId, Integer page, Integer size, final ApiCallback<List<Run>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRunsValidateBeforeCall(organizationId, workspaceId, runnerId, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<Run>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryRunData
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param runDataQuery the query to run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryRunDataCall(String organizationId, String workspaceId, String runnerId, String runId, RunDataQuery runDataQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runDataQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/data/query"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryRunDataValidateBeforeCall(String organizationId, String workspaceId, String runnerId, String runId, RunDataQuery runDataQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling queryRunData(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling queryRunData(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling queryRunData(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling queryRunData(Async)");
        }

        // verify the required parameter 'runDataQuery' is set
        if (runDataQuery == null) {
            throw new ApiException("Missing the required parameter 'runDataQuery' when calling queryRunData(Async)");
        }

        return queryRunDataCall(organizationId, workspaceId, runnerId, runId, runDataQuery, _callback);

    }

    /**
     * query the run data
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param runDataQuery the query to run (required)
     * @return QueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query response </td><td>  -  </td></tr>
     </table>
     */
    public QueryResult queryRunData(String organizationId, String workspaceId, String runnerId, String runId, RunDataQuery runDataQuery) throws ApiException {
        ApiResponse<QueryResult> localVarResp = queryRunDataWithHttpInfo(organizationId, workspaceId, runnerId, runId, runDataQuery);
        return localVarResp.getData();
    }

    /**
     * query the run data
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param runDataQuery the query to run (required)
     * @return ApiResponse&lt;QueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResult> queryRunDataWithHttpInfo(String organizationId, String workspaceId, String runnerId, String runId, RunDataQuery runDataQuery) throws ApiException {
        okhttp3.Call localVarCall = queryRunDataValidateBeforeCall(organizationId, workspaceId, runnerId, runId, runDataQuery, null);
        Type localVarReturnType = new TypeToken<QueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * query the run data (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param runDataQuery the query to run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryRunDataAsync(String organizationId, String workspaceId, String runnerId, String runId, RunDataQuery runDataQuery, final ApiCallback<QueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryRunDataValidateBeforeCall(organizationId, workspaceId, runnerId, runId, runDataQuery, _callback);
        Type localVarReturnType = new TypeToken<QueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendRunData
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param sendRunDataRequest Custom data to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Data stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Data sent format is malformed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendRunDataCall(String organizationId, String workspaceId, String runnerId, String runId, SendRunDataRequest sendRunDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendRunDataRequest;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/runs/{run_id}/data/send"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "workspace_id" + "}", localVarApiClient.escapeString(workspaceId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendRunDataValidateBeforeCall(String organizationId, String workspaceId, String runnerId, String runId, SendRunDataRequest sendRunDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling sendRunData(Async)");
        }

        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling sendRunData(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling sendRunData(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling sendRunData(Async)");
        }

        // verify the required parameter 'sendRunDataRequest' is set
        if (sendRunDataRequest == null) {
            throw new ApiException("Missing the required parameter 'sendRunDataRequest' when calling sendRunData(Async)");
        }

        return sendRunDataCall(organizationId, workspaceId, runnerId, runId, sendRunDataRequest, _callback);

    }

    /**
     * Send data associated to a run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param sendRunDataRequest Custom data to register (required)
     * @return RunData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Data stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Data sent format is malformed </td><td>  -  </td></tr>
     </table>
     */
    public RunData sendRunData(String organizationId, String workspaceId, String runnerId, String runId, SendRunDataRequest sendRunDataRequest) throws ApiException {
        ApiResponse<RunData> localVarResp = sendRunDataWithHttpInfo(organizationId, workspaceId, runnerId, runId, sendRunDataRequest);
        return localVarResp.getData();
    }

    /**
     * Send data associated to a run
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param sendRunDataRequest Custom data to register (required)
     * @return ApiResponse&lt;RunData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Data stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Data sent format is malformed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunData> sendRunDataWithHttpInfo(String organizationId, String workspaceId, String runnerId, String runId, SendRunDataRequest sendRunDataRequest) throws ApiException {
        okhttp3.Call localVarCall = sendRunDataValidateBeforeCall(organizationId, workspaceId, runnerId, runId, sendRunDataRequest, null);
        Type localVarReturnType = new TypeToken<RunData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send data associated to a run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param runnerId the Runner identifier (required)
     * @param runId the Run identifier (required)
     * @param sendRunDataRequest Custom data to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Data stored </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Data sent format is malformed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendRunDataAsync(String organizationId, String workspaceId, String runnerId, String runId, SendRunDataRequest sendRunDataRequest, final ApiCallback<RunData> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendRunDataValidateBeforeCall(organizationId, workspaceId, runnerId, runId, sendRunDataRequest, _callback);
        Type localVarReturnType = new TypeToken<RunData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
