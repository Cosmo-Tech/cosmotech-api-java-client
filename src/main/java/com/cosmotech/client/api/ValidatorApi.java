/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 1.0.7-rc
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cosmotech.client.model.Validator;
import com.cosmotech.client.model.ValidatorRun;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidatorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ValidatorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidatorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createValidator
     * @param organizationId the Organization identifier (required)
     * @param validator the Validator to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createValidatorCall(String organizationId, Validator validator, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validator;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidatorValidateBeforeCall(String organizationId, Validator validator, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createValidator(Async)");
        }
        
        // verify the required parameter 'validator' is set
        if (validator == null) {
            throw new ApiException("Missing the required parameter 'validator' when calling createValidator(Async)");
        }
        

        okhttp3.Call localVarCall = createValidatorCall(organizationId, validator, _callback);
        return localVarCall;

    }

    /**
     * Register a new validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validator the Validator to create (required)
     * @return Validator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Validator createValidator(String organizationId, Validator validator) throws ApiException {
        ApiResponse<Validator> localVarResp = createValidatorWithHttpInfo(organizationId, validator);
        return localVarResp.getData();
    }

    /**
     * Register a new validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validator the Validator to create (required)
     * @return ApiResponse&lt;Validator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Validator> createValidatorWithHttpInfo(String organizationId, Validator validator) throws ApiException {
        okhttp3.Call localVarCall = createValidatorValidateBeforeCall(organizationId, validator, null);
        Type localVarReturnType = new TypeToken<Validator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new validator (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validator the Validator to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createValidatorAsync(String organizationId, Validator validator, final ApiCallback<Validator> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidatorValidateBeforeCall(organizationId, validator, _callback);
        Type localVarReturnType = new TypeToken<Validator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createValidatorRun
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator Run to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createValidatorRunCall(String organizationId, String validatorId, ValidatorRun validatorRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validatorRun;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}/history"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidatorRunValidateBeforeCall(String organizationId, String validatorId, ValidatorRun validatorRun, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createValidatorRun(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling createValidatorRun(Async)");
        }
        
        // verify the required parameter 'validatorRun' is set
        if (validatorRun == null) {
            throw new ApiException("Missing the required parameter 'validatorRun' when calling createValidatorRun(Async)");
        }
        

        okhttp3.Call localVarCall = createValidatorRunCall(organizationId, validatorId, validatorRun, _callback);
        return localVarCall;

    }

    /**
     * Register a new validator run
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator Run to create (required)
     * @return ValidatorRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ValidatorRun createValidatorRun(String organizationId, String validatorId, ValidatorRun validatorRun) throws ApiException {
        ApiResponse<ValidatorRun> localVarResp = createValidatorRunWithHttpInfo(organizationId, validatorId, validatorRun);
        return localVarResp.getData();
    }

    /**
     * Register a new validator run
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator Run to create (required)
     * @return ApiResponse&lt;ValidatorRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatorRun> createValidatorRunWithHttpInfo(String organizationId, String validatorId, ValidatorRun validatorRun) throws ApiException {
        okhttp3.Call localVarCall = createValidatorRunValidateBeforeCall(organizationId, validatorId, validatorRun, null);
        Type localVarReturnType = new TypeToken<ValidatorRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new validator run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator Run to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createValidatorRunAsync(String organizationId, String validatorId, ValidatorRun validatorRun, final ApiCallback<ValidatorRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidatorRunValidateBeforeCall(organizationId, validatorId, validatorRun, _callback);
        Type localVarReturnType = new TypeToken<ValidatorRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteValidator
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteValidatorCall(String organizationId, String validatorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidatorValidateBeforeCall(String organizationId, String validatorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteValidator(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling deleteValidator(Async)");
        }
        

        okhttp3.Call localVarCall = deleteValidatorCall(organizationId, validatorId, _callback);
        return localVarCall;

    }

    /**
     * Delete a validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteValidator(String organizationId, String validatorId) throws ApiException {
        deleteValidatorWithHttpInfo(organizationId, validatorId);
    }

    /**
     * Delete a validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteValidatorWithHttpInfo(String organizationId, String validatorId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidatorValidateBeforeCall(organizationId, validatorId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a validator (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteValidatorAsync(String organizationId, String validatorId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidatorValidateBeforeCall(organizationId, validatorId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteValidatorRun
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteValidatorRunCall(String organizationId, String validatorId, String validatorrunId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}/history/{validatorrun_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()))
            .replaceAll("\\{" + "validatorrun_id" + "\\}", localVarApiClient.escapeString(validatorrunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidatorRunValidateBeforeCall(String organizationId, String validatorId, String validatorrunId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteValidatorRun(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling deleteValidatorRun(Async)");
        }
        
        // verify the required parameter 'validatorrunId' is set
        if (validatorrunId == null) {
            throw new ApiException("Missing the required parameter 'validatorrunId' when calling deleteValidatorRun(Async)");
        }
        

        okhttp3.Call localVarCall = deleteValidatorRunCall(organizationId, validatorId, validatorrunId, _callback);
        return localVarCall;

    }

    /**
     * Delete a validator run
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteValidatorRun(String organizationId, String validatorId, String validatorrunId) throws ApiException {
        deleteValidatorRunWithHttpInfo(organizationId, validatorId, validatorrunId);
    }

    /**
     * Delete a validator run
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteValidatorRunWithHttpInfo(String organizationId, String validatorId, String validatorrunId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidatorRunValidateBeforeCall(organizationId, validatorId, validatorrunId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a validator run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteValidatorRunAsync(String organizationId, String validatorId, String validatorrunId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidatorRunValidateBeforeCall(organizationId, validatorId, validatorrunId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllValidatorRuns
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator run details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllValidatorRunsCall(String organizationId, String validatorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}/history"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllValidatorRunsValidateBeforeCall(String organizationId, String validatorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllValidatorRuns(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling findAllValidatorRuns(Async)");
        }
        

        okhttp3.Call localVarCall = findAllValidatorRunsCall(organizationId, validatorId, _callback);
        return localVarCall;

    }

    /**
     * List all Validator Runs
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @return List&lt;ValidatorRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator run details </td><td>  -  </td></tr>
     </table>
     */
    public List<ValidatorRun> findAllValidatorRuns(String organizationId, String validatorId) throws ApiException {
        ApiResponse<List<ValidatorRun>> localVarResp = findAllValidatorRunsWithHttpInfo(organizationId, validatorId);
        return localVarResp.getData();
    }

    /**
     * List all Validator Runs
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @return ApiResponse&lt;List&lt;ValidatorRun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator run details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ValidatorRun>> findAllValidatorRunsWithHttpInfo(String organizationId, String validatorId) throws ApiException {
        okhttp3.Call localVarCall = findAllValidatorRunsValidateBeforeCall(organizationId, validatorId, null);
        Type localVarReturnType = new TypeToken<List<ValidatorRun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Validator Runs (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator run details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllValidatorRunsAsync(String organizationId, String validatorId, final ApiCallback<List<ValidatorRun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllValidatorRunsValidateBeforeCall(organizationId, validatorId, _callback);
        Type localVarReturnType = new TypeToken<List<ValidatorRun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllValidators
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllValidatorsCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllValidatorsValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllValidators(Async)");
        }
        

        okhttp3.Call localVarCall = findAllValidatorsCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * List all Validators
     * 
     * @param organizationId the Organization identifier (required)
     * @return List&lt;Validator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator details </td><td>  -  </td></tr>
     </table>
     */
    public List<Validator> findAllValidators(String organizationId) throws ApiException {
        ApiResponse<List<Validator>> localVarResp = findAllValidatorsWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Validators
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;Validator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Validator>> findAllValidatorsWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllValidatorsValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Validator>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Validators (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the validator details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllValidatorsAsync(String organizationId, final ApiCallback<List<Validator>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllValidatorsValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Validator>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findValidatorById
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findValidatorByIdCall(String organizationId, String validatorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findValidatorByIdValidateBeforeCall(String organizationId, String validatorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findValidatorById(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling findValidatorById(Async)");
        }
        

        okhttp3.Call localVarCall = findValidatorByIdCall(organizationId, validatorId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @return Validator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Validator findValidatorById(String organizationId, String validatorId) throws ApiException {
        ApiResponse<Validator> localVarResp = findValidatorByIdWithHttpInfo(organizationId, validatorId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @return ApiResponse&lt;Validator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Validator> findValidatorByIdWithHttpInfo(String organizationId, String validatorId) throws ApiException {
        okhttp3.Call localVarCall = findValidatorByIdValidateBeforeCall(organizationId, validatorId, null);
        Type localVarReturnType = new TypeToken<Validator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a validator (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Validator specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findValidatorByIdAsync(String organizationId, String validatorId, final ApiCallback<Validator> _callback) throws ApiException {

        okhttp3.Call localVarCall = findValidatorByIdValidateBeforeCall(organizationId, validatorId, _callback);
        Type localVarReturnType = new TypeToken<Validator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findValidatorRunById
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findValidatorRunByIdCall(String organizationId, String validatorId, String validatorrunId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}/history/{validatorrun_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()))
            .replaceAll("\\{" + "validatorrun_id" + "\\}", localVarApiClient.escapeString(validatorrunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findValidatorRunByIdValidateBeforeCall(String organizationId, String validatorId, String validatorrunId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findValidatorRunById(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling findValidatorRunById(Async)");
        }
        
        // verify the required parameter 'validatorrunId' is set
        if (validatorrunId == null) {
            throw new ApiException("Missing the required parameter 'validatorrunId' when calling findValidatorRunById(Async)");
        }
        

        okhttp3.Call localVarCall = findValidatorRunByIdCall(organizationId, validatorId, validatorrunId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a validator run
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @return ValidatorRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ValidatorRun findValidatorRunById(String organizationId, String validatorId, String validatorrunId) throws ApiException {
        ApiResponse<ValidatorRun> localVarResp = findValidatorRunByIdWithHttpInfo(organizationId, validatorId, validatorrunId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a validator run
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @return ApiResponse&lt;ValidatorRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatorRun> findValidatorRunByIdWithHttpInfo(String organizationId, String validatorId, String validatorrunId) throws ApiException {
        okhttp3.Call localVarCall = findValidatorRunByIdValidateBeforeCall(organizationId, validatorId, validatorrunId, null);
        Type localVarReturnType = new TypeToken<ValidatorRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a validator run (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the Validator identifier (required)
     * @param validatorrunId the Validator Run identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Validator Run details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ValidatorRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findValidatorRunByIdAsync(String organizationId, String validatorId, String validatorrunId, final ApiCallback<ValidatorRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = findValidatorRunByIdValidateBeforeCall(organizationId, validatorId, validatorrunId, _callback);
        Type localVarReturnType = new TypeToken<ValidatorRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runValidator
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator to run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runValidatorCall(String organizationId, String validatorId, ValidatorRun validatorRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validatorRun;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/validators/{validator_id}/run"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "validator_id" + "\\}", localVarApiClient.escapeString(validatorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runValidatorValidateBeforeCall(String organizationId, String validatorId, ValidatorRun validatorRun, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling runValidator(Async)");
        }
        
        // verify the required parameter 'validatorId' is set
        if (validatorId == null) {
            throw new ApiException("Missing the required parameter 'validatorId' when calling runValidator(Async)");
        }
        
        // verify the required parameter 'validatorRun' is set
        if (validatorRun == null) {
            throw new ApiException("Missing the required parameter 'validatorRun' when calling runValidator(Async)");
        }
        

        okhttp3.Call localVarCall = runValidatorCall(organizationId, validatorId, validatorRun, _callback);
        return localVarCall;

    }

    /**
     * Run a Validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator to run (required)
     * @return ValidatorRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ValidatorRun runValidator(String organizationId, String validatorId, ValidatorRun validatorRun) throws ApiException {
        ApiResponse<ValidatorRun> localVarResp = runValidatorWithHttpInfo(organizationId, validatorId, validatorRun);
        return localVarResp.getData();
    }

    /**
     * Run a Validator
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator to run (required)
     * @return ApiResponse&lt;ValidatorRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatorRun> runValidatorWithHttpInfo(String organizationId, String validatorId, ValidatorRun validatorRun) throws ApiException {
        okhttp3.Call localVarCall = runValidatorValidateBeforeCall(organizationId, validatorId, validatorRun, null);
        Type localVarReturnType = new TypeToken<ValidatorRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a Validator (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param validatorId the ValidatorRun identifier (required)
     * @param validatorRun the Validator to run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the validator run details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runValidatorAsync(String organizationId, String validatorId, ValidatorRun validatorRun, final ApiCallback<ValidatorRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = runValidatorValidateBeforeCall(organizationId, validatorId, validatorRun, _callback);
        Type localVarReturnType = new TypeToken<ValidatorRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
