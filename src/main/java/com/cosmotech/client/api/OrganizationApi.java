/*
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.1.1
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.ComponentRolePermissions;
import java.io.File;
import com.cosmotech.client.model.Organization;
import com.cosmotech.client.model.OrganizationAccessControl;
import com.cosmotech.client.model.OrganizationRole;
import com.cosmotech.client.model.OrganizationSecurity;
import com.cosmotech.client.model.OrganizationService;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addOrganizationAccessControl
     * @param organizationId the Organization identifier (required)
     * @param organizationAccessControl the new Organization security access to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrganizationAccessControlCall(String organizationId, OrganizationAccessControl organizationAccessControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationAccessControl;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security/access"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrganizationAccessControlValidateBeforeCall(String organizationId, OrganizationAccessControl organizationAccessControl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrganizationAccessControl(Async)");
        }
        
        // verify the required parameter 'organizationAccessControl' is set
        if (organizationAccessControl == null) {
            throw new ApiException("Missing the required parameter 'organizationAccessControl' when calling addOrganizationAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = addOrganizationAccessControlCall(organizationId, organizationAccessControl, _callback);
        return localVarCall;

    }

    /**
     * Add a control access to the Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationAccessControl the new Organization security access to add. (required)
     * @return OrganizationAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationAccessControl addOrganizationAccessControl(String organizationId, OrganizationAccessControl organizationAccessControl) throws ApiException {
        ApiResponse<OrganizationAccessControl> localVarResp = addOrganizationAccessControlWithHttpInfo(organizationId, organizationAccessControl);
        return localVarResp.getData();
    }

    /**
     * Add a control access to the Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationAccessControl the new Organization security access to add. (required)
     * @return ApiResponse&lt;OrganizationAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationAccessControl> addOrganizationAccessControlWithHttpInfo(String organizationId, OrganizationAccessControl organizationAccessControl) throws ApiException {
        okhttp3.Call localVarCall = addOrganizationAccessControlValidateBeforeCall(organizationId, organizationAccessControl, null);
        Type localVarReturnType = new TypeToken<OrganizationAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a control access to the Organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationAccessControl the new Organization security access to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrganizationAccessControlAsync(String organizationId, OrganizationAccessControl organizationAccessControl, final ApiCallback<OrganizationAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrganizationAccessControlValidateBeforeCall(organizationId, organizationAccessControl, _callback);
        Type localVarReturnType = new TypeToken<OrganizationAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllOrganizations
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllOrganizationsCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllOrganizationsValidateBeforeCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findAllOrganizationsCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * List all Organizations
     * 
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Organizations </td><td>  -  </td></tr>
     </table>
     */
    public List<Organization> findAllOrganizations(Integer page, Integer size) throws ApiException {
        ApiResponse<List<Organization>> localVarResp = findAllOrganizationsWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * List all Organizations
     * 
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Organizations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> findAllOrganizationsWithHttpInfo(Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = findAllOrganizationsValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Organizations (asynchronously)
     * 
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllOrganizationsAsync(Integer page, Integer size, final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllOrganizationsValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findOrganizationById
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findOrganizationByIdCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findOrganizationByIdValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findOrganizationById(Async)");
        }
        

        okhttp3.Call localVarCall = findOrganizationByIdCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of an Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Organization findOrganizationById(String organizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = findOrganizationByIdWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get the details of an Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> findOrganizationByIdWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findOrganizationByIdValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of an Organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findOrganizationByIdAsync(String organizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = findOrganizationByIdValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPermissions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Scenarios security permission list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllPermissionsCall(_callback);
        return localVarCall;

    }

    /**
     * Get all permissions per components
     * 
     * @return List&lt;ComponentRolePermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Scenarios security permission list </td><td>  -  </td></tr>
     </table>
     */
    public List<ComponentRolePermissions> getAllPermissions() throws ApiException {
        ApiResponse<List<ComponentRolePermissions>> localVarResp = getAllPermissionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all permissions per components
     * 
     * @return ApiResponse&lt;List&lt;ComponentRolePermissions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Scenarios security permission list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ComponentRolePermissions>> getAllPermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllPermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ComponentRolePermissions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all permissions per components (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Scenarios security permission list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPermissionsAsync(final ApiCallback<List<ComponentRolePermissions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ComponentRolePermissions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationAccessControl
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAccessControlCall(String organizationId, String identityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security/access/{identity_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "identity_id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAccessControlValidateBeforeCall(String organizationId, String identityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationAccessControl(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling getOrganizationAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationAccessControlCall(organizationId, identityId, _callback);
        return localVarCall;

    }

    /**
     * Get a control access for the Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @return OrganizationAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationAccessControl getOrganizationAccessControl(String organizationId, String identityId) throws ApiException {
        ApiResponse<OrganizationAccessControl> localVarResp = getOrganizationAccessControlWithHttpInfo(organizationId, identityId);
        return localVarResp.getData();
    }

    /**
     * Get a control access for the Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @return ApiResponse&lt;OrganizationAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationAccessControl> getOrganizationAccessControlWithHttpInfo(String organizationId, String identityId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAccessControlValidateBeforeCall(organizationId, identityId, null);
        Type localVarReturnType = new TypeToken<OrganizationAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a control access for the Organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationAccessControlAsync(String organizationId, String identityId, final ApiCallback<OrganizationAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAccessControlValidateBeforeCall(organizationId, identityId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationPermissions
     * @param organizationId the Organization identifier (required)
     * @param role the Role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security permission list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPermissionsCall(String organizationId, String role, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/permissions/{role}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "role" + "\\}", localVarApiClient.escapeString(role.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationPermissionsValidateBeforeCall(String organizationId, String role, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationPermissions(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling getOrganizationPermissions(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationPermissionsCall(organizationId, role, _callback);
        return localVarCall;

    }

    /**
     * Get the Organization permissions by given role
     * 
     * @param organizationId the Organization identifier (required)
     * @param role the Role (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security permission list </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganizationPermissions(String organizationId, String role) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganizationPermissionsWithHttpInfo(organizationId, role);
        return localVarResp.getData();
    }

    /**
     * Get the Organization permissions by given role
     * 
     * @param organizationId the Organization identifier (required)
     * @param role the Role (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security permission list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganizationPermissionsWithHttpInfo(String organizationId, String role) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationPermissionsValidateBeforeCall(organizationId, role, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Organization permissions by given role (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param role the Role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security permission list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationPermissionsAsync(String organizationId, String role, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationPermissionsValidateBeforeCall(organizationId, role, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSecurity
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSecurityCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSecurityValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSecurity(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationSecurityCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Get the Organization security information
     * 
     * @param organizationId the Organization identifier (required)
     * @return OrganizationSecurity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationSecurity getOrganizationSecurity(String organizationId) throws ApiException {
        ApiResponse<OrganizationSecurity> localVarResp = getOrganizationSecurityWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get the Organization security information
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;OrganizationSecurity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationSecurity> getOrganizationSecurityWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSecurityValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<OrganizationSecurity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Organization security information (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSecurityAsync(String organizationId, final ApiCallback<OrganizationSecurity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSecurityValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationSecurity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationSecurityUsers
     * @param organizationId The Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSecurityUsersCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security/users"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationSecurityUsersValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationSecurityUsers(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationSecurityUsersCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Get the Organization security users list
     * 
     * @param organizationId The Organization identifier (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganizationSecurityUsers(String organizationId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganizationSecurityUsersWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get the Organization security users list
     * 
     * @param organizationId The Organization identifier (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganizationSecurityUsersWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationSecurityUsersValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Organization security users list (asynchronously)
     * 
     * @param organizationId The Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationSecurityUsersAsync(String organizationId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationSecurityUsersValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerOrganization
     * @param organization the Organization to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerOrganizationCall(Organization organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organization;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerOrganizationValidateBeforeCall(Organization organization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling registerOrganization(Async)");
        }
        

        okhttp3.Call localVarCall = registerOrganizationCall(organization, _callback);
        return localVarCall;

    }

    /**
     * Register a new organization
     * 
     * @param organization the Organization to register (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Organization registerOrganization(Organization organization) throws ApiException {
        ApiResponse<Organization> localVarResp = registerOrganizationWithHttpInfo(organization);
        return localVarResp.getData();
    }

    /**
     * Register a new organization
     * 
     * @param organization the Organization to register (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> registerOrganizationWithHttpInfo(Organization organization) throws ApiException {
        okhttp3.Call localVarCall = registerOrganizationValidateBeforeCall(organization, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new organization (asynchronously)
     * 
     * @param organization the Organization to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerOrganizationAsync(Organization organization, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerOrganizationValidateBeforeCall(organization, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOrganizationAccessControl
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrganizationAccessControlCall(String organizationId, String identityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security/access/{identity_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "identity_id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOrganizationAccessControlValidateBeforeCall(String organizationId, String identityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeOrganizationAccessControl(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling removeOrganizationAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = removeOrganizationAccessControlCall(organizationId, identityId, _callback);
        return localVarCall;

    }

    /**
     * Remove the specified access from the given Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public void removeOrganizationAccessControl(String organizationId, String identityId) throws ApiException {
        removeOrganizationAccessControlWithHttpInfo(organizationId, identityId);
    }

    /**
     * Remove the specified access from the given Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeOrganizationAccessControlWithHttpInfo(String organizationId, String identityId) throws ApiException {
        okhttp3.Call localVarCall = removeOrganizationAccessControlValidateBeforeCall(organizationId, identityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove the specified access from the given Organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrganizationAccessControlAsync(String organizationId, String identityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOrganizationAccessControlValidateBeforeCall(organizationId, identityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setOrganizationDefaultSecurity
     * @param organizationId the Organization identifier (required)
     * @param organizationRole This change the organization default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrganizationDefaultSecurityCall(String organizationId, OrganizationRole organizationRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationRole;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security/default"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOrganizationDefaultSecurityValidateBeforeCall(String organizationId, OrganizationRole organizationRole, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling setOrganizationDefaultSecurity(Async)");
        }
        
        // verify the required parameter 'organizationRole' is set
        if (organizationRole == null) {
            throw new ApiException("Missing the required parameter 'organizationRole' when calling setOrganizationDefaultSecurity(Async)");
        }
        

        okhttp3.Call localVarCall = setOrganizationDefaultSecurityCall(organizationId, organizationRole, _callback);
        return localVarCall;

    }

    /**
     * Set the Organization default security
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationRole This change the organization default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the organization. (required)
     * @return OrganizationSecurity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationSecurity setOrganizationDefaultSecurity(String organizationId, OrganizationRole organizationRole) throws ApiException {
        ApiResponse<OrganizationSecurity> localVarResp = setOrganizationDefaultSecurityWithHttpInfo(organizationId, organizationRole);
        return localVarResp.getData();
    }

    /**
     * Set the Organization default security
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationRole This change the organization default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the organization. (required)
     * @return ApiResponse&lt;OrganizationSecurity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationSecurity> setOrganizationDefaultSecurityWithHttpInfo(String organizationId, OrganizationRole organizationRole) throws ApiException {
        okhttp3.Call localVarCall = setOrganizationDefaultSecurityValidateBeforeCall(organizationId, organizationRole, null);
        Type localVarReturnType = new TypeToken<OrganizationSecurity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Organization default security (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationRole This change the organization default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Organization default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrganizationDefaultSecurityAsync(String organizationId, OrganizationRole organizationRole, final ApiCallback<OrganizationSecurity> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOrganizationDefaultSecurityValidateBeforeCall(organizationId, organizationRole, _callback);
        Type localVarReturnType = new TypeToken<OrganizationSecurity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unregisterOrganization
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unregisterOrganizationCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unregisterOrganizationValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling unregisterOrganization(Async)");
        }
        

        okhttp3.Call localVarCall = unregisterOrganizationCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Unregister an organization
     * 
     * @param organizationId the Organization identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void unregisterOrganization(String organizationId) throws ApiException {
        unregisterOrganizationWithHttpInfo(organizationId);
    }

    /**
     * Unregister an organization
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unregisterOrganizationWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = unregisterOrganizationValidateBeforeCall(organizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unregister an organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unregisterOrganizationAsync(String organizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unregisterOrganizationValidateBeforeCall(organizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganization
     * @param organizationId the Organization identifier (required)
     * @param organization the new Organization details. This endpoint can&#39;t be used to update security (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationCall(String organizationId, Organization organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organization;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationValidateBeforeCall(String organizationId, Organization organization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganization(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling updateOrganization(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrganizationCall(organizationId, organization, _callback);
        return localVarCall;

    }

    /**
     * Update an Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param organization the new Organization details. This endpoint can&#39;t be used to update security (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Organization updateOrganization(String organizationId, Organization organization) throws ApiException {
        ApiResponse<Organization> localVarResp = updateOrganizationWithHttpInfo(organizationId, organization);
        return localVarResp.getData();
    }

    /**
     * Update an Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param organization the new Organization details. This endpoint can&#39;t be used to update security (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> updateOrganizationWithHttpInfo(String organizationId, Organization organization) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationValidateBeforeCall(organizationId, organization, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param organization the new Organization details. This endpoint can&#39;t be used to update security (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the organization details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAsync(String organizationId, Organization organization, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationValidateBeforeCall(organizationId, organization, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationAccessControl
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param organizationRole The new Organization Access Control (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAccessControlCall(String organizationId, String identityId, OrganizationRole organizationRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationRole;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/security/access/{identity_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "identity_id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationAccessControlValidateBeforeCall(String organizationId, String identityId, OrganizationRole organizationRole, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationAccessControl(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling updateOrganizationAccessControl(Async)");
        }
        
        // verify the required parameter 'organizationRole' is set
        if (organizationRole == null) {
            throw new ApiException("Missing the required parameter 'organizationRole' when calling updateOrganizationAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrganizationAccessControlCall(organizationId, identityId, organizationRole, _callback);
        return localVarCall;

    }

    /**
     * Update the specified access to User for an Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param organizationRole The new Organization Access Control (required)
     * @return OrganizationAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationAccessControl updateOrganizationAccessControl(String organizationId, String identityId, OrganizationRole organizationRole) throws ApiException {
        ApiResponse<OrganizationAccessControl> localVarResp = updateOrganizationAccessControlWithHttpInfo(organizationId, identityId, organizationRole);
        return localVarResp.getData();
    }

    /**
     * Update the specified access to User for an Organization
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param organizationRole The new Organization Access Control (required)
     * @return ApiResponse&lt;OrganizationAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationAccessControl> updateOrganizationAccessControlWithHttpInfo(String organizationId, String identityId, OrganizationRole organizationRole) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationAccessControlValidateBeforeCall(organizationId, identityId, organizationRole, null);
        Type localVarReturnType = new TypeToken<OrganizationAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the specified access to User for an Organization (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param identityId the User identifier (required)
     * @param organizationRole The new Organization Access Control (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Organization access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrganizationAccessControlAsync(String organizationId, String identityId, OrganizationRole organizationRole, final ApiCallback<OrganizationAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationAccessControlValidateBeforeCall(organizationId, identityId, organizationRole, _callback);
        Type localVarReturnType = new TypeToken<OrganizationAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSolutionsContainerRegistryByOrganizationId
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new solutions container registry configuration to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization solutions container registry configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionsContainerRegistryByOrganizationIdCall(String organizationId, OrganizationService organizationService, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationService;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/services/solutionsContainerRegistry"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSolutionsContainerRegistryByOrganizationIdValidateBeforeCall(String organizationId, OrganizationService organizationService, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateSolutionsContainerRegistryByOrganizationId(Async)");
        }
        
        // verify the required parameter 'organizationService' is set
        if (organizationService == null) {
            throw new ApiException("Missing the required parameter 'organizationService' when calling updateSolutionsContainerRegistryByOrganizationId(Async)");
        }
        

        okhttp3.Call localVarCall = updateSolutionsContainerRegistryByOrganizationIdCall(organizationId, organizationService, _callback);
        return localVarCall;

    }

    /**
     * Update the solutions container registry configuration for the Organization specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new solutions container registry configuration to use (required)
     * @return OrganizationService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization solutions container registry configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationService updateSolutionsContainerRegistryByOrganizationId(String organizationId, OrganizationService organizationService) throws ApiException {
        ApiResponse<OrganizationService> localVarResp = updateSolutionsContainerRegistryByOrganizationIdWithHttpInfo(organizationId, organizationService);
        return localVarResp.getData();
    }

    /**
     * Update the solutions container registry configuration for the Organization specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new solutions container registry configuration to use (required)
     * @return ApiResponse&lt;OrganizationService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization solutions container registry configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationService> updateSolutionsContainerRegistryByOrganizationIdWithHttpInfo(String organizationId, OrganizationService organizationService) throws ApiException {
        okhttp3.Call localVarCall = updateSolutionsContainerRegistryByOrganizationIdValidateBeforeCall(organizationId, organizationService, null);
        Type localVarReturnType = new TypeToken<OrganizationService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the solutions container registry configuration for the Organization specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new solutions container registry configuration to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization solutions container registry configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSolutionsContainerRegistryByOrganizationIdAsync(String organizationId, OrganizationService organizationService, final ApiCallback<OrganizationService> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSolutionsContainerRegistryByOrganizationIdValidateBeforeCall(organizationId, organizationService, _callback);
        Type localVarReturnType = new TypeToken<OrganizationService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStorageByOrganizationId
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new Storage configuration to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Storage configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStorageByOrganizationIdCall(String organizationId, OrganizationService organizationService, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationService;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/services/storage"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStorageByOrganizationIdValidateBeforeCall(String organizationId, OrganizationService organizationService, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateStorageByOrganizationId(Async)");
        }
        
        // verify the required parameter 'organizationService' is set
        if (organizationService == null) {
            throw new ApiException("Missing the required parameter 'organizationService' when calling updateStorageByOrganizationId(Async)");
        }
        

        okhttp3.Call localVarCall = updateStorageByOrganizationIdCall(organizationId, organizationService, _callback);
        return localVarCall;

    }

    /**
     * Update storage configuration for the Organization specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new Storage configuration to use (required)
     * @return OrganizationService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Storage configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationService updateStorageByOrganizationId(String organizationId, OrganizationService organizationService) throws ApiException {
        ApiResponse<OrganizationService> localVarResp = updateStorageByOrganizationIdWithHttpInfo(organizationId, organizationService);
        return localVarResp.getData();
    }

    /**
     * Update storage configuration for the Organization specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new Storage configuration to use (required)
     * @return ApiResponse&lt;OrganizationService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Storage configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationService> updateStorageByOrganizationIdWithHttpInfo(String organizationId, OrganizationService organizationService) throws ApiException {
        okhttp3.Call localVarCall = updateStorageByOrganizationIdValidateBeforeCall(organizationId, organizationService, null);
        Type localVarReturnType = new TypeToken<OrganizationService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update storage configuration for the Organization specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param organizationService the new Storage configuration to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Storage configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStorageByOrganizationIdAsync(String organizationId, OrganizationService organizationService, final ApiCallback<OrganizationService> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStorageByOrganizationIdValidateBeforeCall(organizationId, organizationService, _callback);
        Type localVarReturnType = new TypeToken<OrganizationService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTenantCredentialsByOrganizationId
     * @param organizationId the Organization identifier (required)
     * @param requestBody the new Tenant Credentials to use (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Tenant Credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTenantCredentialsByOrganizationIdCall(String organizationId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/services/tenantCredentials"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTenantCredentialsByOrganizationIdValidateBeforeCall(String organizationId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateTenantCredentialsByOrganizationId(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateTenantCredentialsByOrganizationId(Async)");
        }
        

        okhttp3.Call localVarCall = updateTenantCredentialsByOrganizationIdCall(organizationId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Update tenant credentials for the Organization specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param requestBody the new Tenant Credentials to use (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Tenant Credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> updateTenantCredentialsByOrganizationId(String organizationId, Map<String, Object> requestBody) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = updateTenantCredentialsByOrganizationIdWithHttpInfo(organizationId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update tenant credentials for the Organization specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param requestBody the new Tenant Credentials to use (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Tenant Credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> updateTenantCredentialsByOrganizationIdWithHttpInfo(String organizationId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateTenantCredentialsByOrganizationIdValidateBeforeCall(organizationId, requestBody, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update tenant credentials for the Organization specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param requestBody the new Tenant Credentials to use (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Organization Tenant Credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Organization specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTenantCredentialsByOrganizationIdAsync(String organizationId, Map<String, Object> requestBody, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTenantCredentialsByOrganizationIdValidateBeforeCall(organizationId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
