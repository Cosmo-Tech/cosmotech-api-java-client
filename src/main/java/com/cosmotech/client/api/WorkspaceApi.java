/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 1.0.2-dev
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cosmotech.client.model.Workspace;
import com.cosmotech.client.model.WorkspaceFile;
import com.cosmotech.client.model.WorkspaceUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkspaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addOrReplaceUsersInOrganizationWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspaceUser the Users to add. Any User with the same ID is overwritten (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace Users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceUsersInOrganizationWorkspaceCall(String organizationId, String workspaceId, List<WorkspaceUser> workspaceUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUser;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/users"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceUsersInOrganizationWorkspaceValidateBeforeCall(String organizationId, String workspaceId, List<WorkspaceUser> workspaceUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrReplaceUsersInOrganizationWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling addOrReplaceUsersInOrganizationWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceUser' is set
        if (workspaceUser == null) {
            throw new ApiException("Missing the required parameter 'workspaceUser' when calling addOrReplaceUsersInOrganizationWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceUsersInOrganizationWorkspaceCall(organizationId, workspaceId, workspaceUser, _callback);
        return localVarCall;

    }

    /**
     * Add (or replace) users to the Workspace specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspaceUser the Users to add. Any User with the same ID is overwritten (required)
     * @return List&lt;WorkspaceUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace Users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkspaceUser> addOrReplaceUsersInOrganizationWorkspace(String organizationId, String workspaceId, List<WorkspaceUser> workspaceUser) throws ApiException {
        ApiResponse<List<WorkspaceUser>> localVarResp = addOrReplaceUsersInOrganizationWorkspaceWithHttpInfo(organizationId, workspaceId, workspaceUser);
        return localVarResp.getData();
    }

    /**
     * Add (or replace) users to the Workspace specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspaceUser the Users to add. Any User with the same ID is overwritten (required)
     * @return ApiResponse&lt;List&lt;WorkspaceUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace Users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkspaceUser>> addOrReplaceUsersInOrganizationWorkspaceWithHttpInfo(String organizationId, String workspaceId, List<WorkspaceUser> workspaceUser) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceUsersInOrganizationWorkspaceValidateBeforeCall(organizationId, workspaceId, workspaceUser, null);
        Type localVarReturnType = new TypeToken<List<WorkspaceUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add (or replace) users to the Workspace specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspaceUser the Users to add. Any User with the same ID is overwritten (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace Users </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceUsersInOrganizationWorkspaceAsync(String organizationId, String workspaceId, List<WorkspaceUser> workspaceUser, final ApiCallback<List<WorkspaceUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceUsersInOrganizationWorkspaceValidateBeforeCall(organizationId, workspaceId, workspaceUser, _callback);
        Type localVarReturnType = new TypeToken<List<WorkspaceUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceCall(String organizationId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspace;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkspaceValidateBeforeCall(String organizationId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createWorkspace(Async)");
        }
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = createWorkspaceCall(organizationId, workspace, _callback);
        return localVarCall;

    }

    /**
     * Create a new workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Workspace createWorkspace(String organizationId, Workspace workspace) throws ApiException {
        ApiResponse<Workspace> localVarResp = createWorkspaceWithHttpInfo(organizationId, workspace);
        return localVarResp.getData();
    }

    /**
     * Create a new workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> createWorkspaceWithHttpInfo(String organizationId, Workspace workspace) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(organizationId, workspace, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceAsync(String organizationId, Workspace workspace, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(organizationId, workspace, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAllWorkspaceFiles
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllWorkspaceFilesCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/files"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllWorkspaceFilesValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteAllWorkspaceFiles(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteAllWorkspaceFiles(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAllWorkspaceFilesCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Delete all Workspace files
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAllWorkspaceFiles(String organizationId, String workspaceId) throws ApiException {
        deleteAllWorkspaceFilesWithHttpInfo(organizationId, workspaceId);
    }

    /**
     * Delete all Workspace files
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAllWorkspaceFilesWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteAllWorkspaceFilesValidateBeforeCall(organizationId, workspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all Workspace files (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllWorkspaceFilesAsync(String organizationId, String workspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllWorkspaceFilesValidateBeforeCall(organizationId, workspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWorkspaceCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Delete a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Workspace deleteWorkspace(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<Workspace> localVarResp = deleteWorkspaceWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * Delete a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> deleteWorkspaceWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceAsync(String organizationId, String workspaceId, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspaceFile
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the file specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceFileCall(String organizationId, String workspaceId, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/files/delete"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceFileValidateBeforeCall(String organizationId, String workspaceId, String fileName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteWorkspaceFile(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteWorkspaceFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling deleteWorkspaceFile(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWorkspaceFileCall(organizationId, workspaceId, fileName, _callback);
        return localVarCall;

    }

    /**
     * Delete a workspace file
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the file specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorkspaceFile(String organizationId, String workspaceId, String fileName) throws ApiException {
        deleteWorkspaceFileWithHttpInfo(organizationId, workspaceId, fileName);
    }

    /**
     * Delete a workspace file
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the file specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkspaceFileWithHttpInfo(String organizationId, String workspaceId, String fileName) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceFileValidateBeforeCall(organizationId, workspaceId, fileName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a workspace file (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the file specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceFileAsync(String organizationId, String workspaceId, String fileName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceFileValidateBeforeCall(organizationId, workspaceId, fileName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadWorkspaceFile
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadWorkspaceFileCall(String organizationId, String workspaceId, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/files/download"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadWorkspaceFileValidateBeforeCall(String organizationId, String workspaceId, String fileName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling downloadWorkspaceFile(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling downloadWorkspaceFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling downloadWorkspaceFile(Async)");
        }
        

        okhttp3.Call localVarCall = downloadWorkspaceFileCall(organizationId, workspaceId, fileName, _callback);
        return localVarCall;

    }

    /**
     * Download the Workspace File specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public File downloadWorkspaceFile(String organizationId, String workspaceId, String fileName) throws ApiException {
        ApiResponse<File> localVarResp = downloadWorkspaceFileWithHttpInfo(organizationId, workspaceId, fileName);
        return localVarResp.getData();
    }

    /**
     * Download the Workspace File specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadWorkspaceFileWithHttpInfo(String organizationId, String workspaceId, String fileName) throws ApiException {
        okhttp3.Call localVarCall = downloadWorkspaceFileValidateBeforeCall(organizationId, workspaceId, fileName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the Workspace File specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param fileName the file name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace file as a resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace file specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadWorkspaceFileAsync(String organizationId, String workspaceId, String fileName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadWorkspaceFileValidateBeforeCall(organizationId, workspaceId, fileName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllWorkspaceFiles
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace files </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWorkspaceFilesCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/files"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllWorkspaceFilesValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllWorkspaceFiles(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling findAllWorkspaceFiles(Async)");
        }
        

        okhttp3.Call localVarCall = findAllWorkspaceFilesCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * List all Workspace files
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return List&lt;WorkspaceFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace files </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkspaceFile> findAllWorkspaceFiles(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<List<WorkspaceFile>> localVarResp = findAllWorkspaceFilesWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * List all Workspace files
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;List&lt;WorkspaceFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace files </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkspaceFile>> findAllWorkspaceFilesWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = findAllWorkspaceFilesValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<List<WorkspaceFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Workspace files (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace files </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWorkspaceFilesAsync(String organizationId, String workspaceId, final ApiCallback<List<WorkspaceFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllWorkspaceFilesValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<List<WorkspaceFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllWorkspaces
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWorkspacesCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllWorkspacesValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllWorkspaces(Async)");
        }
        

        okhttp3.Call localVarCall = findAllWorkspacesCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * List all Workspaces
     * 
     * @param organizationId the Organization identifier (required)
     * @return List&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public List<Workspace> findAllWorkspaces(String organizationId) throws ApiException {
        ApiResponse<List<Workspace>> localVarResp = findAllWorkspacesWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Workspaces
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;Workspace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Workspace>> findAllWorkspacesWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllWorkspacesValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Workspace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Workspaces (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWorkspacesAsync(String organizationId, final ApiCallback<List<Workspace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllWorkspacesValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Workspace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findWorkspaceById
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWorkspaceByIdCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWorkspaceByIdValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findWorkspaceById(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling findWorkspaceById(Async)");
        }
        

        okhttp3.Call localVarCall = findWorkspaceByIdCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of an workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Workspace findWorkspaceById(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<Workspace> localVarResp = findWorkspaceByIdWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * Get the details of an workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> findWorkspaceByIdWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = findWorkspaceByIdValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of an workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWorkspaceByIdAsync(String organizationId, String workspaceId, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWorkspaceByIdValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllUsersOfWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllUsersOfWorkspaceCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/users"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllUsersOfWorkspaceValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeAllUsersOfWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling removeAllUsersOfWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllUsersOfWorkspaceCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Remove all users from the Workspace specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void removeAllUsersOfWorkspace(String organizationId, String workspaceId) throws ApiException {
        removeAllUsersOfWorkspaceWithHttpInfo(organizationId, workspaceId);
    }

    /**
     * Remove all users from the Workspace specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAllUsersOfWorkspaceWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = removeAllUsersOfWorkspaceValidateBeforeCall(organizationId, workspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all users from the Workspace specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllUsersOfWorkspaceAsync(String organizationId, String workspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllUsersOfWorkspaceValidateBeforeCall(organizationId, workspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUserFromOrganizationWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param userId the User identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserFromOrganizationWorkspaceCall(String organizationId, String workspaceId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/users/{user_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromOrganizationWorkspaceValidateBeforeCall(String organizationId, String workspaceId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeUserFromOrganizationWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling removeUserFromOrganizationWorkspace(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFromOrganizationWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = removeUserFromOrganizationWorkspaceCall(organizationId, workspaceId, userId, _callback);
        return localVarCall;

    }

    /**
     * Remove the specified user from the given Organization Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param userId the User identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public void removeUserFromOrganizationWorkspace(String organizationId, String workspaceId, String userId) throws ApiException {
        removeUserFromOrganizationWorkspaceWithHttpInfo(organizationId, workspaceId, userId);
    }

    /**
     * Remove the specified user from the given Organization Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param userId the User identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeUserFromOrganizationWorkspaceWithHttpInfo(String organizationId, String workspaceId, String userId) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromOrganizationWorkspaceValidateBeforeCall(organizationId, workspaceId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove the specified user from the given Organization Workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param userId the User identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUserFromOrganizationWorkspaceAsync(String organizationId, String workspaceId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromOrganizationWorkspaceValidateBeforeCall(organizationId, workspaceId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceCall(String organizationId, String workspaceId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspace;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceValidateBeforeCall(String organizationId, String workspaceId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling updateWorkspace(Async)");
        }
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = updateWorkspaceCall(organizationId, workspaceId, workspace, _callback);
        return localVarCall;

    }

    /**
     * Update a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Workspace updateWorkspace(String organizationId, String workspaceId, Workspace workspace) throws ApiException {
        ApiResponse<Workspace> localVarResp = updateWorkspaceWithHttpInfo(organizationId, workspaceId, workspace);
        return localVarResp.getData();
    }

    /**
     * Update a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> updateWorkspaceWithHttpInfo(String organizationId, String workspaceId, Workspace workspace) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(organizationId, workspaceId, workspace, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceAsync(String organizationId, String workspaceId, Workspace workspace, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(organizationId, workspaceId, workspace, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadWorkspaceFile
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _file  (required)
     * @param overwrite  (optional, default to false)
     * @param destination Destination path. Must end with a &#39;/&#39; if specifying a folder. Note that paths may or may not start with a &#39;/&#39;, but they are always treated as relative to the Workspace root location.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the file resource details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadWorkspaceFileCall(String organizationId, String workspaceId, File _file, Boolean overwrite, String destination, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/files"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (overwrite != null) {
            localVarFormParams.put("overwrite", overwrite);
        }

        if (destination != null) {
            localVarFormParams.put("destination", destination);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadWorkspaceFileValidateBeforeCall(String organizationId, String workspaceId, File _file, Boolean overwrite, String destination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling uploadWorkspaceFile(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling uploadWorkspaceFile(Async)");
        }
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadWorkspaceFile(Async)");
        }
        

        okhttp3.Call localVarCall = uploadWorkspaceFileCall(organizationId, workspaceId, _file, overwrite, destination, _callback);
        return localVarCall;

    }

    /**
     * Upload a file for the Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _file  (required)
     * @param overwrite  (optional, default to false)
     * @param destination Destination path. Must end with a &#39;/&#39; if specifying a folder. Note that paths may or may not start with a &#39;/&#39;, but they are always treated as relative to the Workspace root location.  (optional)
     * @return WorkspaceFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the file resource details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceFile uploadWorkspaceFile(String organizationId, String workspaceId, File _file, Boolean overwrite, String destination) throws ApiException {
        ApiResponse<WorkspaceFile> localVarResp = uploadWorkspaceFileWithHttpInfo(organizationId, workspaceId, _file, overwrite, destination);
        return localVarResp.getData();
    }

    /**
     * Upload a file for the Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _file  (required)
     * @param overwrite  (optional, default to false)
     * @param destination Destination path. Must end with a &#39;/&#39; if specifying a folder. Note that paths may or may not start with a &#39;/&#39;, but they are always treated as relative to the Workspace root location.  (optional)
     * @return ApiResponse&lt;WorkspaceFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the file resource details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspaceFile> uploadWorkspaceFileWithHttpInfo(String organizationId, String workspaceId, File _file, Boolean overwrite, String destination) throws ApiException {
        okhttp3.Call localVarCall = uploadWorkspaceFileValidateBeforeCall(organizationId, workspaceId, _file, overwrite, destination, null);
        Type localVarReturnType = new TypeToken<WorkspaceFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a file for the Workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _file  (required)
     * @param overwrite  (optional, default to false)
     * @param destination Destination path. Must end with a &#39;/&#39; if specifying a folder. Note that paths may or may not start with a &#39;/&#39;, but they are always treated as relative to the Workspace root location.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the file resource details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadWorkspaceFileAsync(String organizationId, String workspaceId, File _file, Boolean overwrite, String destination, final ApiCallback<WorkspaceFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadWorkspaceFileValidateBeforeCall(organizationId, workspaceId, _file, overwrite, destination, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
