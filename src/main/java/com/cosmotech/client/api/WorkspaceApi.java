/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.Workspace;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkspaceApi {
    private ApiClient localVarApiClient;

    public WorkspaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceCall(String organizationId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = workspace;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkspaceValidateBeforeCall(String organizationId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createWorkspace(Async)");
        }
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = createWorkspaceCall(organizationId, workspace, _callback);
        return localVarCall;

    }

    /**
     * Create a new workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Workspace createWorkspace(String organizationId, Workspace workspace) throws ApiException {
        ApiResponse<Workspace> localVarResp = createWorkspaceWithHttpInfo(organizationId, workspace);
        return localVarResp.getData();
    }

    /**
     * Create a new workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> createWorkspaceWithHttpInfo(String organizationId, Workspace workspace) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(organizationId, workspace, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspace the Workspace to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceAsync(String organizationId, Workspace workspace, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(organizationId, workspace, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWorkspaceCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Delete a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Workspace deleteWorkspace(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<Workspace> localVarResp = deleteWorkspaceWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * Delete a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> deleteWorkspaceWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceAsync(String organizationId, String workspaceId, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllWorkspaces
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWorkspacesCall(String organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllWorkspacesValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllWorkspaces(Async)");
        }
        

        okhttp3.Call localVarCall = findAllWorkspacesCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * List all Workspaces
     * 
     * @param organizationId the Organization identifier (required)
     * @return List&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public List<Workspace> findAllWorkspaces(String organizationId) throws ApiException {
        ApiResponse<List<Workspace>> localVarResp = findAllWorkspacesWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Workspaces
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;Workspace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Workspace>> findAllWorkspacesWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllWorkspacesValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Workspace>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Workspaces (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWorkspacesAsync(String organizationId, final ApiCallback<List<Workspace>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllWorkspacesValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Workspace>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findWorkspaceById
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWorkspaceByIdCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWorkspaceByIdValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findWorkspaceById(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling findWorkspaceById(Async)");
        }
        

        okhttp3.Call localVarCall = findWorkspaceByIdCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of an workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Workspace findWorkspaceById(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<Workspace> localVarResp = findWorkspaceByIdWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * Get the details of an workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> findWorkspaceByIdWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = findWorkspaceByIdValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of an workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Workspace details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWorkspaceByIdAsync(String organizationId, String workspaceId, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWorkspaceByIdValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkspace
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceCall(String organizationId, String workspaceId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = workspace;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceValidateBeforeCall(String organizationId, String workspaceId, Workspace workspace, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling updateWorkspace(Async)");
        }
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = updateWorkspaceCall(organizationId, workspaceId, workspace, _callback);
        return localVarCall;

    }

    /**
     * Update a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @return Workspace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Workspace updateWorkspace(String organizationId, String workspaceId, Workspace workspace) throws ApiException {
        ApiResponse<Workspace> localVarResp = updateWorkspaceWithHttpInfo(organizationId, workspaceId, workspace);
        return localVarResp.getData();
    }

    /**
     * Update a workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @return ApiResponse&lt;Workspace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workspace> updateWorkspaceWithHttpInfo(String organizationId, String workspaceId, Workspace workspace) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(organizationId, workspaceId, workspace, null);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param workspace the new Workspace details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the workspace details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Workspace specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceAsync(String organizationId, String workspaceId, Workspace workspace, final ApiCallback<Workspace> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(organizationId, workspaceId, workspace, _callback);
        Type localVarReturnType = new TypeToken<Workspace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
