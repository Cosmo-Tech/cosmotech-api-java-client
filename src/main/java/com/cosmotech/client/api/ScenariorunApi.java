/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.ScenarioRun;
import com.cosmotech.client.model.ScenarioRunBase;
import com.cosmotech.client.model.ScenarioRunLogs;
import com.cosmotech.client.model.ScenarioRunLogsOptions;
import com.cosmotech.client.model.ScenarioRunSearch;
import com.cosmotech.client.model.ScenarioRunStart;
import com.cosmotech.client.model.ScenarioRunStartContainers;
import com.cosmotech.client.model.ScenarioRunStartSolution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScenariorunApi {
    private ApiClient localVarApiClient;

    public ScenariorunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScenariorunApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteScenarioRun
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScenarioRunCall(String organizationId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/{scenariorun_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "scenariorun_id" + "\\}", localVarApiClient.escapeString(scenariorunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScenarioRunValidateBeforeCall(String organizationId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteScenarioRun(Async)");
        }
        
        // verify the required parameter 'scenariorunId' is set
        if (scenariorunId == null) {
            throw new ApiException("Missing the required parameter 'scenariorunId' when calling deleteScenarioRun(Async)");
        }
        

        okhttp3.Call localVarCall = deleteScenarioRunCall(organizationId, scenariorunId, _callback);
        return localVarCall;

    }

    /**
     * Delete a scenariorun
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ScenarioRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRun deleteScenarioRun(String organizationId, String scenariorunId) throws ApiException {
        ApiResponse<ScenarioRun> localVarResp = deleteScenarioRunWithHttpInfo(organizationId, scenariorunId);
        return localVarResp.getData();
    }

    /**
     * Delete a scenariorun
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ApiResponse&lt;ScenarioRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRun> deleteScenarioRunWithHttpInfo(String organizationId, String scenariorunId) throws ApiException {
        okhttp3.Call localVarCall = deleteScenarioRunValidateBeforeCall(organizationId, scenariorunId, null);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a scenariorun (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScenarioRunAsync(String organizationId, String scenariorunId, final ApiCallback<ScenarioRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScenarioRunValidateBeforeCall(organizationId, scenariorunId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findScenarioRunById
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findScenarioRunByIdCall(String organizationId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/{scenariorun_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "scenariorun_id" + "\\}", localVarApiClient.escapeString(scenariorunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findScenarioRunByIdValidateBeforeCall(String organizationId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findScenarioRunById(Async)");
        }
        
        // verify the required parameter 'scenariorunId' is set
        if (scenariorunId == null) {
            throw new ApiException("Missing the required parameter 'scenariorunId' when calling findScenarioRunById(Async)");
        }
        

        okhttp3.Call localVarCall = findScenarioRunByIdCall(organizationId, scenariorunId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a scenariorun
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ScenarioRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRun findScenarioRunById(String organizationId, String scenariorunId) throws ApiException {
        ApiResponse<ScenarioRun> localVarResp = findScenarioRunByIdWithHttpInfo(organizationId, scenariorunId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a scenariorun
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ApiResponse&lt;ScenarioRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRun> findScenarioRunByIdWithHttpInfo(String organizationId, String scenariorunId) throws ApiException {
        okhttp3.Call localVarCall = findScenarioRunByIdValidateBeforeCall(organizationId, scenariorunId, null);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a scenariorun (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findScenarioRunByIdAsync(String organizationId, String scenariorunId, final ApiCallback<ScenarioRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = findScenarioRunByIdValidateBeforeCall(organizationId, scenariorunId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenarioScenarioRun
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioScenarioRunCall(String organizationId, String workspaceId, String scenarioId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "scenariorun_id" + "\\}", localVarApiClient.escapeString(scenariorunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioScenarioRunValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenarioScenarioRun(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenarioScenarioRun(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getScenarioScenarioRun(Async)");
        }
        
        // verify the required parameter 'scenariorunId' is set
        if (scenariorunId == null) {
            throw new ApiException("Missing the required parameter 'scenariorunId' when calling getScenarioScenarioRun(Async)");
        }
        

        okhttp3.Call localVarCall = getScenarioScenarioRunCall(organizationId, workspaceId, scenarioId, scenariorunId, _callback);
        return localVarCall;

    }

    /**
     * get the ScenarioRun for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ScenarioRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRun getScenarioScenarioRun(String organizationId, String workspaceId, String scenarioId, String scenariorunId) throws ApiException {
        ApiResponse<ScenarioRun> localVarResp = getScenarioScenarioRunWithHttpInfo(organizationId, workspaceId, scenarioId, scenariorunId);
        return localVarResp.getData();
    }

    /**
     * get the ScenarioRun for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ApiResponse&lt;ScenarioRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRun> getScenarioScenarioRunWithHttpInfo(String organizationId, String workspaceId, String scenarioId, String scenariorunId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioScenarioRunValidateBeforeCall(organizationId, workspaceId, scenarioId, scenariorunId, null);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the ScenarioRun for the Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioScenarioRunAsync(String organizationId, String workspaceId, String scenarioId, String scenariorunId, final ApiCallback<ScenarioRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioScenarioRunValidateBeforeCall(organizationId, workspaceId, scenarioId, scenariorunId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenarioScenarioRunLogs
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun logs details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioScenarioRunLogsCall(String organizationId, String workspaceId, String scenarioId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}/logs"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "scenariorun_id" + "\\}", localVarApiClient.escapeString(scenariorunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioScenarioRunLogsValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, String scenariorunId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenarioScenarioRunLogs(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenarioScenarioRunLogs(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getScenarioScenarioRunLogs(Async)");
        }
        
        // verify the required parameter 'scenariorunId' is set
        if (scenariorunId == null) {
            throw new ApiException("Missing the required parameter 'scenariorunId' when calling getScenarioScenarioRunLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getScenarioScenarioRunLogsCall(organizationId, workspaceId, scenarioId, scenariorunId, _callback);
        return localVarCall;

    }

    /**
     * get the logs for the ScenarioRun
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ScenarioRunLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun logs details </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRunLogs getScenarioScenarioRunLogs(String organizationId, String workspaceId, String scenarioId, String scenariorunId) throws ApiException {
        ApiResponse<ScenarioRunLogs> localVarResp = getScenarioScenarioRunLogsWithHttpInfo(organizationId, workspaceId, scenarioId, scenariorunId);
        return localVarResp.getData();
    }

    /**
     * get the logs for the ScenarioRun
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @return ApiResponse&lt;ScenarioRunLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun logs details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRunLogs> getScenarioScenarioRunLogsWithHttpInfo(String organizationId, String workspaceId, String scenarioId, String scenariorunId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioScenarioRunLogsValidateBeforeCall(organizationId, workspaceId, scenarioId, scenariorunId, null);
        Type localVarReturnType = new TypeToken<ScenarioRunLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the logs for the ScenarioRun (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun logs details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioScenarioRunLogsAsync(String organizationId, String workspaceId, String scenarioId, String scenariorunId, final ApiCallback<ScenarioRunLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioScenarioRunLogsValidateBeforeCall(organizationId, workspaceId, scenarioId, scenariorunId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRunLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenarioScenarioRuns
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioScenarioRunsCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioScenarioRunsValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenarioScenarioRuns(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenarioScenarioRuns(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getScenarioScenarioRuns(Async)");
        }
        

        okhttp3.Call localVarCall = getScenarioScenarioRunsCall(organizationId, workspaceId, scenarioId, _callback);
        return localVarCall;

    }

    /**
     * get the list of ScenarioRuns for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return List&lt;ScenarioRunBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioRunBase> getScenarioScenarioRuns(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        ApiResponse<List<ScenarioRunBase>> localVarResp = getScenarioScenarioRunsWithHttpInfo(organizationId, workspaceId, scenarioId);
        return localVarResp.getData();
    }

    /**
     * get the list of ScenarioRuns for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ApiResponse&lt;List&lt;ScenarioRunBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioRunBase>> getScenarioScenarioRunsWithHttpInfo(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioScenarioRunsValidateBeforeCall(organizationId, workspaceId, scenarioId, null);
        Type localVarReturnType = new TypeToken<List<ScenarioRunBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the list of ScenarioRuns for the Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioScenarioRunsAsync(String organizationId, String workspaceId, String scenarioId, final ApiCallback<List<ScenarioRunBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioScenarioRunsValidateBeforeCall(organizationId, workspaceId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioRunBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkspaceScenarioRuns
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceScenarioRunsCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarioruns"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceScenarioRunsValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getWorkspaceScenarioRuns(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getWorkspaceScenarioRuns(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkspaceScenarioRunsCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * get the list of ScenarioRuns for the Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return List&lt;ScenarioRunBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioRunBase> getWorkspaceScenarioRuns(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<List<ScenarioRunBase>> localVarResp = getWorkspaceScenarioRunsWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * get the list of ScenarioRuns for the Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;List&lt;ScenarioRunBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioRunBase>> getWorkspaceScenarioRunsWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceScenarioRunsValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<List<ScenarioRunBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the list of ScenarioRuns for the Workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceScenarioRunsAsync(String organizationId, String workspaceId, final ApiCallback<List<ScenarioRunBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceScenarioRunsValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioRunBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runScenario
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScenarioCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/run"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runScenarioValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling runScenario(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling runScenario(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling runScenario(Async)");
        }
        

        okhttp3.Call localVarCall = runScenarioCall(organizationId, workspaceId, scenarioId, _callback);
        return localVarCall;

    }

    /**
     * run a ScenarioRun for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ScenarioRunBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRunBase runScenario(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        ApiResponse<ScenarioRunBase> localVarResp = runScenarioWithHttpInfo(organizationId, workspaceId, scenarioId);
        return localVarResp.getData();
    }

    /**
     * run a ScenarioRun for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ApiResponse&lt;ScenarioRunBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRunBase> runScenarioWithHttpInfo(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = runScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, null);
        Type localVarReturnType = new TypeToken<ScenarioRunBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * run a ScenarioRun for the Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScenarioAsync(String organizationId, String workspaceId, String scenarioId, final ApiCallback<ScenarioRunBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = runScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRunBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchScenarioRunLogs
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param scenarioRunLogsOptions the options to search logs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScenarioRunLogsCall(String organizationId, String scenariorunId, ScenarioRunLogsOptions scenarioRunLogsOptions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenarioRunLogsOptions;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/{scenariorun_id}/logs/search"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "scenariorun_id" + "\\}", localVarApiClient.escapeString(scenariorunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchScenarioRunLogsValidateBeforeCall(String organizationId, String scenariorunId, ScenarioRunLogsOptions scenarioRunLogsOptions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling searchScenarioRunLogs(Async)");
        }
        
        // verify the required parameter 'scenariorunId' is set
        if (scenariorunId == null) {
            throw new ApiException("Missing the required parameter 'scenariorunId' when calling searchScenarioRunLogs(Async)");
        }
        
        // verify the required parameter 'scenarioRunLogsOptions' is set
        if (scenarioRunLogsOptions == null) {
            throw new ApiException("Missing the required parameter 'scenarioRunLogsOptions' when calling searchScenarioRunLogs(Async)");
        }
        

        okhttp3.Call localVarCall = searchScenarioRunLogsCall(organizationId, scenariorunId, scenarioRunLogsOptions, _callback);
        return localVarCall;

    }

    /**
     * Search the logs of a scenariorun
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param scenarioRunLogsOptions the options to search logs (required)
     * @return ScenarioRunLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRunLogs searchScenarioRunLogs(String organizationId, String scenariorunId, ScenarioRunLogsOptions scenarioRunLogsOptions) throws ApiException {
        ApiResponse<ScenarioRunLogs> localVarResp = searchScenarioRunLogsWithHttpInfo(organizationId, scenariorunId, scenarioRunLogsOptions);
        return localVarResp.getData();
    }

    /**
     * Search the logs of a scenariorun
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param scenarioRunLogsOptions the options to search logs (required)
     * @return ApiResponse&lt;ScenarioRunLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRunLogs> searchScenarioRunLogsWithHttpInfo(String organizationId, String scenariorunId, ScenarioRunLogsOptions scenarioRunLogsOptions) throws ApiException {
        okhttp3.Call localVarCall = searchScenarioRunLogsValidateBeforeCall(organizationId, scenariorunId, scenarioRunLogsOptions, null);
        Type localVarReturnType = new TypeToken<ScenarioRunLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search the logs of a scenariorun (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenariorunId the ScenarioRun identifier (required)
     * @param scenarioRunLogsOptions the options to search logs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the ScenarioRun logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the ScenarioRun specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScenarioRunLogsAsync(String organizationId, String scenariorunId, ScenarioRunLogsOptions scenarioRunLogsOptions, final ApiCallback<ScenarioRunLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchScenarioRunLogsValidateBeforeCall(organizationId, scenariorunId, scenarioRunLogsOptions, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRunLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchScenarioRuns
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunSearch the ScenarioRun search parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScenarioRunsCall(String organizationId, ScenarioRunSearch scenarioRunSearch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenarioRunSearch;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/search"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchScenarioRunsValidateBeforeCall(String organizationId, ScenarioRunSearch scenarioRunSearch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling searchScenarioRuns(Async)");
        }
        
        // verify the required parameter 'scenarioRunSearch' is set
        if (scenarioRunSearch == null) {
            throw new ApiException("Missing the required parameter 'scenarioRunSearch' when calling searchScenarioRuns(Async)");
        }
        

        okhttp3.Call localVarCall = searchScenarioRunsCall(organizationId, scenarioRunSearch, _callback);
        return localVarCall;

    }

    /**
     * Search ScenarioRuns
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunSearch the ScenarioRun search parameters (required)
     * @return List&lt;ScenarioRunBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioRunBase> searchScenarioRuns(String organizationId, ScenarioRunSearch scenarioRunSearch) throws ApiException {
        ApiResponse<List<ScenarioRunBase>> localVarResp = searchScenarioRunsWithHttpInfo(organizationId, scenarioRunSearch);
        return localVarResp.getData();
    }

    /**
     * Search ScenarioRuns
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunSearch the ScenarioRun search parameters (required)
     * @return ApiResponse&lt;List&lt;ScenarioRunBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioRunBase>> searchScenarioRunsWithHttpInfo(String organizationId, ScenarioRunSearch scenarioRunSearch) throws ApiException {
        okhttp3.Call localVarCall = searchScenarioRunsValidateBeforeCall(organizationId, scenarioRunSearch, null);
        Type localVarReturnType = new TypeToken<List<ScenarioRunBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search ScenarioRuns (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunSearch the ScenarioRun search parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenariorun details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchScenarioRunsAsync(String organizationId, ScenarioRunSearch scenarioRunSearch, final ApiCallback<List<ScenarioRunBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchScenarioRunsValidateBeforeCall(organizationId, scenarioRunSearch, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioRunBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startScenarioRunContainers
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartContainers the raw containers definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startScenarioRunContainersCall(String organizationId, ScenarioRunStartContainers scenarioRunStartContainers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenarioRunStartContainers;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/startcontainers"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startScenarioRunContainersValidateBeforeCall(String organizationId, ScenarioRunStartContainers scenarioRunStartContainers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling startScenarioRunContainers(Async)");
        }
        
        // verify the required parameter 'scenarioRunStartContainers' is set
        if (scenarioRunStartContainers == null) {
            throw new ApiException("Missing the required parameter 'scenarioRunStartContainers' when calling startScenarioRunContainers(Async)");
        }
        

        okhttp3.Call localVarCall = startScenarioRunContainersCall(organizationId, scenarioRunStartContainers, _callback);
        return localVarCall;

    }

    /**
     * Start a new scenariorun with raw containers definition
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartContainers the raw containers definition (required)
     * @return ScenarioRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRun startScenarioRunContainers(String organizationId, ScenarioRunStartContainers scenarioRunStartContainers) throws ApiException {
        ApiResponse<ScenarioRun> localVarResp = startScenarioRunContainersWithHttpInfo(organizationId, scenarioRunStartContainers);
        return localVarResp.getData();
    }

    /**
     * Start a new scenariorun with raw containers definition
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartContainers the raw containers definition (required)
     * @return ApiResponse&lt;ScenarioRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRun> startScenarioRunContainersWithHttpInfo(String organizationId, ScenarioRunStartContainers scenarioRunStartContainers) throws ApiException {
        okhttp3.Call localVarCall = startScenarioRunContainersValidateBeforeCall(organizationId, scenarioRunStartContainers, null);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new scenariorun with raw containers definition (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartContainers the raw containers definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startScenarioRunContainersAsync(String organizationId, ScenarioRunStartContainers scenarioRunStartContainers, final ApiCallback<ScenarioRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = startScenarioRunContainersValidateBeforeCall(organizationId, scenarioRunStartContainers, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startScenarioRunScenario
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStart the Scenario information to start (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startScenarioRunScenarioCall(String organizationId, ScenarioRunStart scenarioRunStart, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenarioRunStart;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/start"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startScenarioRunScenarioValidateBeforeCall(String organizationId, ScenarioRunStart scenarioRunStart, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling startScenarioRunScenario(Async)");
        }
        
        // verify the required parameter 'scenarioRunStart' is set
        if (scenarioRunStart == null) {
            throw new ApiException("Missing the required parameter 'scenarioRunStart' when calling startScenarioRunScenario(Async)");
        }
        

        okhttp3.Call localVarCall = startScenarioRunScenarioCall(organizationId, scenarioRunStart, _callback);
        return localVarCall;

    }

    /**
     * Start a new scenariorun for a Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStart the Scenario information to start (required)
     * @return ScenarioRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRun startScenarioRunScenario(String organizationId, ScenarioRunStart scenarioRunStart) throws ApiException {
        ApiResponse<ScenarioRun> localVarResp = startScenarioRunScenarioWithHttpInfo(organizationId, scenarioRunStart);
        return localVarResp.getData();
    }

    /**
     * Start a new scenariorun for a Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStart the Scenario information to start (required)
     * @return ApiResponse&lt;ScenarioRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRun> startScenarioRunScenarioWithHttpInfo(String organizationId, ScenarioRunStart scenarioRunStart) throws ApiException {
        okhttp3.Call localVarCall = startScenarioRunScenarioValidateBeforeCall(organizationId, scenarioRunStart, null);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new scenariorun for a Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStart the Scenario information to start (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startScenarioRunScenarioAsync(String organizationId, ScenarioRunStart scenarioRunStart, final ApiCallback<ScenarioRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = startScenarioRunScenarioValidateBeforeCall(organizationId, scenarioRunStart, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startScenarioRunSolution
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartSolution the Solution Run Template information to start (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startScenarioRunSolutionCall(String organizationId, ScenarioRunStartSolution scenarioRunStartSolution, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenarioRunStartSolution;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/scenarioruns/startsolution"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startScenarioRunSolutionValidateBeforeCall(String organizationId, ScenarioRunStartSolution scenarioRunStartSolution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling startScenarioRunSolution(Async)");
        }
        
        // verify the required parameter 'scenarioRunStartSolution' is set
        if (scenarioRunStartSolution == null) {
            throw new ApiException("Missing the required parameter 'scenarioRunStartSolution' when calling startScenarioRunSolution(Async)");
        }
        

        okhttp3.Call localVarCall = startScenarioRunSolutionCall(organizationId, scenarioRunStartSolution, _callback);
        return localVarCall;

    }

    /**
     * Start a new scenariorun for a Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartSolution the Solution Run Template information to start (required)
     * @return ScenarioRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioRun startScenarioRunSolution(String organizationId, ScenarioRunStartSolution scenarioRunStartSolution) throws ApiException {
        ApiResponse<ScenarioRun> localVarResp = startScenarioRunSolutionWithHttpInfo(organizationId, scenarioRunStartSolution);
        return localVarResp.getData();
    }

    /**
     * Start a new scenariorun for a Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartSolution the Solution Run Template information to start (required)
     * @return ApiResponse&lt;ScenarioRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioRun> startScenarioRunSolutionWithHttpInfo(String organizationId, ScenarioRunStartSolution scenarioRunStartSolution) throws ApiException {
        okhttp3.Call localVarCall = startScenarioRunSolutionValidateBeforeCall(organizationId, scenarioRunStartSolution, null);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new scenariorun for a Solution Run Template (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param scenarioRunStartSolution the Solution Run Template information to start (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the scenariorun details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startScenarioRunSolutionAsync(String organizationId, ScenarioRunStartSolution scenarioRunStartSolution, final ApiCallback<ScenarioRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = startScenarioRunSolutionValidateBeforeCall(organizationId, scenarioRunStartSolution, _callback);
        Type localVarReturnType = new TypeToken<ScenarioRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
