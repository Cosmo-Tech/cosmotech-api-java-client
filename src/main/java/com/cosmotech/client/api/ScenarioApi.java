/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.Scenario;
import com.cosmotech.client.model.ScenarioBase;
import com.cosmotech.client.model.ScenarioComparisonResult;
import com.cosmotech.client.model.ScenarioDataWarehouseQuery;
import com.cosmotech.client.model.ScenarioDataWarehouseQueryResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScenarioApi {
    private ApiClient localVarApiClient;

    public ScenarioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScenarioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for compareScenarios
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param comparedScenarioId the Scenario identifier to compare to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the comparison result for parameters values </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareScenariosCall(String organizationId, String workspaceId, String scenarioId, String comparedScenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/compare/{compared_scenario_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "compared_scenario_id" + "\\}", localVarApiClient.escapeString(comparedScenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compareScenariosValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, String comparedScenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling compareScenarios(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling compareScenarios(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling compareScenarios(Async)");
        }
        
        // verify the required parameter 'comparedScenarioId' is set
        if (comparedScenarioId == null) {
            throw new ApiException("Missing the required parameter 'comparedScenarioId' when calling compareScenarios(Async)");
        }
        

        okhttp3.Call localVarCall = compareScenariosCall(organizationId, workspaceId, scenarioId, comparedScenarioId, _callback);
        return localVarCall;

    }

    /**
     * Compare the Scenario with another one and returns the difference for parameters values
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param comparedScenarioId the Scenario identifier to compare to (required)
     * @return ScenarioComparisonResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the comparison result for parameters values </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioComparisonResult compareScenarios(String organizationId, String workspaceId, String scenarioId, String comparedScenarioId) throws ApiException {
        ApiResponse<ScenarioComparisonResult> localVarResp = compareScenariosWithHttpInfo(organizationId, workspaceId, scenarioId, comparedScenarioId);
        return localVarResp.getData();
    }

    /**
     * Compare the Scenario with another one and returns the difference for parameters values
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param comparedScenarioId the Scenario identifier to compare to (required)
     * @return ApiResponse&lt;ScenarioComparisonResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the comparison result for parameters values </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioComparisonResult> compareScenariosWithHttpInfo(String organizationId, String workspaceId, String scenarioId, String comparedScenarioId) throws ApiException {
        okhttp3.Call localVarCall = compareScenariosValidateBeforeCall(organizationId, workspaceId, scenarioId, comparedScenarioId, null);
        Type localVarReturnType = new TypeToken<ScenarioComparisonResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare the Scenario with another one and returns the difference for parameters values (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param comparedScenarioId the Scenario identifier to compare to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the comparison result for parameters values </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareScenariosAsync(String organizationId, String workspaceId, String scenarioId, String comparedScenarioId, final ApiCallback<ScenarioComparisonResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = compareScenariosValidateBeforeCall(organizationId, workspaceId, scenarioId, comparedScenarioId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioComparisonResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createScenario
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenario the Scenario to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScenarioCall(String organizationId, String workspaceId, Scenario scenario, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenario;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScenarioValidateBeforeCall(String organizationId, String workspaceId, Scenario scenario, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createScenario(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling createScenario(Async)");
        }
        
        // verify the required parameter 'scenario' is set
        if (scenario == null) {
            throw new ApiException("Missing the required parameter 'scenario' when calling createScenario(Async)");
        }
        

        okhttp3.Call localVarCall = createScenarioCall(organizationId, workspaceId, scenario, _callback);
        return localVarCall;

    }

    /**
     * Create a new scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenario the Scenario to create (required)
     * @return Scenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Scenario createScenario(String organizationId, String workspaceId, Scenario scenario) throws ApiException {
        ApiResponse<Scenario> localVarResp = createScenarioWithHttpInfo(organizationId, workspaceId, scenario);
        return localVarResp.getData();
    }

    /**
     * Create a new scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenario the Scenario to create (required)
     * @return ApiResponse&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scenario> createScenarioWithHttpInfo(String organizationId, String workspaceId, Scenario scenario) throws ApiException {
        okhttp3.Call localVarCall = createScenarioValidateBeforeCall(organizationId, workspaceId, scenario, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenario the Scenario to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScenarioAsync(String organizationId, String workspaceId, Scenario scenario, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScenarioValidateBeforeCall(organizationId, workspaceId, scenario, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScenario
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScenarioCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScenarioValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteScenario(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteScenario(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling deleteScenario(Async)");
        }
        

        okhttp3.Call localVarCall = deleteScenarioCall(organizationId, workspaceId, scenarioId, _callback);
        return localVarCall;

    }

    /**
     * Delete a scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return Scenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Scenario deleteScenario(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        ApiResponse<Scenario> localVarResp = deleteScenarioWithHttpInfo(organizationId, workspaceId, scenarioId);
        return localVarResp.getData();
    }

    /**
     * Delete a scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ApiResponse&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scenario> deleteScenarioWithHttpInfo(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = deleteScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScenarioAsync(String organizationId, String workspaceId, String scenarioId, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllScenarios
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllScenariosCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllScenariosValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllScenarios(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling findAllScenarios(Async)");
        }
        

        okhttp3.Call localVarCall = findAllScenariosCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * List all Scenarios
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return List&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
     </table>
     */
    public List<Scenario> findAllScenarios(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<List<Scenario>> localVarResp = findAllScenariosWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * List all Scenarios
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;List&lt;Scenario&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Scenario>> findAllScenariosWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = findAllScenariosValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<List<Scenario>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Scenarios (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllScenariosAsync(String organizationId, String workspaceId, final ApiCallback<List<Scenario>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllScenariosValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<List<Scenario>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findScenarioById
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Scenario details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findScenarioByIdCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findScenarioByIdValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findScenarioById(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling findScenarioById(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling findScenarioById(Async)");
        }
        

        okhttp3.Call localVarCall = findScenarioByIdCall(organizationId, workspaceId, scenarioId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of an scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return Scenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Scenario details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Scenario findScenarioById(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        ApiResponse<Scenario> localVarResp = findScenarioByIdWithHttpInfo(organizationId, workspaceId, scenarioId);
        return localVarResp.getData();
    }

    /**
     * Get the details of an scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ApiResponse&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Scenario details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scenario> findScenarioByIdWithHttpInfo(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = findScenarioByIdValidateBeforeCall(organizationId, workspaceId, scenarioId, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of an scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Scenario details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findScenarioByIdAsync(String organizationId, String workspaceId, String scenarioId, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = findScenarioByIdValidateBeforeCall(organizationId, workspaceId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenariosTree
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario tree </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenariosTreeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/tree"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenariosTreeValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenariosTree(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenariosTree(Async)");
        }
        

        okhttp3.Call localVarCall = getScenariosTreeCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * Get the Scenarios Tree
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return List&lt;ScenarioBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario tree </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioBase> getScenariosTree(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<List<ScenarioBase>> localVarResp = getScenariosTreeWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * Get the Scenarios Tree
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;List&lt;ScenarioBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario tree </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioBase>> getScenariosTreeWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = getScenariosTreeValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<List<ScenarioBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Scenarios Tree (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario tree </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenariosTreeAsync(String organizationId, String workspaceId, final ApiCallback<List<ScenarioBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenariosTreeValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDataWarehouse
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenarioDataWarehouseQuery the DatawareHouse query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDataWarehouseCall(String organizationId, String workspaceId, String scenarioId, ScenarioDataWarehouseQuery scenarioDataWarehouseQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenarioDataWarehouseQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/queryDataWarehouse"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDataWarehouseValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, ScenarioDataWarehouseQuery scenarioDataWarehouseQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling queryDataWarehouse(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling queryDataWarehouse(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling queryDataWarehouse(Async)");
        }
        
        // verify the required parameter 'scenarioDataWarehouseQuery' is set
        if (scenarioDataWarehouseQuery == null) {
            throw new ApiException("Missing the required parameter 'scenarioDataWarehouseQuery' when calling queryDataWarehouse(Async)");
        }
        

        okhttp3.Call localVarCall = queryDataWarehouseCall(organizationId, workspaceId, scenarioId, scenarioDataWarehouseQuery, _callback);
        return localVarCall;

    }

    /**
     * Get the result of a query on the DatawareHouse
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenarioDataWarehouseQuery the DatawareHouse query (required)
     * @return ScenarioDataWarehouseQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioDataWarehouseQueryResult queryDataWarehouse(String organizationId, String workspaceId, String scenarioId, ScenarioDataWarehouseQuery scenarioDataWarehouseQuery) throws ApiException {
        ApiResponse<ScenarioDataWarehouseQueryResult> localVarResp = queryDataWarehouseWithHttpInfo(organizationId, workspaceId, scenarioId, scenarioDataWarehouseQuery);
        return localVarResp.getData();
    }

    /**
     * Get the result of a query on the DatawareHouse
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenarioDataWarehouseQuery the DatawareHouse query (required)
     * @return ApiResponse&lt;ScenarioDataWarehouseQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioDataWarehouseQueryResult> queryDataWarehouseWithHttpInfo(String organizationId, String workspaceId, String scenarioId, ScenarioDataWarehouseQuery scenarioDataWarehouseQuery) throws ApiException {
        okhttp3.Call localVarCall = queryDataWarehouseValidateBeforeCall(organizationId, workspaceId, scenarioId, scenarioDataWarehouseQuery, null);
        Type localVarReturnType = new TypeToken<ScenarioDataWarehouseQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the result of a query on the DatawareHouse (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenarioDataWarehouseQuery the DatawareHouse query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the query result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDataWarehouseAsync(String organizationId, String workspaceId, String scenarioId, ScenarioDataWarehouseQuery scenarioDataWarehouseQuery, final ApiCallback<ScenarioDataWarehouseQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDataWarehouseValidateBeforeCall(organizationId, workspaceId, scenarioId, scenarioDataWarehouseQuery, _callback);
        Type localVarReturnType = new TypeToken<ScenarioDataWarehouseQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScenario
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenario the new Scenario details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScenarioCall(String organizationId, String workspaceId, String scenarioId, Scenario scenario, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scenario;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "AADOAuth2AuthCode", "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScenarioValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, Scenario scenario, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateScenario(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling updateScenario(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling updateScenario(Async)");
        }
        
        // verify the required parameter 'scenario' is set
        if (scenario == null) {
            throw new ApiException("Missing the required parameter 'scenario' when calling updateScenario(Async)");
        }
        

        okhttp3.Call localVarCall = updateScenarioCall(organizationId, workspaceId, scenarioId, scenario, _callback);
        return localVarCall;

    }

    /**
     * Update a scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenario the new Scenario details. (required)
     * @return Scenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Scenario updateScenario(String organizationId, String workspaceId, String scenarioId, Scenario scenario) throws ApiException {
        ApiResponse<Scenario> localVarResp = updateScenarioWithHttpInfo(organizationId, workspaceId, scenarioId, scenario);
        return localVarResp.getData();
    }

    /**
     * Update a scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenario the new Scenario details. (required)
     * @return ApiResponse&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scenario> updateScenarioWithHttpInfo(String organizationId, String workspaceId, String scenarioId, Scenario scenario) throws ApiException {
        okhttp3.Call localVarCall = updateScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, scenario, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param scenario the new Scenario details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the scenario details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScenarioAsync(String organizationId, String workspaceId, String scenarioId, Scenario scenario, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, scenario, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
