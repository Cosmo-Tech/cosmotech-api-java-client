/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.Simulation;
import com.cosmotech.client.model.SimulationBase;
import com.cosmotech.client.model.SimulationLogs;
import com.cosmotech.client.model.SimulationLogsOptions;
import com.cosmotech.client.model.SimulationSearch;
import com.cosmotech.client.model.SimulationStartContainers;
import com.cosmotech.client.model.SimulationStartScenario;
import com.cosmotech.client.model.SimulationStartSolution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SimulationApi {
    private ApiClient localVarApiClient;

    public SimulationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SimulationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteSimulation
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSimulationCall(String organizationId, String simulationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/{simulation_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "simulation_id" + "\\}", localVarApiClient.escapeString(simulationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSimulationValidateBeforeCall(String organizationId, String simulationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteSimulation(Async)");
        }
        
        // verify the required parameter 'simulationId' is set
        if (simulationId == null) {
            throw new ApiException("Missing the required parameter 'simulationId' when calling deleteSimulation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSimulationCall(organizationId, simulationId, _callback);
        return localVarCall;

    }

    /**
     * Delete a simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Simulation deleteSimulation(String organizationId, String simulationId) throws ApiException {
        ApiResponse<Simulation> localVarResp = deleteSimulationWithHttpInfo(organizationId, simulationId);
        return localVarResp.getData();
    }

    /**
     * Delete a simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> deleteSimulationWithHttpInfo(String organizationId, String simulationId) throws ApiException {
        okhttp3.Call localVarCall = deleteSimulationValidateBeforeCall(organizationId, simulationId, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a simulation (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSimulationAsync(String organizationId, String simulationId, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSimulationValidateBeforeCall(organizationId, simulationId, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSimulationById
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSimulationByIdCall(String organizationId, String simulationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/{simulation_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "simulation_id" + "\\}", localVarApiClient.escapeString(simulationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSimulationByIdValidateBeforeCall(String organizationId, String simulationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findSimulationById(Async)");
        }
        
        // verify the required parameter 'simulationId' is set
        if (simulationId == null) {
            throw new ApiException("Missing the required parameter 'simulationId' when calling findSimulationById(Async)");
        }
        

        okhttp3.Call localVarCall = findSimulationByIdCall(organizationId, simulationId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Simulation findSimulationById(String organizationId, String simulationId) throws ApiException {
        ApiResponse<Simulation> localVarResp = findSimulationByIdWithHttpInfo(organizationId, simulationId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> findSimulationByIdWithHttpInfo(String organizationId, String simulationId) throws ApiException {
        okhttp3.Call localVarCall = findSimulationByIdValidateBeforeCall(organizationId, simulationId, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a simulation (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSimulationByIdAsync(String organizationId, String simulationId, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSimulationByIdValidateBeforeCall(organizationId, simulationId, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenarioSimulation
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioSimulationCall(String organizationId, String workspaceId, String scenarioId, String simulationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "simulation_id" + "\\}", localVarApiClient.escapeString(simulationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioSimulationValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, String simulationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenarioSimulation(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenarioSimulation(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getScenarioSimulation(Async)");
        }
        
        // verify the required parameter 'simulationId' is set
        if (simulationId == null) {
            throw new ApiException("Missing the required parameter 'simulationId' when calling getScenarioSimulation(Async)");
        }
        

        okhttp3.Call localVarCall = getScenarioSimulationCall(organizationId, workspaceId, scenarioId, simulationId, _callback);
        return localVarCall;

    }

    /**
     * get the Simulation for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public Simulation getScenarioSimulation(String organizationId, String workspaceId, String scenarioId, String simulationId) throws ApiException {
        ApiResponse<Simulation> localVarResp = getScenarioSimulationWithHttpInfo(organizationId, workspaceId, scenarioId, simulationId);
        return localVarResp.getData();
    }

    /**
     * get the Simulation for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> getScenarioSimulationWithHttpInfo(String organizationId, String workspaceId, String scenarioId, String simulationId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioSimulationValidateBeforeCall(organizationId, workspaceId, scenarioId, simulationId, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the Simulation for the Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioSimulationAsync(String organizationId, String workspaceId, String scenarioId, String simulationId, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioSimulationValidateBeforeCall(organizationId, workspaceId, scenarioId, simulationId, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenarioSimulationLogs
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation logs details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioSimulationLogsCall(String organizationId, String workspaceId, String scenarioId, String simulationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}/logs"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()))
            .replaceAll("\\{" + "simulation_id" + "\\}", localVarApiClient.escapeString(simulationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioSimulationLogsValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, String simulationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenarioSimulationLogs(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenarioSimulationLogs(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getScenarioSimulationLogs(Async)");
        }
        
        // verify the required parameter 'simulationId' is set
        if (simulationId == null) {
            throw new ApiException("Missing the required parameter 'simulationId' when calling getScenarioSimulationLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getScenarioSimulationLogsCall(organizationId, workspaceId, scenarioId, simulationId, _callback);
        return localVarCall;

    }

    /**
     * get the logs for the Simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return SimulationLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation logs details </td><td>  -  </td></tr>
     </table>
     */
    public SimulationLogs getScenarioSimulationLogs(String organizationId, String workspaceId, String scenarioId, String simulationId) throws ApiException {
        ApiResponse<SimulationLogs> localVarResp = getScenarioSimulationLogsWithHttpInfo(organizationId, workspaceId, scenarioId, simulationId);
        return localVarResp.getData();
    }

    /**
     * get the logs for the Simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @return ApiResponse&lt;SimulationLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation logs details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulationLogs> getScenarioSimulationLogsWithHttpInfo(String organizationId, String workspaceId, String scenarioId, String simulationId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioSimulationLogsValidateBeforeCall(organizationId, workspaceId, scenarioId, simulationId, null);
        Type localVarReturnType = new TypeToken<SimulationLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the logs for the Simulation (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation logs details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioSimulationLogsAsync(String organizationId, String workspaceId, String scenarioId, String simulationId, final ApiCallback<SimulationLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioSimulationLogsValidateBeforeCall(organizationId, workspaceId, scenarioId, simulationId, _callback);
        Type localVarReturnType = new TypeToken<SimulationLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScenarioSimulations
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioSimulationsCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioSimulationsValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getScenarioSimulations(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getScenarioSimulations(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getScenarioSimulations(Async)");
        }
        

        okhttp3.Call localVarCall = getScenarioSimulationsCall(organizationId, workspaceId, scenarioId, _callback);
        return localVarCall;

    }

    /**
     * get the list of Simulations for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return List&lt;SimulationBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public List<SimulationBase> getScenarioSimulations(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        ApiResponse<List<SimulationBase>> localVarResp = getScenarioSimulationsWithHttpInfo(organizationId, workspaceId, scenarioId);
        return localVarResp.getData();
    }

    /**
     * get the list of Simulations for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ApiResponse&lt;List&lt;SimulationBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimulationBase>> getScenarioSimulationsWithHttpInfo(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioSimulationsValidateBeforeCall(organizationId, workspaceId, scenarioId, null);
        Type localVarReturnType = new TypeToken<List<SimulationBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the list of Simulations for the Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScenarioSimulationsAsync(String organizationId, String workspaceId, String scenarioId, final ApiCallback<List<SimulationBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioSimulationsValidateBeforeCall(organizationId, workspaceId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<List<SimulationBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkspaceSimulations
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceSimulationsCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/simulations"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceSimulationsValidateBeforeCall(String organizationId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getWorkspaceSimulations(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getWorkspaceSimulations(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkspaceSimulationsCall(organizationId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * get the list of Simulations for the Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return List&lt;SimulationBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public List<SimulationBase> getWorkspaceSimulations(String organizationId, String workspaceId) throws ApiException {
        ApiResponse<List<SimulationBase>> localVarResp = getWorkspaceSimulationsWithHttpInfo(organizationId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * get the list of Simulations for the Workspace
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @return ApiResponse&lt;List&lt;SimulationBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimulationBase>> getWorkspaceSimulationsWithHttpInfo(String organizationId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceSimulationsValidateBeforeCall(organizationId, workspaceId, null);
        Type localVarReturnType = new TypeToken<List<SimulationBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get the list of Simulations for the Workspace (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceSimulationsAsync(String organizationId, String workspaceId, final ApiCallback<List<SimulationBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceSimulationsValidateBeforeCall(organizationId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<List<SimulationBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runScenario
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScenarioCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/run"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "workspace_id" + "\\}", localVarApiClient.escapeString(workspaceId.toString()))
            .replaceAll("\\{" + "scenario_id" + "\\}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runScenarioValidateBeforeCall(String organizationId, String workspaceId, String scenarioId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling runScenario(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling runScenario(Async)");
        }
        
        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling runScenario(Async)");
        }
        

        okhttp3.Call localVarCall = runScenarioCall(organizationId, workspaceId, scenarioId, _callback);
        return localVarCall;

    }

    /**
     * run a Simulation for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return SimulationBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public SimulationBase runScenario(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        ApiResponse<SimulationBase> localVarResp = runScenarioWithHttpInfo(organizationId, workspaceId, scenarioId);
        return localVarResp.getData();
    }

    /**
     * run a Simulation for the Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @return ApiResponse&lt;SimulationBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulationBase> runScenarioWithHttpInfo(String organizationId, String workspaceId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = runScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, null);
        Type localVarReturnType = new TypeToken<SimulationBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * run a Simulation for the Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param workspaceId the Workspace identifier (required)
     * @param scenarioId the Scenario identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runScenarioAsync(String organizationId, String workspaceId, String scenarioId, final ApiCallback<SimulationBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = runScenarioValidateBeforeCall(organizationId, workspaceId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<SimulationBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSimulationLogs
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param simulationLogsOptions the options to search logs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSimulationLogsCall(String organizationId, String simulationId, SimulationLogsOptions simulationLogsOptions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simulationLogsOptions;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/{simulation_id}/logs/search"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "simulation_id" + "\\}", localVarApiClient.escapeString(simulationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSimulationLogsValidateBeforeCall(String organizationId, String simulationId, SimulationLogsOptions simulationLogsOptions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling searchSimulationLogs(Async)");
        }
        
        // verify the required parameter 'simulationId' is set
        if (simulationId == null) {
            throw new ApiException("Missing the required parameter 'simulationId' when calling searchSimulationLogs(Async)");
        }
        
        // verify the required parameter 'simulationLogsOptions' is set
        if (simulationLogsOptions == null) {
            throw new ApiException("Missing the required parameter 'simulationLogsOptions' when calling searchSimulationLogs(Async)");
        }
        

        okhttp3.Call localVarCall = searchSimulationLogsCall(organizationId, simulationId, simulationLogsOptions, _callback);
        return localVarCall;

    }

    /**
     * Search the logs of a simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param simulationLogsOptions the options to search logs (required)
     * @return SimulationLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public SimulationLogs searchSimulationLogs(String organizationId, String simulationId, SimulationLogsOptions simulationLogsOptions) throws ApiException {
        ApiResponse<SimulationLogs> localVarResp = searchSimulationLogsWithHttpInfo(organizationId, simulationId, simulationLogsOptions);
        return localVarResp.getData();
    }

    /**
     * Search the logs of a simulation
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param simulationLogsOptions the options to search logs (required)
     * @return ApiResponse&lt;SimulationLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulationLogs> searchSimulationLogsWithHttpInfo(String organizationId, String simulationId, SimulationLogsOptions simulationLogsOptions) throws ApiException {
        okhttp3.Call localVarCall = searchSimulationLogsValidateBeforeCall(organizationId, simulationId, simulationLogsOptions, null);
        Type localVarReturnType = new TypeToken<SimulationLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search the logs of a simulation (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationId the Simulation identifier (required)
     * @param simulationLogsOptions the options to search logs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Simulation logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Simulation specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSimulationLogsAsync(String organizationId, String simulationId, SimulationLogsOptions simulationLogsOptions, final ApiCallback<SimulationLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSimulationLogsValidateBeforeCall(organizationId, simulationId, simulationLogsOptions, _callback);
        Type localVarReturnType = new TypeToken<SimulationLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSimulations
     * @param organizationId the Organization identifier (required)
     * @param simulationSearch the Simulation search parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSimulationsCall(String organizationId, SimulationSearch simulationSearch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simulationSearch;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/search"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSimulationsValidateBeforeCall(String organizationId, SimulationSearch simulationSearch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling searchSimulations(Async)");
        }
        
        // verify the required parameter 'simulationSearch' is set
        if (simulationSearch == null) {
            throw new ApiException("Missing the required parameter 'simulationSearch' when calling searchSimulations(Async)");
        }
        

        okhttp3.Call localVarCall = searchSimulationsCall(organizationId, simulationSearch, _callback);
        return localVarCall;

    }

    /**
     * Search Simulations
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationSearch the Simulation search parameters (required)
     * @return List&lt;SimulationBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public List<SimulationBase> searchSimulations(String organizationId, SimulationSearch simulationSearch) throws ApiException {
        ApiResponse<List<SimulationBase>> localVarResp = searchSimulationsWithHttpInfo(organizationId, simulationSearch);
        return localVarResp.getData();
    }

    /**
     * Search Simulations
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationSearch the Simulation search parameters (required)
     * @return ApiResponse&lt;List&lt;SimulationBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimulationBase>> searchSimulationsWithHttpInfo(String organizationId, SimulationSearch simulationSearch) throws ApiException {
        okhttp3.Call localVarCall = searchSimulationsValidateBeforeCall(organizationId, simulationSearch, null);
        Type localVarReturnType = new TypeToken<List<SimulationBase>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Simulations (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationSearch the Simulation search parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the simulation details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSimulationsAsync(String organizationId, SimulationSearch simulationSearch, final ApiCallback<List<SimulationBase>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSimulationsValidateBeforeCall(organizationId, simulationSearch, _callback);
        Type localVarReturnType = new TypeToken<List<SimulationBase>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSimulationContainers
     * @param organizationId the Organization identifier (required)
     * @param simulationStartContainers the raw containers definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSimulationContainersCall(String organizationId, SimulationStartContainers simulationStartContainers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simulationStartContainers;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/startcontainers"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSimulationContainersValidateBeforeCall(String organizationId, SimulationStartContainers simulationStartContainers, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling startSimulationContainers(Async)");
        }
        
        // verify the required parameter 'simulationStartContainers' is set
        if (simulationStartContainers == null) {
            throw new ApiException("Missing the required parameter 'simulationStartContainers' when calling startSimulationContainers(Async)");
        }
        

        okhttp3.Call localVarCall = startSimulationContainersCall(organizationId, simulationStartContainers, _callback);
        return localVarCall;

    }

    /**
     * Start a new simulation with raw containers definition
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartContainers the raw containers definition (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Simulation startSimulationContainers(String organizationId, SimulationStartContainers simulationStartContainers) throws ApiException {
        ApiResponse<Simulation> localVarResp = startSimulationContainersWithHttpInfo(organizationId, simulationStartContainers);
        return localVarResp.getData();
    }

    /**
     * Start a new simulation with raw containers definition
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartContainers the raw containers definition (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> startSimulationContainersWithHttpInfo(String organizationId, SimulationStartContainers simulationStartContainers) throws ApiException {
        okhttp3.Call localVarCall = startSimulationContainersValidateBeforeCall(organizationId, simulationStartContainers, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new simulation with raw containers definition (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartContainers the raw containers definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSimulationContainersAsync(String organizationId, SimulationStartContainers simulationStartContainers, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSimulationContainersValidateBeforeCall(organizationId, simulationStartContainers, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSimulationScenario
     * @param organizationId the Organization identifier (required)
     * @param simulationStartScenario the Scenario information to start (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSimulationScenarioCall(String organizationId, SimulationStartScenario simulationStartScenario, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simulationStartScenario;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/start"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSimulationScenarioValidateBeforeCall(String organizationId, SimulationStartScenario simulationStartScenario, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling startSimulationScenario(Async)");
        }
        
        // verify the required parameter 'simulationStartScenario' is set
        if (simulationStartScenario == null) {
            throw new ApiException("Missing the required parameter 'simulationStartScenario' when calling startSimulationScenario(Async)");
        }
        

        okhttp3.Call localVarCall = startSimulationScenarioCall(organizationId, simulationStartScenario, _callback);
        return localVarCall;

    }

    /**
     * Start a new simulation for a Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartScenario the Scenario information to start (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Simulation startSimulationScenario(String organizationId, SimulationStartScenario simulationStartScenario) throws ApiException {
        ApiResponse<Simulation> localVarResp = startSimulationScenarioWithHttpInfo(organizationId, simulationStartScenario);
        return localVarResp.getData();
    }

    /**
     * Start a new simulation for a Scenario
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartScenario the Scenario information to start (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> startSimulationScenarioWithHttpInfo(String organizationId, SimulationStartScenario simulationStartScenario) throws ApiException {
        okhttp3.Call localVarCall = startSimulationScenarioValidateBeforeCall(organizationId, simulationStartScenario, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new simulation for a Scenario (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartScenario the Scenario information to start (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSimulationScenarioAsync(String organizationId, SimulationStartScenario simulationStartScenario, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSimulationScenarioValidateBeforeCall(organizationId, simulationStartScenario, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSimulationSolution
     * @param organizationId the Organization identifier (required)
     * @param simulationStartSolution the Solution Run Template information to start (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSimulationSolutionCall(String organizationId, SimulationStartSolution simulationStartSolution, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simulationStartSolution;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/simulations/startsolution"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSimulationSolutionValidateBeforeCall(String organizationId, SimulationStartSolution simulationStartSolution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling startSimulationSolution(Async)");
        }
        
        // verify the required parameter 'simulationStartSolution' is set
        if (simulationStartSolution == null) {
            throw new ApiException("Missing the required parameter 'simulationStartSolution' when calling startSimulationSolution(Async)");
        }
        

        okhttp3.Call localVarCall = startSimulationSolutionCall(organizationId, simulationStartSolution, _callback);
        return localVarCall;

    }

    /**
     * Start a new simulation for a Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartSolution the Solution Run Template information to start (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Simulation startSimulationSolution(String organizationId, SimulationStartSolution simulationStartSolution) throws ApiException {
        ApiResponse<Simulation> localVarResp = startSimulationSolutionWithHttpInfo(organizationId, simulationStartSolution);
        return localVarResp.getData();
    }

    /**
     * Start a new simulation for a Solution Run Template
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartSolution the Solution Run Template information to start (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> startSimulationSolutionWithHttpInfo(String organizationId, SimulationStartSolution simulationStartSolution) throws ApiException {
        okhttp3.Call localVarCall = startSimulationSolutionValidateBeforeCall(organizationId, simulationStartSolution, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new simulation for a Solution Run Template (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param simulationStartSolution the Solution Run Template information to start (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> the simulation details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Scenario specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSimulationSolutionAsync(String organizationId, SimulationStartSolution simulationStartSolution, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSimulationSolutionValidateBeforeCall(organizationId, simulationStartSolution, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
