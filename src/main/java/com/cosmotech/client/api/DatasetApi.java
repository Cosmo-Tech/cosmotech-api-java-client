/*
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.1.0-dev
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.Dataset;
import com.cosmotech.client.model.DatasetAccessControl;
import com.cosmotech.client.model.DatasetCompatibility;
import com.cosmotech.client.model.DatasetCopyParameters;
import com.cosmotech.client.model.DatasetRole;
import com.cosmotech.client.model.DatasetSearch;
import com.cosmotech.client.model.DatasetSecurity;
import com.cosmotech.client.model.DatasetTwinGraphHash;
import com.cosmotech.client.model.DatasetTwinGraphInfo;
import com.cosmotech.client.model.DatasetTwinGraphQuery;
import java.io.File;
import com.cosmotech.client.model.FileUploadValidation;
import com.cosmotech.client.model.GraphProperties;
import com.cosmotech.client.model.SubDatasetGraphQuery;
import com.cosmotech.client.model.TwinGraphBatchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addDatasetAccessControl
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetAccessControl the new Dataset security access to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDatasetAccessControlCall(String organizationId, String datasetId, DatasetAccessControl datasetAccessControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetAccessControl;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security/access"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDatasetAccessControlValidateBeforeCall(String organizationId, String datasetId, DatasetAccessControl datasetAccessControl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling addDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'datasetAccessControl' is set
        if (datasetAccessControl == null) {
            throw new ApiException("Missing the required parameter 'datasetAccessControl' when calling addDatasetAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = addDatasetAccessControlCall(organizationId, datasetId, datasetAccessControl, _callback);
        return localVarCall;

    }

    /**
     * Add a control access to the Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetAccessControl the new Dataset security access to add. (required)
     * @return DatasetAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetAccessControl addDatasetAccessControl(String organizationId, String datasetId, DatasetAccessControl datasetAccessControl) throws ApiException {
        ApiResponse<DatasetAccessControl> localVarResp = addDatasetAccessControlWithHttpInfo(organizationId, datasetId, datasetAccessControl);
        return localVarResp.getData();
    }

    /**
     * Add a control access to the Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetAccessControl the new Dataset security access to add. (required)
     * @return ApiResponse&lt;DatasetAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetAccessControl> addDatasetAccessControlWithHttpInfo(String organizationId, String datasetId, DatasetAccessControl datasetAccessControl) throws ApiException {
        okhttp3.Call localVarCall = addDatasetAccessControlValidateBeforeCall(organizationId, datasetId, datasetAccessControl, null);
        Type localVarReturnType = new TypeToken<DatasetAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a control access to the Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetAccessControl the new Dataset security access to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDatasetAccessControlAsync(String organizationId, String datasetId, DatasetAccessControl datasetAccessControl, final ApiCallback<DatasetAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDatasetAccessControlValidateBeforeCall(organizationId, datasetId, datasetAccessControl, _callback);
        Type localVarReturnType = new TypeToken<DatasetAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addOrReplaceDatasetCompatibilityElements
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceDatasetCompatibilityElementsCall(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetCompatibility;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/compatibility"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceDatasetCompatibilityElementsValidateBeforeCall(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrReplaceDatasetCompatibilityElements(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling addOrReplaceDatasetCompatibilityElements(Async)");
        }
        
        // verify the required parameter 'datasetCompatibility' is set
        if (datasetCompatibility == null) {
            throw new ApiException("Missing the required parameter 'datasetCompatibility' when calling addOrReplaceDatasetCompatibilityElements(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceDatasetCompatibilityElementsCall(organizationId, datasetId, datasetCompatibility, _callback);
        return localVarCall;

    }

    /**
     * Add Dataset Compatibility elements.
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @return List&lt;DatasetCompatibility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<DatasetCompatibility> addOrReplaceDatasetCompatibilityElements(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility) throws ApiException {
        ApiResponse<List<DatasetCompatibility>> localVarResp = addOrReplaceDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId, datasetCompatibility);
        return localVarResp.getData();
    }

    /**
     * Add Dataset Compatibility elements.
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @return ApiResponse&lt;List&lt;DatasetCompatibility&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DatasetCompatibility>> addOrReplaceDatasetCompatibilityElementsWithHttpInfo(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, datasetCompatibility, null);
        Type localVarReturnType = new TypeToken<List<DatasetCompatibility>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Dataset Compatibility elements. (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceDatasetCompatibilityElementsAsync(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility, final ApiCallback<List<DatasetCompatibility>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, datasetCompatibility, _callback);
        Type localVarReturnType = new TypeToken<List<DatasetCompatibility>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDatasetCall(String organizationId, DatasetCopyParameters datasetCopyParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetCopyParameters;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/copy"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyDatasetValidateBeforeCall(String organizationId, DatasetCopyParameters datasetCopyParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling copyDataset(Async)");
        }
        
        // verify the required parameter 'datasetCopyParameters' is set
        if (datasetCopyParameters == null) {
            throw new ApiException("Missing the required parameter 'datasetCopyParameters' when calling copyDataset(Async)");
        }
        

        okhttp3.Call localVarCall = copyDatasetCall(organizationId, datasetCopyParameters, _callback);
        return localVarCall;

    }

    /**
     * Copy a Dataset to another Dataset.
     * Not implemented!
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @return DatasetCopyParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetCopyParameters copyDataset(String organizationId, DatasetCopyParameters datasetCopyParameters) throws ApiException {
        ApiResponse<DatasetCopyParameters> localVarResp = copyDatasetWithHttpInfo(organizationId, datasetCopyParameters);
        return localVarResp.getData();
    }

    /**
     * Copy a Dataset to another Dataset.
     * Not implemented!
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @return ApiResponse&lt;DatasetCopyParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetCopyParameters> copyDatasetWithHttpInfo(String organizationId, DatasetCopyParameters datasetCopyParameters) throws ApiException {
        okhttp3.Call localVarCall = copyDatasetValidateBeforeCall(organizationId, datasetCopyParameters, null);
        Type localVarReturnType = new TypeToken<DatasetCopyParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a Dataset to another Dataset. (asynchronously)
     * Not implemented!
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDatasetAsync(String organizationId, DatasetCopyParameters datasetCopyParameters, final ApiCallback<DatasetCopyParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyDatasetValidateBeforeCall(organizationId, datasetCopyParameters, _callback);
        Type localVarReturnType = new TypeToken<DatasetCopyParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDataset
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetCall(String organizationId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataset;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasetValidateBeforeCall(String organizationId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createDataset(Async)");
        }
        
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling createDataset(Async)");
        }
        

        okhttp3.Call localVarCall = createDatasetCall(organizationId, dataset, _callback);
        return localVarCall;

    }

    /**
     * Create a new Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Dataset createDataset(String organizationId, Dataset dataset) throws ApiException {
        ApiResponse<Dataset> localVarResp = createDatasetWithHttpInfo(organizationId, dataset);
        return localVarResp.getData();
    }

    /**
     * Create a new Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> createDatasetWithHttpInfo(String organizationId, Dataset dataset) throws ApiException {
        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(organizationId, dataset, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetAsync(String organizationId, Dataset dataset, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(organizationId, dataset, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param subDatasetGraphQuery the Cypher query to filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubDatasetCall(String organizationId, String datasetId, SubDatasetGraphQuery subDatasetGraphQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subDatasetGraphQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/subdataset"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubDatasetValidateBeforeCall(String organizationId, String datasetId, SubDatasetGraphQuery subDatasetGraphQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createSubDataset(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling createSubDataset(Async)");
        }
        
        // verify the required parameter 'subDatasetGraphQuery' is set
        if (subDatasetGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'subDatasetGraphQuery' when calling createSubDataset(Async)");
        }
        

        okhttp3.Call localVarCall = createSubDatasetCall(organizationId, datasetId, subDatasetGraphQuery, _callback);
        return localVarCall;

    }

    /**
     * Create a sub-dataset from the dataset in parameter
     * Create a copy of the dataset using the results of the list of queries given in parameter.
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param subDatasetGraphQuery the Cypher query to filter (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Dataset createSubDataset(String organizationId, String datasetId, SubDatasetGraphQuery subDatasetGraphQuery) throws ApiException {
        ApiResponse<Dataset> localVarResp = createSubDatasetWithHttpInfo(organizationId, datasetId, subDatasetGraphQuery);
        return localVarResp.getData();
    }

    /**
     * Create a sub-dataset from the dataset in parameter
     * Create a copy of the dataset using the results of the list of queries given in parameter.
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param subDatasetGraphQuery the Cypher query to filter (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> createSubDatasetWithHttpInfo(String organizationId, String datasetId, SubDatasetGraphQuery subDatasetGraphQuery) throws ApiException {
        okhttp3.Call localVarCall = createSubDatasetValidateBeforeCall(organizationId, datasetId, subDatasetGraphQuery, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a sub-dataset from the dataset in parameter (asynchronously)
     * Create a copy of the dataset using the results of the list of queries given in parameter.
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param subDatasetGraphQuery the Cypher query to filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubDatasetAsync(String organizationId, String datasetId, SubDatasetGraphQuery subDatasetGraphQuery, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubDatasetValidateBeforeCall(organizationId, datasetId, subDatasetGraphQuery, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTwingraphEntities
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTwingraphEntitiesCall(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graphProperties;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTwingraphEntitiesValidateBeforeCall(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling createTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'graphProperties' is set
        if (graphProperties == null) {
            throw new ApiException("Missing the required parameter 'graphProperties' when calling createTwingraphEntities(Async)");
        }
        

        okhttp3.Call localVarCall = createTwingraphEntitiesCall(organizationId, datasetId, type, graphProperties, _callback);
        return localVarCall;

    }

    /**
     * Create new entities in a graph instance
     * create new entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public String createTwingraphEntities(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties) throws ApiException {
        ApiResponse<String> localVarResp = createTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties);
        return localVarResp.getData();
    }

    /**
     * Create new entities in a graph instance
     * create new entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createTwingraphEntitiesWithHttpInfo(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties) throws ApiException {
        okhttp3.Call localVarCall = createTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, graphProperties, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new entities in a graph instance (asynchronously)
     * create new entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTwingraphEntitiesAsync(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, graphProperties, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteDataset(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling deleteDataset(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDatasetCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Delete a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDataset(String organizationId, String datasetId) throws ApiException {
        deleteDatasetWithHttpInfo(organizationId, datasetId);
    }

    /**
     * Delete a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDatasetWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(organizationId, datasetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAsync(String organizationId, String datasetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(organizationId, datasetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTwingraphEntities
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTwingraphEntitiesCall(String organizationId, String datasetId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTwingraphEntitiesValidateBeforeCall(String organizationId, String datasetId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling deleteTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling deleteTwingraphEntities(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTwingraphEntitiesCall(organizationId, datasetId, type, ids, _callback);
        return localVarCall;

    }

    /**
     * Delete entities in a graph instance
     * delete entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTwingraphEntities(String organizationId, String datasetId, String type, List<String> ids) throws ApiException {
        deleteTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids);
    }

    /**
     * Delete entities in a graph instance
     * delete entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTwingraphEntitiesWithHttpInfo(String organizationId, String datasetId, String type, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = deleteTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete entities in a graph instance (asynchronously)
     * delete entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTwingraphEntitiesAsync(String organizationId, String datasetId, String type, List<String> ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadTwingraph
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTwingraphCall(String organizationId, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/twingraph/download/{hash}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "hash" + "\\}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadTwingraphValidateBeforeCall(String organizationId, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling downloadTwingraph(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling downloadTwingraph(Async)");
        }
        

        okhttp3.Call localVarCall = downloadTwingraphCall(organizationId, hash, _callback);
        return localVarCall;

    }

    /**
     * Download a graph as a zip file
     * Download the compressed graph reference by the hash in a zip file
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public File downloadTwingraph(String organizationId, String hash) throws ApiException {
        ApiResponse<File> localVarResp = downloadTwingraphWithHttpInfo(organizationId, hash);
        return localVarResp.getData();
    }

    /**
     * Download a graph as a zip file
     * Download the compressed graph reference by the hash in a zip file
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadTwingraphWithHttpInfo(String organizationId, String hash) throws ApiException {
        okhttp3.Call localVarCall = downloadTwingraphValidateBeforeCall(organizationId, hash, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a graph as a zip file (asynchronously)
     * Download the compressed graph reference by the hash in a zip file
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTwingraphAsync(String organizationId, String hash, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadTwingraphValidateBeforeCall(organizationId, hash, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllDatasets
     * @param organizationId the Organization identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllDatasetsCall(String organizationId, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllDatasetsValidateBeforeCall(String organizationId, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllDatasets(Async)");
        }
        

        okhttp3.Call localVarCall = findAllDatasetsCall(organizationId, page, size, _callback);
        return localVarCall;

    }

    /**
     * List all Datasets
     * 
     * @param organizationId the Organization identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return List&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public List<Dataset> findAllDatasets(String organizationId, Integer page, Integer size) throws ApiException {
        ApiResponse<List<Dataset>> localVarResp = findAllDatasetsWithHttpInfo(organizationId, page, size);
        return localVarResp.getData();
    }

    /**
     * List all Datasets
     * 
     * @param organizationId the Organization identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return ApiResponse&lt;List&lt;Dataset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Dataset>> findAllDatasetsWithHttpInfo(String organizationId, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = findAllDatasetsValidateBeforeCall(organizationId, page, size, null);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Datasets (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllDatasetsAsync(String organizationId, Integer page, Integer size, final ApiCallback<List<Dataset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllDatasetsValidateBeforeCall(organizationId, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findDatasetById
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findDatasetByIdCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findDatasetByIdValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findDatasetById(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling findDatasetById(Async)");
        }
        

        okhttp3.Call localVarCall = findDatasetByIdCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Dataset findDatasetById(String organizationId, String datasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = findDatasetByIdWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> findDatasetByIdWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = findDatasetByIdValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findDatasetByIdAsync(String organizationId, String datasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = findDatasetByIdValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetAccessControl
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetAccessControlCall(String organizationId, String datasetId, String identityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "identity_id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetAccessControlValidateBeforeCall(String organizationId, String datasetId, String identityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling getDatasetAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = getDatasetAccessControlCall(organizationId, datasetId, identityId, _callback);
        return localVarCall;

    }

    /**
     * Get a control access for the Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @return DatasetAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetAccessControl getDatasetAccessControl(String organizationId, String datasetId, String identityId) throws ApiException {
        ApiResponse<DatasetAccessControl> localVarResp = getDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId);
        return localVarResp.getData();
    }

    /**
     * Get a control access for the Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @return ApiResponse&lt;DatasetAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetAccessControl> getDatasetAccessControlWithHttpInfo(String organizationId, String datasetId, String identityId) throws ApiException {
        okhttp3.Call localVarCall = getDatasetAccessControlValidateBeforeCall(organizationId, datasetId, identityId, null);
        Type localVarReturnType = new TypeToken<DatasetAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a control access for the Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or user specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetAccessControlAsync(String organizationId, String datasetId, String identityId, final ApiCallback<DatasetAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetAccessControlValidateBeforeCall(organizationId, datasetId, identityId, _callback);
        Type localVarReturnType = new TypeToken<DatasetAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetSecurity
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetSecurityCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetSecurityValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getDatasetSecurity(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDatasetSecurity(Async)");
        }
        

        okhttp3.Call localVarCall = getDatasetSecurityCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Get the Dataset security information
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return DatasetSecurity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetSecurity getDatasetSecurity(String organizationId, String datasetId) throws ApiException {
        ApiResponse<DatasetSecurity> localVarResp = getDatasetSecurityWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Get the Dataset security information
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;DatasetSecurity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetSecurity> getDatasetSecurityWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = getDatasetSecurityValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<DatasetSecurity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Dataset security information (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetSecurityAsync(String organizationId, String datasetId, final ApiCallback<DatasetSecurity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetSecurityValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetSecurity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetSecurityUsers
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetSecurityUsersCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security/users"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetSecurityUsersValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getDatasetSecurityUsers(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDatasetSecurityUsers(Async)");
        }
        

        okhttp3.Call localVarCall = getDatasetSecurityUsersCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Get the Dataset security users list
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getDatasetSecurityUsers(String organizationId, String datasetId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getDatasetSecurityUsersWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Get the Dataset security users list
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getDatasetSecurityUsersWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = getDatasetSecurityUsersValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Dataset security users list (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset security users list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset or the User specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetSecurityUsersAsync(String organizationId, String datasetId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetSecurityUsersValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetTwingraphStatus
     * @param organizationId the Organization identifier (required)
     * @param datasetId the dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetTwingraphStatusCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/status"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/yaml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetTwingraphStatusValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getDatasetTwingraphStatus(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDatasetTwingraphStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getDatasetTwingraphStatusCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Get the dataset&#39;s refresh job status
     * Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
     * @param organizationId the Organization identifier (required)
     * @param datasetId the dataset identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public String getDatasetTwingraphStatus(String organizationId, String datasetId) throws ApiException {
        ApiResponse<String> localVarResp = getDatasetTwingraphStatusWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Get the dataset&#39;s refresh job status
     * Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
     * @param organizationId the Organization identifier (required)
     * @param datasetId the dataset identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getDatasetTwingraphStatusWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = getDatasetTwingraphStatusValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the dataset&#39;s refresh job status (asynchronously)
     * Get the status of the import workflow lauch on the dataset&#39;s refresh. This endpoint needs to be called to update a dataset IngestionStatus or TwincacheStatus
     * @param organizationId the Organization identifier (required)
     * @param datasetId the dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetTwingraphStatusAsync(String organizationId, String datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetTwingraphStatusValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTwingraphEntities
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTwingraphEntitiesCall(String organizationId, String datasetId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTwingraphEntitiesValidateBeforeCall(String organizationId, String datasetId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getTwingraphEntities(Async)");
        }
        

        okhttp3.Call localVarCall = getTwingraphEntitiesCall(organizationId, datasetId, type, ids, _callback);
        return localVarCall;

    }

    /**
     * Get entities in a graph instance
     * get entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public String getTwingraphEntities(String organizationId, String datasetId, String type, List<String> ids) throws ApiException {
        ApiResponse<String> localVarResp = getTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids);
        return localVarResp.getData();
    }

    /**
     * Get entities in a graph instance
     * get entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getTwingraphEntitiesWithHttpInfo(String organizationId, String datasetId, String type, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = getTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, ids, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entities in a graph instance (asynchronously)
     * get entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTwingraphEntitiesAsync(String organizationId, String datasetId, String type, List<String> ids, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, ids, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkWorkspace
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkWorkspaceCall(String organizationId, String datasetId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/link"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspaceId", workspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkWorkspaceValidateBeforeCall(String organizationId, String datasetId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling linkWorkspace(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling linkWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling linkWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = linkWorkspaceCall(organizationId, datasetId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Dataset linkWorkspace(String organizationId, String datasetId, String workspaceId) throws ApiException {
        ApiResponse<Dataset> localVarResp = linkWorkspaceWithHttpInfo(organizationId, datasetId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> linkWorkspaceWithHttpInfo(String organizationId, String datasetId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = linkWorkspaceValidateBeforeCall(organizationId, datasetId, workspaceId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkWorkspaceAsync(String organizationId, String datasetId, String workspaceId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkWorkspaceValidateBeforeCall(organizationId, datasetId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshDatasetCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/refresh"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshDatasetValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling refreshDataset(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling refreshDataset(Async)");
        }
        

        okhttp3.Call localVarCall = refreshDatasetCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Refresh data on dataset from dataset&#39;s source
     * Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return DatasetTwinGraphInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public DatasetTwinGraphInfo refreshDataset(String organizationId, String datasetId) throws ApiException {
        ApiResponse<DatasetTwinGraphInfo> localVarResp = refreshDatasetWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Refresh data on dataset from dataset&#39;s source
     * Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;DatasetTwinGraphInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetTwinGraphInfo> refreshDatasetWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = refreshDatasetValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<DatasetTwinGraphInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh data on dataset from dataset&#39;s source (asynchronously)
     * Refresh dataset from parent source. At date, sources can be:      dataset (refresh from another dataset)      Azure Digital twin       Azure storage      Local File (import a new file)  During refresh, datas are overwritten 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshDatasetAsync(String organizationId, String datasetId, final ApiCallback<DatasetTwinGraphInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshDatasetValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetTwinGraphInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllDatasetCompatibilityElements
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllDatasetCompatibilityElementsCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/compatibility"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllDatasetCompatibilityElementsValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeAllDatasetCompatibilityElements(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling removeAllDatasetCompatibilityElements(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllDatasetCompatibilityElementsCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void removeAllDatasetCompatibilityElements(String organizationId, String datasetId) throws ApiException {
        removeAllDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId);
    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAllDatasetCompatibilityElementsWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = removeAllDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllDatasetCompatibilityElementsAsync(String organizationId, String datasetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeDatasetAccessControl
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDatasetAccessControlCall(String organizationId, String datasetId, String identityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "identity_id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDatasetAccessControlValidateBeforeCall(String organizationId, String datasetId, String identityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling removeDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling removeDatasetAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = removeDatasetAccessControlCall(organizationId, datasetId, identityId, _callback);
        return localVarCall;

    }

    /**
     * Remove the specified access from the given Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public void removeDatasetAccessControl(String organizationId, String datasetId, String identityId) throws ApiException {
        removeDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId);
    }

    /**
     * Remove the specified access from the given Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeDatasetAccessControlWithHttpInfo(String organizationId, String datasetId, String identityId) throws ApiException {
        okhttp3.Call localVarCall = removeDatasetAccessControlValidateBeforeCall(organizationId, datasetId, identityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove the specified access from the given Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset or the user specified is unknown or you don&#39;t have access to them </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDatasetAccessControlAsync(String organizationId, String datasetId, String identityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDatasetAccessControlValidateBeforeCall(organizationId, datasetId, identityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackRefresh
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackRefreshCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/refresh/rollback"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackRefreshValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling rollbackRefresh(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling rollbackRefresh(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackRefreshCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Rollback the dataset after a failed refresh
     * Rollback the twingraph on a dataset after a failed refresh
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public String rollbackRefresh(String organizationId, String datasetId) throws ApiException {
        ApiResponse<String> localVarResp = rollbackRefreshWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Rollback the dataset after a failed refresh
     * Rollback the twingraph on a dataset after a failed refresh
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> rollbackRefreshWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = rollbackRefreshValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback the dataset after a failed refresh (asynchronously)
     * Rollback the twingraph on a dataset after a failed refresh
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackRefreshAsync(String organizationId, String datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackRefreshValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDatasets
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDatasetsCall(String organizationId, DatasetSearch datasetSearch, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetSearch;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/search"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDatasetsValidateBeforeCall(String organizationId, DatasetSearch datasetSearch, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling searchDatasets(Async)");
        }
        
        // verify the required parameter 'datasetSearch' is set
        if (datasetSearch == null) {
            throw new ApiException("Missing the required parameter 'datasetSearch' when calling searchDatasets(Async)");
        }
        

        okhttp3.Call localVarCall = searchDatasetsCall(organizationId, datasetSearch, page, size, _callback);
        return localVarCall;

    }

    /**
     * Search Datasets by tags
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return List&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public List<Dataset> searchDatasets(String organizationId, DatasetSearch datasetSearch, Integer page, Integer size) throws ApiException {
        ApiResponse<List<Dataset>> localVarResp = searchDatasetsWithHttpInfo(organizationId, datasetSearch, page, size);
        return localVarResp.getData();
    }

    /**
     * Search Datasets by tags
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @return ApiResponse&lt;List&lt;Dataset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Dataset>> searchDatasetsWithHttpInfo(String organizationId, DatasetSearch datasetSearch, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = searchDatasetsValidateBeforeCall(organizationId, datasetSearch, page, size, null);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Datasets by tags (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @param page page number to query (optional)
     * @param size amount of result by page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDatasetsAsync(String organizationId, DatasetSearch datasetSearch, Integer page, Integer size, final ApiCallback<List<Dataset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDatasetsValidateBeforeCall(organizationId, datasetSearch, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setDatasetDefaultSecurity
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetRole This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDatasetDefaultSecurityCall(String organizationId, String datasetId, DatasetRole datasetRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetRole;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security/default"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDatasetDefaultSecurityValidateBeforeCall(String organizationId, String datasetId, DatasetRole datasetRole, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling setDatasetDefaultSecurity(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling setDatasetDefaultSecurity(Async)");
        }
        
        // verify the required parameter 'datasetRole' is set
        if (datasetRole == null) {
            throw new ApiException("Missing the required parameter 'datasetRole' when calling setDatasetDefaultSecurity(Async)");
        }
        

        okhttp3.Call localVarCall = setDatasetDefaultSecurityCall(organizationId, datasetId, datasetRole, _callback);
        return localVarCall;

    }

    /**
     * Set the Dataset default security
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetRole This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset. (required)
     * @return DatasetSecurity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetSecurity setDatasetDefaultSecurity(String organizationId, String datasetId, DatasetRole datasetRole) throws ApiException {
        ApiResponse<DatasetSecurity> localVarResp = setDatasetDefaultSecurityWithHttpInfo(organizationId, datasetId, datasetRole);
        return localVarResp.getData();
    }

    /**
     * Set the Dataset default security
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetRole This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset. (required)
     * @return ApiResponse&lt;DatasetSecurity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetSecurity> setDatasetDefaultSecurityWithHttpInfo(String organizationId, String datasetId, DatasetRole datasetRole) throws ApiException {
        okhttp3.Call localVarCall = setDatasetDefaultSecurityValidateBeforeCall(organizationId, datasetId, datasetRole, null);
        Type localVarReturnType = new TypeToken<DatasetSecurity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the Dataset default security (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetRole This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Dataset default visibility </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setDatasetDefaultSecurityAsync(String organizationId, String datasetId, DatasetRole datasetRole, final ApiCallback<DatasetSecurity> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDatasetDefaultSecurityValidateBeforeCall(organizationId, datasetId, datasetRole, _callback);
        Type localVarReturnType = new TypeToken<DatasetSecurity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for twingraphBatchQuery
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Graph Identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call twingraphBatchQueryCall(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetTwinGraphQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/batch-query"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call twingraphBatchQueryValidateBeforeCall(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling twingraphBatchQuery(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling twingraphBatchQuery(Async)");
        }
        
        // verify the required parameter 'datasetTwinGraphQuery' is set
        if (datasetTwinGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'datasetTwinGraphQuery' when calling twingraphBatchQuery(Async)");
        }
        

        okhttp3.Call localVarCall = twingraphBatchQueryCall(organizationId, datasetId, datasetTwinGraphQuery, _callback);
        return localVarCall;

    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Graph Identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @return DatasetTwinGraphHash
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public DatasetTwinGraphHash twingraphBatchQuery(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery) throws ApiException {
        ApiResponse<DatasetTwinGraphHash> localVarResp = twingraphBatchQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery);
        return localVarResp.getData();
    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Graph Identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @return ApiResponse&lt;DatasetTwinGraphHash&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetTwinGraphHash> twingraphBatchQueryWithHttpInfo(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery) throws ApiException {
        okhttp3.Call localVarCall = twingraphBatchQueryValidateBeforeCall(organizationId, datasetId, datasetTwinGraphQuery, null);
        Type localVarReturnType = new TypeToken<DatasetTwinGraphHash>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode (asynchronously)
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Graph Identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call twingraphBatchQueryAsync(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, final ApiCallback<DatasetTwinGraphHash> _callback) throws ApiException {

        okhttp3.Call localVarCall = twingraphBatchQueryValidateBeforeCall(organizationId, datasetId, datasetTwinGraphQuery, _callback);
        Type localVarReturnType = new TypeToken<DatasetTwinGraphHash>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for twingraphBatchUpdate
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call twingraphBatchUpdateCall(String organizationId, String datasetId, DatasetTwinGraphQuery twinGraphQuery, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/batch"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (twinGraphQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("twinGraphQuery", twinGraphQuery));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/csv", "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call twingraphBatchUpdateValidateBeforeCall(String organizationId, String datasetId, DatasetTwinGraphQuery twinGraphQuery, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling twingraphBatchUpdate(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling twingraphBatchUpdate(Async)");
        }
        
        // verify the required parameter 'twinGraphQuery' is set
        if (twinGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'twinGraphQuery' when calling twingraphBatchUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling twingraphBatchUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = twingraphBatchUpdateCall(organizationId, datasetId, twinGraphQuery, body, _callback);
        return localVarCall;

    }

    /**
     * Async batch update by loading a CSV file on a graph instance 
     * Async batch update by loading a CSV file on a graph instance 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @return TwinGraphBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public TwinGraphBatchResult twingraphBatchUpdate(String organizationId, String datasetId, DatasetTwinGraphQuery twinGraphQuery, File body) throws ApiException {
        ApiResponse<TwinGraphBatchResult> localVarResp = twingraphBatchUpdateWithHttpInfo(organizationId, datasetId, twinGraphQuery, body);
        return localVarResp.getData();
    }

    /**
     * Async batch update by loading a CSV file on a graph instance 
     * Async batch update by loading a CSV file on a graph instance 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TwinGraphBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TwinGraphBatchResult> twingraphBatchUpdateWithHttpInfo(String organizationId, String datasetId, DatasetTwinGraphQuery twinGraphQuery, File body) throws ApiException {
        okhttp3.Call localVarCall = twingraphBatchUpdateValidateBeforeCall(organizationId, datasetId, twinGraphQuery, body, null);
        Type localVarReturnType = new TypeToken<TwinGraphBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Async batch update by loading a CSV file on a graph instance  (asynchronously)
     * Async batch update by loading a CSV file on a graph instance 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call twingraphBatchUpdateAsync(String organizationId, String datasetId, DatasetTwinGraphQuery twinGraphQuery, File body, final ApiCallback<TwinGraphBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = twingraphBatchUpdateValidateBeforeCall(organizationId, datasetId, twinGraphQuery, body, _callback);
        Type localVarReturnType = new TypeToken<TwinGraphBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for twingraphQuery
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call twingraphQueryCall(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetTwinGraphQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/twingraph"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call twingraphQueryValidateBeforeCall(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling twingraphQuery(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling twingraphQuery(Async)");
        }
        
        // verify the required parameter 'datasetTwinGraphQuery' is set
        if (datasetTwinGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'datasetTwinGraphQuery' when calling twingraphQuery(Async)");
        }
        

        okhttp3.Call localVarCall = twingraphQueryCall(organizationId, datasetId, datasetTwinGraphQuery, _callback);
        return localVarCall;

    }

    /**
     * Return the result of a query made on the graph instance as a json
     * Run a query on a graph instance and return the result as a json
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public String twingraphQuery(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery) throws ApiException {
        ApiResponse<String> localVarResp = twingraphQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery);
        return localVarResp.getData();
    }

    /**
     * Return the result of a query made on the graph instance as a json
     * Run a query on a graph instance and return the result as a json
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> twingraphQueryWithHttpInfo(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery) throws ApiException {
        okhttp3.Call localVarCall = twingraphQueryValidateBeforeCall(organizationId, datasetId, datasetTwinGraphQuery, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the result of a query made on the graph instance as a json (asynchronously)
     * Run a query on a graph instance and return the result as a json
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetTwinGraphQuery the query to run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call twingraphQueryAsync(String organizationId, String datasetId, DatasetTwinGraphQuery datasetTwinGraphQuery, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = twingraphQueryValidateBeforeCall(organizationId, datasetId, datasetTwinGraphQuery, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlinkWorkspace
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkWorkspaceCall(String organizationId, String datasetId, String workspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/unlink"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspaceId", workspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkWorkspaceValidateBeforeCall(String organizationId, String datasetId, String workspaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling unlinkWorkspace(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling unlinkWorkspace(Async)");
        }
        
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling unlinkWorkspace(Async)");
        }
        

        okhttp3.Call localVarCall = unlinkWorkspaceCall(organizationId, datasetId, workspaceId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Dataset unlinkWorkspace(String organizationId, String datasetId, String workspaceId) throws ApiException {
        ApiResponse<Dataset> localVarResp = unlinkWorkspaceWithHttpInfo(organizationId, datasetId, workspaceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> unlinkWorkspaceWithHttpInfo(String organizationId, String datasetId, String workspaceId) throws ApiException {
        okhttp3.Call localVarCall = unlinkWorkspaceValidateBeforeCall(organizationId, datasetId, workspaceId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param workspaceId workspace id to be linked to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlinkWorkspaceAsync(String organizationId, String datasetId, String workspaceId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkWorkspaceValidateBeforeCall(organizationId, datasetId, workspaceId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. This endpoint can&#39;t be used to update security (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetCall(String organizationId, String datasetId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataset;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetValidateBeforeCall(String organizationId, String datasetId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateDataset(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling updateDataset(Async)");
        }
        
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling updateDataset(Async)");
        }
        

        okhttp3.Call localVarCall = updateDatasetCall(organizationId, datasetId, dataset, _callback);
        return localVarCall;

    }

    /**
     * Update a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. This endpoint can&#39;t be used to update security (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Dataset updateDataset(String organizationId, String datasetId, Dataset dataset) throws ApiException {
        ApiResponse<Dataset> localVarResp = updateDatasetWithHttpInfo(organizationId, datasetId, dataset);
        return localVarResp.getData();
    }

    /**
     * Update a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. This endpoint can&#39;t be used to update security (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> updateDatasetWithHttpInfo(String organizationId, String datasetId, Dataset dataset) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetValidateBeforeCall(organizationId, datasetId, dataset, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. This endpoint can&#39;t be used to update security (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAsync(String organizationId, String datasetId, Dataset dataset, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetValidateBeforeCall(organizationId, datasetId, dataset, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDatasetAccessControl
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param datasetRole The new Dataset Access Control (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAccessControlCall(String organizationId, String datasetId, String identityId, DatasetRole datasetRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetRole;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "identity_id" + "\\}", localVarApiClient.escapeString(identityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetAccessControlValidateBeforeCall(String organizationId, String datasetId, String identityId, DatasetRole datasetRole, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling updateDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'identityId' is set
        if (identityId == null) {
            throw new ApiException("Missing the required parameter 'identityId' when calling updateDatasetAccessControl(Async)");
        }
        
        // verify the required parameter 'datasetRole' is set
        if (datasetRole == null) {
            throw new ApiException("Missing the required parameter 'datasetRole' when calling updateDatasetAccessControl(Async)");
        }
        

        okhttp3.Call localVarCall = updateDatasetAccessControlCall(organizationId, datasetId, identityId, datasetRole, _callback);
        return localVarCall;

    }

    /**
     * Update the specified access to User for a Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param datasetRole The new Dataset Access Control (required)
     * @return DatasetAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetAccessControl updateDatasetAccessControl(String organizationId, String datasetId, String identityId, DatasetRole datasetRole) throws ApiException {
        ApiResponse<DatasetAccessControl> localVarResp = updateDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId, datasetRole);
        return localVarResp.getData();
    }

    /**
     * Update the specified access to User for a Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param datasetRole The new Dataset Access Control (required)
     * @return ApiResponse&lt;DatasetAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetAccessControl> updateDatasetAccessControlWithHttpInfo(String organizationId, String datasetId, String identityId, DatasetRole datasetRole) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetAccessControlValidateBeforeCall(organizationId, datasetId, identityId, datasetRole, null);
        Type localVarReturnType = new TypeToken<DatasetAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the specified access to User for a Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param identityId the User identifier (required)
     * @param datasetRole The new Dataset Access Control (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Dataset access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAccessControlAsync(String organizationId, String datasetId, String identityId, DatasetRole datasetRole, final ApiCallback<DatasetAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetAccessControlValidateBeforeCall(organizationId, datasetId, identityId, datasetRole, _callback);
        Type localVarReturnType = new TypeToken<DatasetAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTwingraphEntities
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTwingraphEntitiesCall(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graphProperties;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTwingraphEntitiesValidateBeforeCall(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling updateTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateTwingraphEntities(Async)");
        }
        
        // verify the required parameter 'graphProperties' is set
        if (graphProperties == null) {
            throw new ApiException("Missing the required parameter 'graphProperties' when calling updateTwingraphEntities(Async)");
        }
        

        okhttp3.Call localVarCall = updateTwingraphEntitiesCall(organizationId, datasetId, type, graphProperties, _callback);
        return localVarCall;

    }

    /**
     * Update entities in a graph instance
     * update entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public String updateTwingraphEntities(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties) throws ApiException {
        ApiResponse<String> localVarResp = updateTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties);
        return localVarResp.getData();
    }

    /**
     * Update entities in a graph instance
     * update entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateTwingraphEntitiesWithHttpInfo(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties) throws ApiException {
        okhttp3.Call localVarCall = updateTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, graphProperties, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update entities in a graph instance (asynchronously)
     * update entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTwingraphEntitiesAsync(String organizationId, String datasetId, String type, List<GraphProperties> graphProperties, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTwingraphEntitiesValidateBeforeCall(organizationId, datasetId, type, graphProperties, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadTwingraph
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File uploaded successfully. Processing... </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadTwingraphCall(String organizationId, String datasetId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadTwingraphValidateBeforeCall(String organizationId, String datasetId, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling uploadTwingraph(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling uploadTwingraph(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadTwingraph(Async)");
        }
        

        okhttp3.Call localVarCall = uploadTwingraphCall(organizationId, datasetId, body, _callback);
        return localVarCall;

    }

    /**
     * Upload data from zip file to dataset&#39;s twingraph
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param body  (required)
     * @return FileUploadValidation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File uploaded successfully. Processing... </td><td>  -  </td></tr>
     </table>
     */
    public FileUploadValidation uploadTwingraph(String organizationId, String datasetId, File body) throws ApiException {
        ApiResponse<FileUploadValidation> localVarResp = uploadTwingraphWithHttpInfo(organizationId, datasetId, body);
        return localVarResp.getData();
    }

    /**
     * Upload data from zip file to dataset&#39;s twingraph
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;FileUploadValidation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File uploaded successfully. Processing... </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileUploadValidation> uploadTwingraphWithHttpInfo(String organizationId, String datasetId, File body) throws ApiException {
        okhttp3.Call localVarCall = uploadTwingraphValidateBeforeCall(organizationId, datasetId, body, null);
        Type localVarReturnType = new TypeToken<FileUploadValidation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload data from zip file to dataset&#39;s twingraph (asynchronously)
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> File uploaded successfully. Processing... </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadTwingraphAsync(String organizationId, String datasetId, File body, final ApiCallback<FileUploadValidation> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadTwingraphValidateBeforeCall(organizationId, datasetId, body, _callback);
        Type localVarReturnType = new TypeToken<FileUploadValidation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
