/*
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 2.0.2-dev
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cosmotech.client.model.Dataset;
import com.cosmotech.client.model.DatasetCompatibility;
import com.cosmotech.client.model.DatasetCopyParameters;
import com.cosmotech.client.model.DatasetSearch;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addOrReplaceDatasetCompatibilityElements
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceDatasetCompatibilityElementsCall(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetCompatibility;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/compatibility"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceDatasetCompatibilityElementsValidateBeforeCall(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling addOrReplaceDatasetCompatibilityElements(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling addOrReplaceDatasetCompatibilityElements(Async)");
        }
        
        // verify the required parameter 'datasetCompatibility' is set
        if (datasetCompatibility == null) {
            throw new ApiException("Missing the required parameter 'datasetCompatibility' when calling addOrReplaceDatasetCompatibilityElements(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceDatasetCompatibilityElementsCall(organizationId, datasetId, datasetCompatibility, _callback);
        return localVarCall;

    }

    /**
     * Add Dataset Compatibility elements.
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @return List&lt;DatasetCompatibility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public List<DatasetCompatibility> addOrReplaceDatasetCompatibilityElements(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility) throws ApiException {
        ApiResponse<List<DatasetCompatibility>> localVarResp = addOrReplaceDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId, datasetCompatibility);
        return localVarResp.getData();
    }

    /**
     * Add Dataset Compatibility elements.
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @return ApiResponse&lt;List&lt;DatasetCompatibility&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DatasetCompatibility>> addOrReplaceDatasetCompatibilityElementsWithHttpInfo(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, datasetCompatibility, null);
        Type localVarReturnType = new TypeToken<List<DatasetCompatibility>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Dataset Compatibility elements. (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param datasetCompatibility the Dataset Compatibility elements (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset Compatibility elements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceDatasetCompatibilityElementsAsync(String organizationId, String datasetId, List<DatasetCompatibility> datasetCompatibility, final ApiCallback<List<DatasetCompatibility>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, datasetCompatibility, _callback);
        Type localVarReturnType = new TypeToken<List<DatasetCompatibility>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDatasetCall(String organizationId, DatasetCopyParameters datasetCopyParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetCopyParameters;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/copy"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyDatasetValidateBeforeCall(String organizationId, DatasetCopyParameters datasetCopyParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling copyDataset(Async)");
        }
        
        // verify the required parameter 'datasetCopyParameters' is set
        if (datasetCopyParameters == null) {
            throw new ApiException("Missing the required parameter 'datasetCopyParameters' when calling copyDataset(Async)");
        }
        

        okhttp3.Call localVarCall = copyDatasetCall(organizationId, datasetCopyParameters, _callback);
        return localVarCall;

    }

    /**
     * Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector.
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @return DatasetCopyParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public DatasetCopyParameters copyDataset(String organizationId, DatasetCopyParameters datasetCopyParameters) throws ApiException {
        ApiResponse<DatasetCopyParameters> localVarResp = copyDatasetWithHttpInfo(organizationId, datasetCopyParameters);
        return localVarResp.getData();
    }

    /**
     * Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector.
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @return ApiResponse&lt;DatasetCopyParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetCopyParameters> copyDatasetWithHttpInfo(String organizationId, DatasetCopyParameters datasetCopyParameters) throws ApiException {
        okhttp3.Call localVarCall = copyDatasetValidateBeforeCall(organizationId, datasetCopyParameters, null);
        Type localVarReturnType = new TypeToken<DatasetCopyParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy a Dataset to another Dataset. Source must have a read capable connector and Target a write capable connector. (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetCopyParameters the Dataset copy parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the Dataset copy operation parameters </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified as Source or Target is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDatasetAsync(String organizationId, DatasetCopyParameters datasetCopyParameters, final ApiCallback<DatasetCopyParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyDatasetValidateBeforeCall(organizationId, datasetCopyParameters, _callback);
        Type localVarReturnType = new TypeToken<DatasetCopyParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDataset
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetCall(String organizationId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataset;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasetValidateBeforeCall(String organizationId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createDataset(Async)");
        }
        
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling createDataset(Async)");
        }
        

        okhttp3.Call localVarCall = createDatasetCall(organizationId, dataset, _callback);
        return localVarCall;

    }

    /**
     * Create a new Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public Dataset createDataset(String organizationId, Dataset dataset) throws ApiException {
        ApiResponse<Dataset> localVarResp = createDatasetWithHttpInfo(organizationId, dataset);
        return localVarResp.getData();
    }

    /**
     * Create a new Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> createDatasetWithHttpInfo(String organizationId, Dataset dataset) throws ApiException {
        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(organizationId, dataset, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param dataset the Dataset to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetAsync(String organizationId, Dataset dataset, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(organizationId, dataset, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteDataset(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling deleteDataset(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDatasetCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Delete a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDataset(String organizationId, String datasetId) throws ApiException {
        deleteDatasetWithHttpInfo(organizationId, datasetId);
    }

    /**
     * Delete a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDatasetWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(organizationId, datasetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAsync(String organizationId, String datasetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(organizationId, datasetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllDatasets
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllDatasetsCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllDatasetsValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllDatasets(Async)");
        }
        

        okhttp3.Call localVarCall = findAllDatasetsCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * List all Datasets
     * 
     * @param organizationId the Organization identifier (required)
     * @return List&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public List<Dataset> findAllDatasets(String organizationId) throws ApiException {
        ApiResponse<List<Dataset>> localVarResp = findAllDatasetsWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * List all Datasets
     * 
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;Dataset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Dataset>> findAllDatasetsWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllDatasetsValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Datasets (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllDatasetsAsync(String organizationId, final ApiCallback<List<Dataset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllDatasetsValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findDatasetById
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findDatasetByIdCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findDatasetByIdValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findDatasetById(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling findDatasetById(Async)");
        }
        

        okhttp3.Call localVarCall = findDatasetByIdCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Dataset findDatasetById(String organizationId, String datasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = findDatasetByIdWithHttpInfo(organizationId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a Dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> findDatasetByIdWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = findDatasetByIdValidateBeforeCall(organizationId, datasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a Dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Dataset details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findDatasetByIdAsync(String organizationId, String datasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = findDatasetByIdValidateBeforeCall(organizationId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllDatasetCompatibilityElements
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllDatasetCompatibilityElementsCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}/compatibility"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllDatasetCompatibilityElementsValidateBeforeCall(String organizationId, String datasetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeAllDatasetCompatibilityElements(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling removeAllDatasetCompatibilityElements(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllDatasetCompatibilityElementsCall(organizationId, datasetId, _callback);
        return localVarCall;

    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public void removeAllDatasetCompatibilityElements(String organizationId, String datasetId) throws ApiException {
        removeAllDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId);
    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAllDatasetCompatibilityElementsWithHttpInfo(String organizationId, String datasetId) throws ApiException {
        okhttp3.Call localVarCall = removeAllDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> the operation succeeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllDatasetCompatibilityElementsAsync(String organizationId, String datasetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllDatasetCompatibilityElementsValidateBeforeCall(organizationId, datasetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDatasets
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDatasetsCall(String organizationId, DatasetSearch datasetSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetSearch;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/search"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDatasetsValidateBeforeCall(String organizationId, DatasetSearch datasetSearch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling searchDatasets(Async)");
        }
        
        // verify the required parameter 'datasetSearch' is set
        if (datasetSearch == null) {
            throw new ApiException("Missing the required parameter 'datasetSearch' when calling searchDatasets(Async)");
        }
        

        okhttp3.Call localVarCall = searchDatasetsCall(organizationId, datasetSearch, _callback);
        return localVarCall;

    }

    /**
     * Search Datasets
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @return List&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public List<Dataset> searchDatasets(String organizationId, DatasetSearch datasetSearch) throws ApiException {
        ApiResponse<List<Dataset>> localVarResp = searchDatasetsWithHttpInfo(organizationId, datasetSearch);
        return localVarResp.getData();
    }

    /**
     * Search Datasets
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @return ApiResponse&lt;List&lt;Dataset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Dataset>> searchDatasetsWithHttpInfo(String organizationId, DatasetSearch datasetSearch) throws ApiException {
        okhttp3.Call localVarCall = searchDatasetsValidateBeforeCall(organizationId, datasetSearch, null);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Datasets (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetSearch the Dataset search parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of Datasets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDatasetsAsync(String organizationId, DatasetSearch datasetSearch, final ApiCallback<List<Dataset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDatasetsValidateBeforeCall(organizationId, datasetSearch, _callback);
        Type localVarReturnType = new TypeToken<List<Dataset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDataset
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetCall(String organizationId, String datasetId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataset;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/datasets/{dataset_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "dataset_id" + "\\}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetValidateBeforeCall(String organizationId, String datasetId, Dataset dataset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateDataset(Async)");
        }
        
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling updateDataset(Async)");
        }
        
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling updateDataset(Async)");
        }
        

        okhttp3.Call localVarCall = updateDatasetCall(organizationId, datasetId, dataset, _callback);
        return localVarCall;

    }

    /**
     * Update a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public Dataset updateDataset(String organizationId, String datasetId, Dataset dataset) throws ApiException {
        ApiResponse<Dataset> localVarResp = updateDatasetWithHttpInfo(organizationId, datasetId, dataset);
        return localVarResp.getData();
    }

    /**
     * Update a dataset
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> updateDatasetWithHttpInfo(String organizationId, String datasetId, Dataset dataset) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetValidateBeforeCall(organizationId, datasetId, dataset, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a dataset (asynchronously)
     * 
     * @param organizationId the Organization identifier (required)
     * @param datasetId the Dataset identifier (required)
     * @param dataset the new Dataset details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the dataset details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> the Dataset specified is unknown or you don&#39;t have access to it </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAsync(String organizationId, String datasetId, Dataset dataset, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetValidateBeforeCall(organizationId, datasetId, dataset, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
