/*
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.0.4
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cosmotech.client.api;

import com.cosmotech.client.ApiCallback;
import com.cosmotech.client.ApiClient;
import com.cosmotech.client.ApiException;
import com.cosmotech.client.ApiResponse;
import com.cosmotech.client.Configuration;
import com.cosmotech.client.Pair;
import com.cosmotech.client.ProgressRequestBody;
import com.cosmotech.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.cosmotech.client.model.GraphProperties;
import com.cosmotech.client.model.TwinGraphBatchResult;
import com.cosmotech.client.model.TwinGraphHash;
import com.cosmotech.client.model.TwinGraphQuery;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwingraphApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TwingraphApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwingraphApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchQuery
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchQueryCall(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = twinGraphQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/batch-query"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchQueryValidateBeforeCall(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling batchQuery(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling batchQuery(Async)");
        }
        
        // verify the required parameter 'twinGraphQuery' is set
        if (twinGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'twinGraphQuery' when calling batchQuery(Async)");
        }
        

        okhttp3.Call localVarCall = batchQueryCall(organizationId, graphId, twinGraphQuery, _callback);
        return localVarCall;

    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @return TwinGraphHash
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TwinGraphHash batchQuery(String organizationId, String graphId, TwinGraphQuery twinGraphQuery) throws ApiException {
        ApiResponse<TwinGraphHash> localVarResp = batchQueryWithHttpInfo(organizationId, graphId, twinGraphQuery);
        return localVarResp.getData();
    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @return ApiResponse&lt;TwinGraphHash&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TwinGraphHash> batchQueryWithHttpInfo(String organizationId, String graphId, TwinGraphQuery twinGraphQuery) throws ApiException {
        okhttp3.Call localVarCall = batchQueryValidateBeforeCall(organizationId, graphId, twinGraphQuery, null);
        Type localVarReturnType = new TypeToken<TwinGraphHash>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode (asynchronously)
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchQueryAsync(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, final ApiCallback<TwinGraphHash> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchQueryValidateBeforeCall(organizationId, graphId, twinGraphQuery, _callback);
        Type localVarReturnType = new TypeToken<TwinGraphHash>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchUploadUpdate
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchUploadUpdateCall(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/batch"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (twinGraphQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("twinGraphQuery", twinGraphQuery));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/csv", "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUploadUpdateValidateBeforeCall(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling batchUploadUpdate(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling batchUploadUpdate(Async)");
        }
        
        // verify the required parameter 'twinGraphQuery' is set
        if (twinGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'twinGraphQuery' when calling batchUploadUpdate(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling batchUploadUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = batchUploadUpdateCall(organizationId, graphId, twinGraphQuery, body, _callback);
        return localVarCall;

    }

    /**
     * Async batch update by loading a CSV file on a graph instance 
     * Async batch update by loading a CSV file on a graph instance 
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @return TwinGraphBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TwinGraphBatchResult batchUploadUpdate(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, File body) throws ApiException {
        ApiResponse<TwinGraphBatchResult> localVarResp = batchUploadUpdateWithHttpInfo(organizationId, graphId, twinGraphQuery, body);
        return localVarResp.getData();
    }

    /**
     * Async batch update by loading a CSV file on a graph instance 
     * Async batch update by loading a CSV file on a graph instance 
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TwinGraphBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TwinGraphBatchResult> batchUploadUpdateWithHttpInfo(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, File body) throws ApiException {
        okhttp3.Call localVarCall = batchUploadUpdateValidateBeforeCall(organizationId, graphId, twinGraphQuery, body, null);
        Type localVarReturnType = new TypeToken<TwinGraphBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Async batch update by loading a CSV file on a graph instance  (asynchronously)
     * Async batch update by loading a CSV file on a graph instance 
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> csv file processed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchUploadUpdateAsync(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, File body, final ApiCallback<TwinGraphBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUploadUpdateValidateBeforeCall(organizationId, graphId, twinGraphQuery, body, _callback);
        Type localVarReturnType = new TypeToken<TwinGraphBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEntities
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createEntitiesCall(String organizationId, String graphId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graphProperties;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/entity/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntitiesValidateBeforeCall(String organizationId, String graphId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createEntities(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling createEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createEntities(Async)");
        }
        
        // verify the required parameter 'graphProperties' is set
        if (graphProperties == null) {
            throw new ApiException("Missing the required parameter 'graphProperties' when calling createEntities(Async)");
        }
        

        okhttp3.Call localVarCall = createEntitiesCall(organizationId, graphId, type, graphProperties, _callback);
        return localVarCall;

    }

    /**
     * Create new entities in a graph instance
     * create new entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String createEntities(String organizationId, String graphId, String type, List<GraphProperties> graphProperties) throws ApiException {
        ApiResponse<String> localVarResp = createEntitiesWithHttpInfo(organizationId, graphId, type, graphProperties);
        return localVarResp.getData();
    }

    /**
     * Create new entities in a graph instance
     * create new entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> createEntitiesWithHttpInfo(String organizationId, String graphId, String type, List<GraphProperties> graphProperties) throws ApiException {
        okhttp3.Call localVarCall = createEntitiesValidateBeforeCall(organizationId, graphId, type, graphProperties, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new entities in a graph instance (asynchronously)
     * create new entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createEntitiesAsync(String organizationId, String graphId, String type, List<GraphProperties> graphProperties, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntitiesValidateBeforeCall(organizationId, graphId, type, graphProperties, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGraph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createGraphCall(String organizationId, String graphId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGraphValidateBeforeCall(String organizationId, String graphId, File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createGraph(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling createGraph(Async)");
        }
        

        okhttp3.Call localVarCall = createGraphCall(organizationId, graphId, body, _callback);
        return localVarCall;

    }

    /**
     * Create a new graph
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void createGraph(String organizationId, String graphId, File body) throws ApiException {
        createGraphWithHttpInfo(organizationId, graphId, body);
    }

    /**
     * Create a new graph
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> createGraphWithHttpInfo(String organizationId, String graphId, File body) throws ApiException {
        okhttp3.Call localVarCall = createGraphValidateBeforeCall(organizationId, graphId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new graph (asynchronously)
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name &#x3D; &#39;id&#39;. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createGraphAsync(String organizationId, String graphId, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGraphValidateBeforeCall(organizationId, graphId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteCall(String organizationId, String graphId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String organizationId, String graphId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling delete(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(organizationId, graphId, _callback);
        return localVarCall;

    }

    /**
     * Delete all versions of a graph and his metadatas
     * Delete all versions of a graph and his metadatas
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void delete(String organizationId, String graphId) throws ApiException {
        deleteWithHttpInfo(organizationId, graphId);
    }

    /**
     * Delete all versions of a graph and his metadatas
     * Delete all versions of a graph and his metadatas
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteWithHttpInfo(String organizationId, String graphId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(organizationId, graphId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all versions of a graph and his metadatas (asynchronously)
     * Delete all versions of a graph and his metadatas
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAsync(String organizationId, String graphId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(organizationId, graphId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEntities
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteEntitiesCall(String organizationId, String graphId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/entity/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntitiesValidateBeforeCall(String organizationId, String graphId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteEntities(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling deleteEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteEntities(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling deleteEntities(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEntitiesCall(organizationId, graphId, type, ids, _callback);
        return localVarCall;

    }

    /**
     * Delete entities in a graph instance
     * delete entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteEntities(String organizationId, String graphId, String type, List<String> ids) throws ApiException {
        deleteEntitiesWithHttpInfo(organizationId, graphId, type, ids);
    }

    /**
     * Delete entities in a graph instance
     * delete entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteEntitiesWithHttpInfo(String organizationId, String graphId, String type, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = deleteEntitiesValidateBeforeCall(organizationId, graphId, type, ids, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete entities in a graph instance (asynchronously)
     * delete entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteEntitiesAsync(String organizationId, String graphId, String type, List<String> ids, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntitiesValidateBeforeCall(organizationId, graphId, type, ids, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadGraph
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call downloadGraphCall(String organizationId, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/download/{hash}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "hash" + "\\}", localVarApiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGraphValidateBeforeCall(String organizationId, String hash, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling downloadGraph(Async)");
        }
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling downloadGraph(Async)");
        }
        

        okhttp3.Call localVarCall = downloadGraphCall(organizationId, hash, _callback);
        return localVarCall;

    }

    /**
     * Download a graph compressed in a zip file
     * Download a graph compressed in a zip file
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public File downloadGraph(String organizationId, String hash) throws ApiException {
        ApiResponse<File> localVarResp = downloadGraphWithHttpInfo(organizationId, hash);
        return localVarResp.getData();
    }

    /**
     * Download a graph compressed in a zip file
     * Download a graph compressed in a zip file
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> downloadGraphWithHttpInfo(String organizationId, String hash) throws ApiException {
        okhttp3.Call localVarCall = downloadGraphValidateBeforeCall(organizationId, hash, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a graph compressed in a zip file (asynchronously)
     * Download a graph compressed in a zip file
     * @param organizationId the Organization identifier (required)
     * @param hash the Graph download identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call downloadGraphAsync(String organizationId, String hash, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGraphValidateBeforeCall(organizationId, hash, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllTwingraphs
     * @param organizationId the Organization identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call findAllTwingraphsCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraphs"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllTwingraphsValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling findAllTwingraphs(Async)");
        }
        

        okhttp3.Call localVarCall = findAllTwingraphsCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Return the list of all graphs stored in the organization
     * Return the list of all graphs stored in the organization
     * @param organizationId the Organization identifier (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<String> findAllTwingraphs(String organizationId) throws ApiException {
        ApiResponse<List<String>> localVarResp = findAllTwingraphsWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Return the list of all graphs stored in the organization
     * Return the list of all graphs stored in the organization
     * @param organizationId the Organization identifier (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<String>> findAllTwingraphsWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = findAllTwingraphsValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the list of all graphs stored in the organization (asynchronously)
     * Return the list of all graphs stored in the organization
     * @param organizationId the Organization identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call findAllTwingraphsAsync(String organizationId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllTwingraphsValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntities
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEntitiesCall(String organizationId, String graphId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/entity/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitiesValidateBeforeCall(String organizationId, String graphId, String type, List<String> ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getEntities(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling getEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getEntities(Async)");
        }
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getEntities(Async)");
        }
        

        okhttp3.Call localVarCall = getEntitiesCall(organizationId, graphId, type, ids, _callback);
        return localVarCall;

    }

    /**
     * Get entities in a graph instance
     * get entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String getEntities(String organizationId, String graphId, String type, List<String> ids) throws ApiException {
        ApiResponse<String> localVarResp = getEntitiesWithHttpInfo(organizationId, graphId, type, ids);
        return localVarResp.getData();
    }

    /**
     * Get entities in a graph instance
     * get entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> getEntitiesWithHttpInfo(String organizationId, String graphId, String type, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = getEntitiesValidateBeforeCall(organizationId, graphId, type, ids, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entities in a graph instance (asynchronously)
     * get entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param ids the entities to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEntitiesAsync(String organizationId, String graphId, String type, List<String> ids, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitiesValidateBeforeCall(organizationId, graphId, type, ids, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGraphMetaData
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getGraphMetaDataCall(String organizationId, String graphId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/metadata"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGraphMetaDataValidateBeforeCall(String organizationId, String graphId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getGraphMetaData(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling getGraphMetaData(Async)");
        }
        

        okhttp3.Call localVarCall = getGraphMetaDataCall(organizationId, graphId, _callback);
        return localVarCall;

    }

    /**
     * Return the metaData of the specified graph
     * Return the metaData of the specified graph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Object getGraphMetaData(String organizationId, String graphId) throws ApiException {
        ApiResponse<Object> localVarResp = getGraphMetaDataWithHttpInfo(organizationId, graphId);
        return localVarResp.getData();
    }

    /**
     * Return the metaData of the specified graph
     * Return the metaData of the specified graph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> getGraphMetaDataWithHttpInfo(String organizationId, String graphId) throws ApiException {
        okhttp3.Call localVarCall = getGraphMetaDataValidateBeforeCall(organizationId, graphId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the metaData of the specified graph (asynchronously)
     * Return the metaData of the specified graph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getGraphMetaDataAsync(String organizationId, String graphId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGraphMetaDataValidateBeforeCall(organizationId, graphId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobStatus
     * @param organizationId the Organization identifier (required)
     * @param jobId the job identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call jobStatusCall(String organizationId, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/job/{job_id}/status"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "job_id" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/yaml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobStatusValidateBeforeCall(String organizationId, String jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling jobStatus(Async)");
        }
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobStatus(Async)");
        }
        

        okhttp3.Call localVarCall = jobStatusCall(organizationId, jobId, _callback);
        return localVarCall;

    }

    /**
     * Get the status of a job
     * Get the status of a job
     * @param organizationId the Organization identifier (required)
     * @param jobId the job identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String jobStatus(String organizationId, String jobId) throws ApiException {
        ApiResponse<String> localVarResp = jobStatusWithHttpInfo(organizationId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get the status of a job
     * Get the status of a job
     * @param organizationId the Organization identifier (required)
     * @param jobId the job identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> jobStatusWithHttpInfo(String organizationId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobStatusValidateBeforeCall(organizationId, jobId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of a job (asynchronously)
     * Get the status of a job
     * @param organizationId the Organization identifier (required)
     * @param jobId the job identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call jobStatusAsync(String organizationId, String jobId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobStatusValidateBeforeCall(organizationId, jobId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for query
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call queryCall(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = twinGraphQuery;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/query"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryValidateBeforeCall(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling query(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling query(Async)");
        }
        
        // verify the required parameter 'twinGraphQuery' is set
        if (twinGraphQuery == null) {
            throw new ApiException("Missing the required parameter 'twinGraphQuery' when calling query(Async)");
        }
        

        okhttp3.Call localVarCall = queryCall(organizationId, graphId, twinGraphQuery, _callback);
        return localVarCall;

    }

    /**
     * Run a query on a graph instance
     * Run a query on a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String query(String organizationId, String graphId, TwinGraphQuery twinGraphQuery) throws ApiException {
        ApiResponse<String> localVarResp = queryWithHttpInfo(organizationId, graphId, twinGraphQuery);
        return localVarResp.getData();
    }

    /**
     * Run a query on a graph instance
     * Run a query on a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> queryWithHttpInfo(String organizationId, String graphId, TwinGraphQuery twinGraphQuery) throws ApiException {
        okhttp3.Call localVarCall = queryValidateBeforeCall(organizationId, graphId, twinGraphQuery, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a query on a graph instance (asynchronously)
     * Run a query on a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param twinGraphQuery the query to run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call queryAsync(String organizationId, String graphId, TwinGraphQuery twinGraphQuery, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryValidateBeforeCall(organizationId, graphId, twinGraphQuery, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEntities
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateEntitiesCall(String organizationId, String graphId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = graphProperties;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/entity/{type}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntitiesValidateBeforeCall(String organizationId, String graphId, String type, List<GraphProperties> graphProperties, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateEntities(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling updateEntities(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateEntities(Async)");
        }
        
        // verify the required parameter 'graphProperties' is set
        if (graphProperties == null) {
            throw new ApiException("Missing the required parameter 'graphProperties' when calling updateEntities(Async)");
        }
        

        okhttp3.Call localVarCall = updateEntitiesCall(organizationId, graphId, type, graphProperties, _callback);
        return localVarCall;

    }

    /**
     * Update entities in a graph instance
     * update entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String updateEntities(String organizationId, String graphId, String type, List<GraphProperties> graphProperties) throws ApiException {
        ApiResponse<String> localVarResp = updateEntitiesWithHttpInfo(organizationId, graphId, type, graphProperties);
        return localVarResp.getData();
    }

    /**
     * Update entities in a graph instance
     * update entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> updateEntitiesWithHttpInfo(String organizationId, String graphId, String type, List<GraphProperties> graphProperties) throws ApiException {
        okhttp3.Call localVarCall = updateEntitiesValidateBeforeCall(organizationId, graphId, type, graphProperties, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update entities in a graph instance (asynchronously)
     * update entities in a graph instance
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param type the entity model type (required)
     * @param graphProperties the entities to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateEntitiesAsync(String organizationId, String graphId, String type, List<GraphProperties> graphProperties, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntitiesValidateBeforeCall(organizationId, graphId, type, graphProperties, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGraphMetaData
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param requestBody the metaData to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateGraphMetaDataCall(String organizationId, String graphId, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/twingraph/{graph_id}/metadata"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "graph_id" + "\\}", localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2AuthCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGraphMetaDataValidateBeforeCall(String organizationId, String graphId, Map<String, String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateGraphMetaData(Async)");
        }
        
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException("Missing the required parameter 'graphId' when calling updateGraphMetaData(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateGraphMetaData(Async)");
        }
        

        okhttp3.Call localVarCall = updateGraphMetaDataCall(organizationId, graphId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Update the metaData of the specified graph
     * Update the metaData of the specified graph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param requestBody the metaData to update (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Object updateGraphMetaData(String organizationId, String graphId, Map<String, String> requestBody) throws ApiException {
        ApiResponse<Object> localVarResp = updateGraphMetaDataWithHttpInfo(organizationId, graphId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update the metaData of the specified graph
     * Update the metaData of the specified graph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param requestBody the metaData to update (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> updateGraphMetaDataWithHttpInfo(String organizationId, String graphId, Map<String, String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateGraphMetaDataValidateBeforeCall(organizationId, graphId, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the metaData of the specified graph (asynchronously)
     * Update the metaData of the specified graph
     * @param organizationId the Organization identifier (required)
     * @param graphId the Graph Identifier (required)
     * @param requestBody the metaData to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateGraphMetaDataAsync(String organizationId, String graphId, Map<String, String> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGraphMetaDataValidateBeforeCall(organizationId, graphId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
